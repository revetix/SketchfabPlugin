using System;
using System.Globalization;
using System.IO;
using System.Text;

namespace SketchfabPlugin
{
	class BlenderScripts
	{
		public static string Static(int bindPose = 1, bool indexFix = false, string tempDir = "_sfTemp")
		{
			string blenderScript = Encoding.UTF8.GetString(Convert.FromBase64String(""));
			blenderScript = blenderScript.Replace("{tempPath}", tempDir);
			if (bindPose == 0)
			{
				blenderScript = blenderScript.Replace("BINDPOSE = 1", "BINDPOSE = 0");
			}
			if (indexFix)
			{
				blenderScript = blenderScript.Replace("indexFix = False", "indexFix = True");
			}
			return blenderScript;
		}

		public static string RiggedAnimated(int bindPose = 1, bool indexFix = false, bool animated = false, string fileName = "./_sfTemp/file.osgjs")
		{
			string blenderScript = Encoding.UTF8.GetString(Convert.FromBase64String(""));
			if (bindPose == 1)
			{
				blenderScript = blenderScript.Replace("Bindpose = 0", "Bindpose = 1");
			}
			if (indexFix)
			{
				blenderScript = blenderScript.Replace("indexFix = False", "indexFix = True");
			}
			if (animated)
			{
				blenderScript = blenderScript.Replace("Animation = False", "Animation = True");
			}
			blenderScript = blenderScript.Replace("%FILENAME%", fileName);
			return blenderScript;
		}

		public static string Rig(int bindPose = 1, bool indexFix = false, string tempDir = "_sfTemp")
		{
			string blenderScript = Encoding.UTF8.GetString(Convert.FromBase64String("aW1wb3J0IG5ld0dhbWVMaWINCmZyb20gbmV3R2FtZUxpYiBpbXBvcnQgKg0KaW1wb3J0IEJsZW5kZXINCg0KaW1wb3J0IGFycmF5DQppbXBvcnQgc3VicHJvY2Vzcw0KaW1wb3J0IHN5cyBhcyBzeXMyDQoNCg0KaHRtMT0iIiINCjxoZWFkPg0KICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9zdGF0aWMuc2tldGNoZmFiLmNvbS9hcGkvc2tldGNoZmFiLXZpZXdlci0xLjMuMC5qcyI+PC9zY3JpcHQ+DQogIA0KICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoYWRlcmJ5dGVzL1NrZXRjaGZhYi1WaWV3ZXItQVBJLVV0aWxpdHlAdjIuMC4wLjcvU2tldGNoZmFiQVBJVXRpbGl0eS5qcyI+PC9zY3JpcHQ+DQogICANCjwvaGVhZD4NCg0KPGJvZHk+DQogIDxkaXYgY2xhc3M9ImNlbnRlci1kaXYiPg0KCTxpZnJhbWUgaWQ9ImFwaS1mcmFtZSIgd2lkdGg9IjEwMDAiIGhlaWdodD0iNTUwIgkgYWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbj0idHJ1ZSIgd2Via2l0YWxsb3dmdWxsc2NyZWVuPSJ0cnVlIj48L2lmcmFtZT4NCiAgPC9kaXY+DQogIA0KICA8c2NyaXB0Pg0KCSAgZnVuY3Rpb24gb25Ta2V0Y2hmYWJVdGlsaXR5UmVhZHkoKXsNCgkJIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5yZW1vdmVFdmVudExpc3RlbmVyKHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5FVkVOVF9JTklUSUFMSVpFRCwgb25Ta2V0Y2hmYWJVdGlsaXR5UmVhZHkpOw0KCQkgLy9zb21lIGNvZGUgaGVyZS4uDQoJICB9Ow0KCSAgdmFyIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZSA9IG5ldyBTa2V0Y2hmYWJBUElVdGlsaXR5KCIjIyMiIiINCmh0bTI9IiIiYWY1MjhlM2RmNWY3NjZjYTAxMmY1ZTA2NWM3Y2I4MTIiIiINCmh0bTM9IiIiIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwaS1mcmFtZSIpLCB7ImF1dG9zdGFydCI6IDEgfSk7DQoJICBza2V0Y2hmYWJBUElVdGlsaXR5SW5zdGFuY2UuYWRkRXZlbnRMaXN0ZW5lcihza2V0Y2hmYWJBUElVdGlsaXR5SW5zdGFuY2UuRVZFTlRfSU5JVElBTElaRUQsIG9uU2tldGNoZmFiVXRpbGl0eVJlYWR5KTsNCgkgIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5jcmVhdGUoKTsNCiAgIDwvc2NyaXB0Pg0KICANCjwvYm9keT4NCiIiIg0KDQoNCgkNCmNsYXNzIEJpbmFyeVJlYWRlcihmaWxlKToNCgkiIiJnZW5lcmFsIEJpbmFyeVJlYWRlcg0KCSIiIg0KCWRlZiBfX2luaXRfXyhzZWxmLCBpbnB1dEZpbGUpOg0KCQlzZWxmLmlucHV0RmlsZT1pbnB1dEZpbGUNCgkJc2VsZi5lbmRpYW49JzwnDQoJCXNlbGYuZGVidWc9RmFsc2UNCgkJc2VsZi5zdHJlYW09e30NCgkJc2VsZi5sb2dmaWxlPU5vbmUNCgkJc2VsZi5sb2c9RmFsc2UNCgkJc2VsZi5kaXJuYW1lPUJsZW5kZXIuc3lzLmRpcm5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkNCgkJc2VsZi5iYXNlbmFtZT1CbGVuZGVyLnN5cy5iYXNlbmFtZShzZWxmLmlucHV0RmlsZS5uYW1lKS5zcGxpdCgnLicpWzBdDQoJCXNlbGYuZXh0PUJsZW5kZXIuc3lzLmJhc2VuYW1lKHNlbGYuaW5wdXRGaWxlLm5hbWUpLnNwbGl0KCcuJylbLTFdDQoJCXNlbGYueG9yS2V5PU5vbmUNCgkJc2VsZi54b3JPZmZzZXQ9MA0KCQlzZWxmLnhvckRhdGE9JycNCgkJc2VsZi5sb2dza2lwPUZhbHNlDQoJCQ0KCWRlZiBjbG9zZShzZWxmKToNCgkJc2VsZi5pbnB1dEZpbGUuY2xvc2UoKQ0KCQkNCglkZWYgWE9SKHNlbGYsZGF0YSk6DQoJCQlzZWxmLnhvckRhdGE9JycNCgkJCWZvciBtIGluIHJhbmdlKGxlbihkYXRhKSk6DQoJCQkJY2g9b3JkKAljaHIoZGF0YVttXSBeIHNlbGYueG9yS2V5W3NlbGYueG9yT2Zmc2V0XSkJKQ0KCQkJCXNlbGYueG9yRGF0YSs9c3RydWN0LnBhY2soJ0InLGNoKQ0KCQkJCWlmIHNlbGYueG9yT2Zmc2V0PT1sZW4oc2VsZi54b3JLZXkpLTE6DQoJCQkJCXNlbGYueG9yT2Zmc2V0PTANCgkJCQllbHNlOg0KCQkJCQlzZWxmLnhvck9mZnNldCs9MQkNCgkJDQoJCQ0KCWRlZiBsb2dPcGVuKHNlbGYpOgkNCgkJbG9nRGlyPSdsb2cnDQoJCWlmIG9zLnBhdGguZXhpc3RzKGxvZ0Rpcik9PUZhbHNlOm9zLm1ha2VkaXJzKGxvZ0RpcikNCgkJc2VsZi5sb2c9VHJ1ZQ0KCQlzZWxmLmxvZ2ZpbGU9b3Blbihsb2dEaXIrb3Muc2VwK29zLnBhdGguYmFzZW5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkrJy5sb2cnLCd3JykNCglkZWYgbG9nQ2xvc2Uoc2VsZik6DQoJCXNlbGYubG9nPUZhbHNlDQoJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZToNCgkJCXNlbGYubG9nZmlsZS5jbG9zZSgpDQoJZGVmIGxvZ1dyaXRlKHNlbGYsZGF0YSk6DQoJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZToNCgkJCXNlbGYubG9nZmlsZS53cml0ZShzdHIoZGF0YSkrJ1xuJykNCgkJZWxzZToNCgkJCXByaW50ICdXQVJOSU5HOiBubyBsb2cnDQoJCQkNCglkZWYgZGlybmFtZShzZWxmKToNCgkJcmV0dXJuIEJsZW5kZXIuc3lzLmRpcm5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkNCglkZWYgYmFzZW5hbWUoc2VsZik6DQoJCXJldHVybiBCbGVuZGVyLnN5cy5iYXNlbmFtZShzZWxmLmlucHV0RmlsZS5uYW1lKS5zcGxpdCgnLicpWzBdDQoJZGVmIGV4dChzZWxmKToNCgkJcmV0dXJuIEJsZW5kZXIuc3lzLmJhc2VuYW1lKHNlbGYuaW5wdXRGaWxlLm5hbWUpLnNwbGl0KCcuJylbLTFdDQoJCQ0KCQkNCglkZWYgcShzZWxmLG4pOg0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidxJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qOCkpDQoJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQlwcmludCAncScsZGF0YQ0KCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQlyZXR1cm4gZGF0YQ0KCQkNCglkZWYgaShzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkjZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2knLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnaScpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionaScsc2VsZi54b3JEYXRhKQkNCgkJCQkJDQoJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCXByaW50ICdpJyxkYXRhDQoJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCQlyZXR1cm4gZGF0YQ0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJZm9yIG0gaW4gcmFuZ2UobGVuKG4pKToNCgkJCQlkYXRhPXN0cnVjdC5wYWNrKHNlbGYuZW5kaWFuKydpJyxuW21dKQ0KCQkJCXNlbGYuaW5wdXRGaWxlLndyaXRlKGRhdGEpDQoJDQoJZGVmIEkoc2VsZixuKToNCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ0knLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJZWxzZToNCgkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKjQqJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJCXNlbGYuWE9SKGRhdGEpDQoJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionSScsc2VsZi54b3JEYXRhKQkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50ICdJJyxkYXRhDQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCXJldHVybiBkYXRhDQoJDQoJZGVmIEIoc2VsZixuKToNCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3JiJzoNCgkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4pKQ0KCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnQicpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionQicsc2VsZi5pbnB1dEZpbGUucmVhZChuKSkNCgkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidCJyxzZWxmLnhvckRhdGEpCQ0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnQicsZGF0YQ0KCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQkJcmV0dXJuIGRhdGENCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCWZvciBtIGluIHJhbmdlKGxlbihuKSk6DQoJCQkJZGF0YT1zdHJ1Y3QucGFjayhzZWxmLmVuZGlhbisnQicsblttXSkNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShkYXRhKQ0KCWRlZiBiKHNlbGYsbik6DQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6DQoJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionYicsc2VsZi5pbnB1dEZpbGUucmVhZChuKSkNCgkJCQlkYXRhID0gYXJyYXkuYXJyYXkoJ2InKQ0KCQkJCWRhdGEuZnJvbWZpbGUoc2VsZi5pbnB1dEZpbGUsIG4pDQoJCQkJaWYgc2VsZi5lbmRpYW4gPT0gIj4iOiBkYXRhLmJ5dGVzd2FwKCkNCgkJCWVsc2U6DQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2InLHNlbGYuaW5wdXRGaWxlLnJlYWQobikpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionYicsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2InLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2InLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgaChzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkjZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2gnLHNlbGYuaW5wdXRGaWxlLnJlYWQobioyKSkNCgkJCQkNCgkJCQlkYXRhID0gYXJyYXkuYXJyYXkoJ2gnKQ0KCQkJCWRhdGEuZnJvbWZpbGUoc2VsZi5pbnB1dEZpbGUsIG4pDQoJCQkJaWYgc2VsZi5lbmRpYW4gPT0gIj4iOiBkYXRhLmJ5dGVzd2FwKCkNCgkJCQkNCgkJCQkNCgkJCWVsc2U6DQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qMionQicsc2VsZi5pbnB1dEZpbGUucmVhZChuKjIpKQ0KCQkJCXNlbGYuWE9SKGRhdGEpDQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2gnLHNlbGYueG9yRGF0YSkJDQoJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCXByaW50ICdoJyxkYXRhDQoJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCQlyZXR1cm4gZGF0YQ0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJZm9yIG0gaW4gcmFuZ2UobGVuKG4pKToNCgkJCQlkYXRhPXN0cnVjdC5wYWNrKHNlbGYuZW5kaWFuKydoJyxuW21dKQ0KCQkJCXNlbGYuaW5wdXRGaWxlLndyaXRlKGRhdGEpDQoJZGVmIEgoc2VsZixuKToNCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3JiJzoNCgkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidIJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qMikpDQoJCQkJDQoJCQkJZGF0YSA9IGFycmF5LmFycmF5KCdIJykNCgkJCQlkYXRhLmZyb21maWxlKHNlbGYuaW5wdXRGaWxlLCBuKQ0KCQkJCWlmIHNlbGYuZW5kaWFuID09ICI+IjogZGF0YS5ieXRlc3dhcCgpDQoJCQkJDQoJCQkJDQoJCQllbHNlOg0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKjIqJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQobioyKSkNCgkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidIJyxzZWxmLnhvckRhdGEpCQ0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnSCcsZGF0YQ0KCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQkJcmV0dXJuIGRhdGENCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCWZvciBtIGluIHJhbmdlKGxlbihuKSk6DQoJCQkJZGF0YT1zdHJ1Y3QucGFjayhzZWxmLmVuZGlhbisnSCcsblttXSkNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShkYXRhKQ0KCWRlZiBmKHNlbGYsbik6DQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6DQoJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZicsc2VsZi5pbnB1dEZpbGUucmVhZChuKjQpKQ0KCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnZicpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZicsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2YnLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2YnLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgZChzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZCcsc2VsZi5pbnB1dEZpbGUucmVhZChuKjgpKQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qOCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZCcsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2QnLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2QnLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgaGFsZihzZWxmLG4saD0naCcpOg0KCQlhcnJheSA9IFtdIA0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWZvciBpZCBpbiByYW5nZShuKTogDQoJCQkjYXJyYXkuYXBwZW5kKGNvbnZlcnRoYWxmMmZsb2F0KHN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ0gnLHNlbGYuaW5wdXRGaWxlLnJlYWQoMikpWzBdKSkNCgkJCWFycmF5LmFwcGVuZChjb252ZXJ0aGFsZjJmbG9hdChzdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK2gsc2VsZi5pbnB1dEZpbGUucmVhZCgyKSlbMF0pKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ2hhbGYnLGFycmF5DQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGFycmF5KSsnXG4nKQ0KCQlyZXR1cm4gYXJyYXkNCgkJDQoJZGVmIHNob3J0KHNlbGYsbixoPSdoJyxleHA9MTIpOg0KCQlhcnJheSA9IFtdIA0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWZvciBpZCBpbiByYW5nZShuKTogDQoJCQlhcnJheS5hcHBlbmQoc3RydWN0LnVucGFjayhzZWxmLmVuZGlhbitoLHNlbGYuaW5wdXRGaWxlLnJlYWQoMikpWzBdKjIqKi1leHApDQoJCQkjYXJyYXkuYXBwZW5kKHNlbGYuSCgxKVswXSoyKiotZXhwKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ3Nob3J0JyxhcnJheQ0KCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihhcnJheSkrJ1xuJykNCgkJcmV0dXJuIGFycmF5DQoJCQ0KCWRlZiBpMTIoc2VsZixuKToNCgkJYXJyYXkgPSBbXSANCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlmb3IgaWQgaW4gcmFuZ2Uobik6IA0KCQkJaWYgc2VsZi5lbmRpYW49PSc+JzoNCgkJCQl2YXI9J1x4MDAnK3NlbGYuaW5wdXRGaWxlLnJlYWQoMykNCgkJCWlmIHNlbGYuZW5kaWFuPT0nPCc6DQoJCQkJdmFyPXNlbGYuaW5wdXRGaWxlLnJlYWQoMykrJ1x4MDAnDQoJCQlhcnJheS5hcHBlbmQoc3RydWN0LnVucGFjayhzZWxmLmVuZGlhbisnaScsdmFyKVswXSkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50IGFycmF5DQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGFycmF5KSsnXG4nKQ0KCQlyZXR1cm4gYXJyYXkNCgkJDQoJCQ0KCQkNCglkZWYgZmluZChzZWxmLHZhcik6IA0KCQlzdGFydD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJcz0nJw0KCQl3aGlsZShUcnVlKToNCgkJCWM9c2VsZi5pbnB1dEZpbGUucmVhZCgxKQ0KCQkJI3ByaW50IGMNCgkJCWlmIGM9PXZhclswXToNCgkJCQlpZiBsZW4odmFyKT4xOg0KCQkJCQlmb3IgbSBpbiByYW5nZSgxLGxlbih2YXIpKToNCgkJCQkJCWM9c2VsZi5pbnB1dEZpbGUucmVhZCgxKQ0KCQkJCQkJaWYgYyE9dmFyW21dOg0KCQkJCQkJCWJyZWFrDQoJCQkJCWlmIG09PWxlbih2YXIpLTE6DQoJCQkJCQlicmVhaw0KCQkJCWVsc2U6DQoJCQkJCWJyZWFrDQoJCQllbHNlOgkNCgkJCQlzKz1jCQ0KCQkJCQkJDQoJCQ0KCQkNCgkJDQoJCQ0KCQkjaWYgc2VsZi5sb2c9PVRydWU6DQoJCSMJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCSMJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKHN0YXJ0KSsnCScrcysnXG4nKQ0KCQlyZXR1cm4gcwkNCgkNCglkZWYgZmluZDEoc2VsZix2YXIsc2l6ZT05OTkpOiANCgkJDQoJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlzPScnDQoJCXdoaWxlKFRydWUpOg0KCQkJZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKHNpemUpDQoJCQlvZmY9ZGF0YS5maW5kKHZhcikNCgkJCSNwcmludCBvZmYNCgkJCWlmIG9mZj49MDoNCgkJCQlzKz1kYXRhWzpvZmZdDQoJCQkJc2VsZi5pbnB1dEZpbGUuc2VlayhzdGFydCtvZmYrbGVuKHZhcikpDQoJCQkJI3ByaW50ICd6bmFsZXppb25vJyx2YXIsJ29mZnNldD0nLHNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJCWJyZWFrDQoJCQllbHNlOg0KCQkJCXMrPWRhdGENCgkJCQlzdGFydCs9c2l6ZQ0KCQkJI3ByaW50IHNlbGYuaW5wdXRGaWxlLnRlbGwoKQksc2VsZi5maWxlU2l6ZSgpDQoJCQlpZiBzZWxmLmlucHV0RmlsZS50ZWxsKCk+PXNlbGYuZmlsZVNpemUoKTpicmVhawkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50IHMNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihzdGFydCkrJwknK3MrJ1xuJykNCgkJcmV0dXJuIHMJDQoJCQ0KCWRlZiBmaW5kMTAoc2VsZix2YXIpOiANCgkJDQoJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlzPScnDQoJCWRhdGE9c2VsZi5pbnB1dEZpbGUucmVhZCgpDQoJCW9mZj1kYXRhLmZpbmQodmFyKQ0KCQlpZiBvZmY+PTA6DQoJCQlzKz1kYXRhWzpvZmZdDQoJCQlzZWxmLmlucHV0RmlsZS5zZWVrKHN0YXJ0K29mZitsZW4odmFyKSkNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihzdGFydCkrJwknK3MrJ1xuJykNCgkJcmV0dXJuIHMJDQoJDQoJZGVmIGZpbmRBbGwoc2VsZix2YXIsc2l6ZT0xMDApOiANCgkJbGlzdD1bXQ0KCQl3aGlsZShUcnVlKToNCgkJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKHNpemUpDQoJCQlvZmY9ZGF0YS5maW5kKHZhcikNCgkJCSNwcmludCBvZmYsc2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBvZmY+PTA6DQoJCQkJbGlzdC5hcHBlbmQoc3RhcnQrb2ZmKQ0KCQkJCSNwcmludCBzdGFydCtvZmYNCgkJCQlzZWxmLmlucHV0RmlsZS5zZWVrKHN0YXJ0K29mZitsZW4odmFyKSkNCgkJCQkjaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQkjCXByaW50IHN0YXJ0K29mZg0KCQkJZWxzZToNCgkJCQlzdGFydCs9c2l6ZQ0KCQkJCXNlbGYuaW5wdXRGaWxlLnNlZWsoc3RhcnQpDQoJCQlpZglzZWxmLmlucHV0RmlsZS50ZWxsKCk+c2VsZi5maWxlU2l6ZSgpOg0KCQkJCWJyZWFrDQoJCXJldHVybiBsaXN0CQ0KCQkNCgkJDQoJZGVmIGZpbmRjaGFyKHNlbGYsdmFyKToNCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLmZpbmQodmFyKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgdmFyLCd6bmFsZXppb25vJyxvZmZzZXQNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUodmFyKycgem5hbGV6aW9ubyAnK3N0cihvZmZzZXQpKydcbicpDQoJCXJldHVybiBvZmZzZXQJDQoJCQ0KCQkNCglkZWYgZmlsZVNpemUoc2VsZik6DQoJCWJhY2s9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsoMCwyKQ0KCQl0ZWxsPXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkjc2VsZi5pbnB1dEZpbGUuc2VlaygwKQ0KCQlzZWxmLmlucHV0RmlsZS5zZWVrKGJhY2spDQoJCXJldHVybiB0ZWxsDQoJCQ0KCWRlZiBzZWVrKHNlbGYsb2ZmLGE9MCk6DQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsob2ZmLGEpDQoJDQoJZGVmIHNlZWtwYWQoc2VsZixwYWQsdHlwZT0wKToNCgkJJycnIDE2LWJ5dGUgY2h1bmsgYWxpZ25tZW50JycnDQoJCXNpemU9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCXNlZWsgPSAocGFkIC0gKHNpemUgJSBwYWQpKSAlIHBhZA0KCQlpZiB0eXBlPT0xOg0KCQkJaWYgc2Vlaz09MDoNCgkJCQlzZWVrKz1wYWQNCgkJc2VsZi5pbnB1dEZpbGUuc2VlayhzZWVrLCAxKQ0KCQkNCglkZWYgcmVhZChzZWxmLGNvdW50KToNCgkJYmFjaz1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCXJldHVybiBzZWxmLmlucHV0RmlsZS5yZWFkKGNvdW50KQ0KCQllbHNlOg0KCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK2NvdW50KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKGNvdW50KSkNCgkJCXNlbGYuWE9SKGRhdGEpDQoJCQlyZXR1cm4gc2VsZi54b3JEYXRhDQoJCQkNCgkNCgkJDQoJZGVmIHdyaXRlKHNlbGYsc3RyaW5nKToNCgkJc2VsZi5pbnB1dEZpbGUud3JpdGUoc3RyaW5nKQ0KCQkNCglkZWYgdGVsbChzZWxmKToNCgkJdmFsPXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ2N1cnJlbnQgb2Zmc2V0IGlzJyx2YWwNCgkJcmV0dXJuIHZhbAkNCgkJDQoJZGVmIHdvcmQoc2VsZixsb25nKToNCgkJaWYgbG9uZzwxMDAwMDoNCgkJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6IA0KCQkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCQlzPScnDQoJCQkJZm9yIGogaW4gcmFuZ2UoMCxsb25nKTogDQoJCQkJCQ0KCQkJCQkNCgkJCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkJCWxpdCA9ICBzdHJ1Y3QudW5wYWNrKCdjJyxzZWxmLmlucHV0RmlsZS5yZWFkKDEpKVswXQ0KCQkJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidpJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJCWVsc2U6DQoJCQkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQoMSkpDQoJCQkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCQkJbGl0PXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ2MnLHNlbGYueG9yRGF0YSlbMF0NCgkJCQkJDQoJCQkJCQkjbGl0ID0Jc3RydWN0LnVucGFjaygnYycsc2VsZi5pbnB1dEZpbGUucmVhZCgxKSlbMF0NCgkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJaWYgb3JkKGxpdCkhPTA6DQoJCQkJCQlzKz1saXQNCgkJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCQlwcmludCBzDQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrcysnXG4nKQ0KCQkJCXJldHVybiBzDQoJCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJCSNkYXRhPXNlbGYuaW5wdXRGaWxlLnJlYWQobG9uZykNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShsb25nKQ0KCQkJI3JldHVybiAwCQ0KCQllbHNlOg0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnV0FSTklORzp0b28gbG9uZycNCgkJCSNyZXR1cm4gMQ0KCQkNCgkJDQoJCQ0KCWRlZiBzKHNlbGYsbG9uZyk6DQoJCWlmIGxvbmc8MTAwMDA6DQoJCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOiANCgkJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQkJcz0nJw0KCQkJCWZvciBqIGluIHJhbmdlKDAsbG9uZyk6IA0KCQkJCQkNCgkJCQkJDQoJCQkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJCQlsaXQgPSAgc3RydWN0LnVucGFjaygnYycsc2VsZi5pbnB1dEZpbGUucmVhZCgxKSlbMF0NCgkJCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionaScsc2VsZi5pbnB1dEZpbGUucmVhZChuKjQpKQ0KCQkJCQllbHNlOg0KCQkJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuKydCJyxzZWxmLmlucHV0RmlsZS5yZWFkKDEpKQ0KCQkJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQkJCWxpdD1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuKydjJyxzZWxmLnhvckRhdGEpWzBdDQoJCQkJCQ0KCQkJCQkJI2xpdCA9CXN0cnVjdC51bnBhY2soJ2MnLHNlbGYuaW5wdXRGaWxlLnJlYWQoMSkpWzBdDQoJCQkJCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCWlmIG9yZChsaXQpIT0wOg0KCQkJCQkJcys9bGl0DQoJCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQkJcHJpbnQgcw0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3MrJ1xuJykNCgkJCQlyZXR1cm4gcw0KCQkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCQkjZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKGxvbmcpDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUobG9uZykNCgkJCSNyZXR1cm4gMAkNCgkJZWxzZToNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ1dBUk5JTkc6dG9vIGxvbmcnDQoJCQkjcmV0dXJuIDENCgkJDQoJCQ0KCWRlZiBTdHJlYW0oc2VsZixzdHJlYW1fbmFtZSxlbGVtZW50X2NvdW50LGVsZW1lbnRfc2l6ZSk6DQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsoZWxlbWVudF9jb3VudCplbGVtZW50X3NpemUsMSkNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydvZmZzZXQnXT1vZmZzZXQNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydlbGVtZW50X2NvdW50J109ZWxlbWVudF9jb3VudAkNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydlbGVtZW50X3NpemUnXT1lbGVtZW50X3NpemUJDQoJCQ0KDQoNCg0KZGVmIGdldE1hdE5hbWUoeXMscGFyZW50KToNCgkjcHJpbnQgJ2dldE1hdE5hbWUnDQoJbWF0TmFtZT1Ob25lDQoJaWYJbWF0TmFtZSBub3QgaW4gTUFURVJJQUxTLmtleXMoKToNCgkJVW5pcXVlSUQ9eXMuZ2V0KHBhcmVudCwnIlVuaXF1ZUlEIicpDQoJCWlmIFVuaXF1ZUlEOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhVbmlxdWVJRFswXS5oZWFkZXIsJ3MnKQ0KCQkJaWYgbGVuKHZhbHVlcyk+MToNCgkJCQlpZiAnIicgaW4gdmFsdWVzWzFdIGFuZCAnXycgaW4gdmFsdWVzWzFdOg0KCQkJCQltYXROYW1lPXZhbHVlc1sxXS5zcGxpdCgnIicpWzNdLnNwbGl0KCdfJylbLTJdDQoJDQoJcmdiYT1Ob25lCQ0KCUF0dHJpYnV0ZUxpc3Q9eXMuZ2V0KHBhcmVudCwnIkF0dHJpYnV0ZUxpc3QiJykJDQoJaWYgQXR0cmlidXRlTGlzdDoJCQkNCgkJdmFsdWVzPXlzLnZhbHVlcyhBdHRyaWJ1dGVMaXN0WzBdLmhlYWRlciwnOicpDQoJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQlEaWZmdXNlPXlzLmdldChwYXJlbnQsJyJEaWZmdXNlIicpDQoJCWlmIERpZmZ1c2U6DQoJCQlyZ2JhPXlzLnZhbHVlcyhEaWZmdXNlWzBdLmRhdGEsJ2YnKQkJCQkNCgkJaWYJbWF0TmFtZSBub3QgaW4gTUFURVJJQUxTLmtleXMoKToNCgkJCU1hdGVyaWFsPXlzLmdldChBdHRyaWJ1dGVMaXN0WzBdLCcib3NnLk1hdGVyaWFsIicpDQoJCQlpZiBNYXRlcmlhbDoJDQoJCQkJZm9yIGEgaW4gTWF0ZXJpYWxbMF0uY2hpbGRyZW46DQoJCQkJCWlmICciTmFtZSInIGluIGEuaGVhZGVyOgkJCQkJCQkJDQoJCQkJCQlzcGxpdHM9YS5oZWFkZXIuc3BsaXQoJyInKQ0KCQkJCQkJaWYgbGVuKHNwbGl0cyk+NDoNCgkJCQkJCQltYXROYW1lPXNwbGl0c1s1XQ0KCQkJCQkJCWlmICc6JyBpbiBtYXROYW1lOg0KCQkJCQkJCQltYXROYW1lPW1hdE5hbWUucmVwbGFjZSgnOicsJycpDQoJCQkJCQkJbW9kZWwubWF0TGlzdFtVbmlxdWVJRF09bWF0TmFtZQkNCgkJCQkNCglpZgltYXROYW1lIG5vdCBpbiBNQVRFUklBTFMua2V5cygpOgkNCgkJU3RhdGVTZXQ9eXMuZ2V0KHBhcmVudCwnIlN0YXRlU2V0IicpDQoJCWlmIFN0YXRlU2V0Og0KCQkJb3NnU3RhdGVTZXQ9eXMuZ2V0KFN0YXRlU2V0WzBdLCcib3NnLlN0YXRlU2V0IicpDQoJCQlpZiBvc2dTdGF0ZVNldDoJDQoJCQkJaWYgbGVuKG9zZ1N0YXRlU2V0WzBdLmNoaWxkcmVuKT4wOg0KCQkJCQlmb3IgY2hpbGQgaW4gb3NnU3RhdGVTZXRbMF0uY2hpbGRyZW46CQkJCQ0KCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5oZWFkZXIsJzonKQ0KCQkJCQkJaWYgJyJVbmlxdWVJRCInIGluIHZhbHVlcyBhbmQgJyJOYW1lIicgaW4gdmFsdWVzOg0KCQkJCQkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJCQkJCW1hdE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkJCQkJbW9kZWwubWF0TGlzdFtVbmlxdWVJRF09bWF0TmFtZQ0KCQkJCWVsc2U6CQkJCQ0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKG9zZ1N0YXRlU2V0WzBdLmRhdGEsJzonKQ0KCQkJCQlpZiAnIkF0dHJpYnV0ZUxpc3QiJyBub3QgaW4gdmFsdWVzOg0KCQkJCQkJVW5pcXVlSUQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciVW5pcXVlSUQiJywnaScpDQoJCQkJCQlpZiBVbmlxdWVJRCBpbiBtb2RlbC5tYXRMaXN0Og0KCQkJCQkJCW1hdE5hbWU9bW9kZWwubWF0TGlzdFtVbmlxdWVJRF0NCgkJCQ0KCWlmCW1hdE5hbWU6CQ0KCQlpZglsZW4obWF0TmFtZSk9PTA6DQoJCQltYXROYW1lPSdSb290Tm9kZScNCgkJaWYgJ1x4ZWYnIGluIG1hdE5hbWU6DQoJCQltYXROYW1lPW1hdE5hbWUuc3BsaXQoJ1x4ZWYnKVswXQ0KCWRpZmZ1c2U9Tm9uZQkJDQoJbm9ybWFsPU5vbmUJDQoJc3BlY3VsYXI9Tm9uZQ0KCXRyYW5zPU5vbmUJDQoJYW89Tm9uZQ0KCXJnYkNvbD1Ob25lDQoJcmdiU3BlYz1Ob25lDQoJDQoJDQoJDQoJDQoJDQoJaWYgbGVuKE1BVEVSSUFMUy5rZXlzKCkpPT0xOg0KCQkJa2V5PU1BVEVSSUFMUy5rZXlzKClbMF0NCgkJCWZvciBpbWFnZVR5cGUgaW4gTUFURVJJQUxTW2tleV06DQoJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J3RleHR1cmUnOg0KCQkJCQloYXNoPU1BVEVSSUFMU1trZXldW2ltYWdlVHlwZV1bMV0JCQkJCQ0KCQkJCQlpZiBoYXNoIGluIElNQUdFUy5rZXlzKCk6DQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCXBhdGgsZXhpc3RzLHF1YWxpdHk9SU1BR0VTW2hhc2hdWydSR0InXQ0KCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nT3BhY2l0eSc6dHJhbnM9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdBbGJlZG9QQlInOmRpZmZ1c2U9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlQ29sb3InOmRpZmZ1c2U9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyQ29sb3InOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZVBCUic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ0EnXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnQSddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQl0cmFucz1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ04nXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnTiddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1InXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUiddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdPcGFjaXR5Jzp0cmFucz1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQU9QQlInOmFvPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nUm91Z2huZXNzUEJSJzpzcGVjdWxhcj1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J0dsb3NzaW5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQnVtcE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J2NvbG9yJzoNCgkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZUNvbG9yJzoNCgkJCQkJCXJnYkNvbD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdDQoJCQkJCQkJCQ0KCWVsc2U6CQkJCQkJCQ0KCQlmb3Iga2V5IGluIE1BVEVSSUFMUy5rZXlzKCk6DQoJCQlpZiBrZXk9PW1hdE5hbWU6DQoJCQkJZm9yIGltYWdlVHlwZSBpbiBNQVRFUklBTFNba2V5XToNCgkJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J3RleHR1cmUnOg0KCQkJCQkJaGFzaD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdCQkJCQkNCgkJCQkJCWlmIGhhc2ggaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUkdCJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQWxiZWRvUEJSJzpkaWZmdXNlPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0RpZmZ1c2VDb2xvcic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlUEJSJzpkaWZmdXNlPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J05vcm1hbE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0VtaXRDb2xvcic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdTcGVjdWxhclBCUic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nT3BhY2l0eSc6dHJhbnM9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJGMCc6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZUludGVuc2l0eSc6YW89cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnQSddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnQSddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCXRyYW5zPXBhdGgNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ04nXToNCgkJCQkJCQkJcGF0aCxleGlzdHMscXVhbGl0eT1JTUFHRVNbaGFzaF1bJ04nXQ0KCQkJCQkJCQlpZiBleGlzdHM9PTE6DQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdCdW1wTWFwJzpub3JtYWw9cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnUiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUiddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J09wYWNpdHknOnRyYW5zPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0FPUEJSJzphbz1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdSb3VnaG5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0dsb3NzaW5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdTcGVjdWxhckNvbG9yJzpzcGVjdWxhcj1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJCWlmIE1BVEVSSUFMU1trZXldW2ltYWdlVHlwZV1bMF09PSdjb2xvcic6DQoJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlQ29sb3InOg0KCQkJCQkJCXJnYkNvbD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdDQoJCQkJDQoJVGV4dHVyZUF0dHJpYnV0ZUxpc3Q9eXMuZ2V0KHBhcmVudCwnIlRleHR1cmVBdHRyaWJ1dGVMaXN0IicpDQoJaWYgVGV4dHVyZUF0dHJpYnV0ZUxpc3Q6DQoJCQkjcHJpbnQgJ2hlcmUnDQoJCQlvc2dfVGV4dHVyZT15cy5nZXQocGFyZW50LCcib3NnLlRleHR1cmUiJykNCgkJCWlmIG9zZ19UZXh0dXJlOg0KCQkJCXZhbHVlcz15cy52YWx1ZXMob3NnX1RleHR1cmVbMF0uZGF0YSwnOicpCQkJCQ0KCQkJCWhhc2g9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCQkJaWYgaGFzaDoNCgkJCQkJaWYgJy8nIGluIGhhc2g6DQoJCQkJCQloYXNoPWhhc2guc3BsaXQoJy8nKVsxXQ0KCQkJCQkJI3ByaW50IGhhc2gNCgkJCQkJCWlmIGhhc2ggaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUkdCJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJZGlmZnVzZT1wYXRoDQoJCQkJCQkJaWYgSU1BR0VTW2hhc2hdWydBJ106DQoJCQkJCQkJCXBhdGgsZXhpc3RzLHF1YWxpdHk9SU1BR0VTW2hhc2hdWydBJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJdHJhbnM9cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnTiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnTiddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J05vcm1hbE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQ0KCXJldHVybiBtYXROYW1lLGRpZmZ1c2Usc3BlY3VsYXIsbm9ybWFsLGFvLHRyYW5zLHJnYkNvbCxyZ2JTcGVjLHJnYmENCgkNCg0KZGVmIGdldFNwbGl0TmFtZShuYW1lLHdoYXQsd2hpY2gpOg0KCWE9Tm9uZQ0KCWlmIHdoYXQgaW4gbmFtZToNCgkJYT0nJw0KCQlzcGxpdHM9bmFtZS5zcGxpdCh3aGF0KQ0KCQlpZiB3aGljaDwwOg0KCQkJbnVtPWxlbihzcGxpdHMpK3doaWNoLTENCgkJZWxzZToNCgkJCW51bT13aGljaA0KCQlpZiBudW08MDoNCgkJCWE9bmFtZQ0KCQllbHNlOgkJDQoJCQlpZiB3aGljaDxsZW4oc3BsaXRzKToJCQkNCgkJCQlmb3IgbSBpbiByYW5nZShudW0pOg0KCQkJCQlhKz1zcGxpdHNbbV0rd2hhdA0KCQkJCWErPXNwbGl0c1tudW1dDQoJCQllbHNlOg0KCQkJCWE9bmFtZQkJDQoJcmV0dXJuIGEJDQoJCQ0KDQpkZWYgZXRhcDEoaW5wdXQsSXRlbVNpemUpOg0KCW49bGVuKGlucHV0KS9JdGVtU2l6ZQ0KCXI9MA0KCW91dHB1dD1bMF0qbGVuKGlucHV0KQ0KCXdoaWxlKHI8bik6DQoJCWE9cipJdGVtU2l6ZQ0KCQlzPTANCgkJd2hpbGUoczxJdGVtU2l6ZSk6DQoJCQlvdXRwdXRbYStzXT1pbnB1dFtyK24qc10NCgkJCXMrPTEJDQoJCXIrPTENCglyZXR1cm4gb3V0cHV0CQ0KCQ0KZGVmIGV0YXAyKGlucHV0LEl0ZW1TaXplLGF0cmlidXRlcyk6DQoJaT1bYXRyaWJ1dGVzWyciYngiJ10sYXRyaWJ1dGVzWyciYnkiJ10sYXRyaWJ1dGVzWyciYnoiJ11dDQoJbj1bYXRyaWJ1dGVzWyciaHgiJ10sYXRyaWJ1dGVzWyciaHkiJ10sYXRyaWJ1dGVzWyciaHoiJ11dDQoJYT1sZW4oaW5wdXQpL0l0ZW1TaXplDQoJcz0wDQoJb3V0cHV0PVswXSpsZW4oaW5wdXQpDQoJd2hpbGUoczxhKToNCgkJbz1zKkl0ZW1TaXplDQoJCXU9MA0KCQl3aGlsZSh1PEl0ZW1TaXplKToNCgkJCW91dHB1dFtvK3VdPWlbdV0raW5wdXRbbyt1XSpuW3VdOw0KCQkJdSs9MQkNCgkJcys9MQ0KCXJldHVybiBvdXRwdXQJDQoJDQoJDQoJDQoJDQpkZWYgZXRhcDMoaW5wdXQsSXRlbVNpemUpOg0KCWk9SXRlbVNpemV8MQ0KCW49MQ0KCXI9bGVuKGlucHV0KS9pDQoJd2hpbGUobjxyKToNCgkJYT0obi0xKSppDQoJCXM9bippDQoJCW89MA0KCQl3aGlsZShvPGkpOgkJCQ0KCQkJaW5wdXRbcytvXSs9aW5wdXRbYStvXQ0KCQkJbys9MQkNCgkJbis9MQ0KCXJldHVybiBpbnB1dA0KCQ0KZGVmIGV0YXA0KGlucHV0KToNCgllPTENCglpPWxlbihpbnB1dCkvNA0KCXdoaWxlKGU8aSk6DQoJCW49NCooZS0xKQ0KCQlyPTQqZQ0KCQlhPWlucHV0W25dDQoJCXM9aW5wdXRbbisxXQ0KCQlvPWlucHV0W24rMl0NCgkJdT1pbnB1dFtuKzNdDQoJCWw9aW5wdXRbcl0NCgkJaD1pbnB1dFtyKzFdDQoJCWM9aW5wdXRbcisyXQ0KCQlkPWlucHV0W3IrM10NCgkJaW5wdXRbcl09YSpkK3MqYy1vKmgrdSpsDQoJCWlucHV0W3IrMV09LWEqYytzKmQrbypsK3UqaA0KCQlpbnB1dFtyKzJdPWEqaC1zKmwrbypkK3UqYw0KCQlpbnB1dFtyKzNdPS1hKmwtcypoLW8qYyt1KmQNCgkJZSs9MQ0KCXJldHVybglpbnB1dA0KCQ0KDQoNCmRlZiBpbnQzZmxvYXQ0KGlucHV0LGF0cmlidXRlcyxJdGVtU2l6ZSk6DQoJYz00DQoJZD1hdHJpYnV0ZXNbJyJlcHNpbG9uIiddDQoJcD1pbnQoYXRyaWJ1dGVzWycibnBoaSInXSkNCgllPVswXSpsZW4oaW5wdXQpKjQNCglpPTEuNTcwNzk2MzI2NzkNCgluPTYuMjgzMTg1MzA3MTgNCglyPTMuMTQxNTkyNjUzNTkNCglhPTAuMDE3NDUzMjkyNTENCglzPTAuMjUNCglvPTcyMA0KCXU9ODMyDQoJbD00NzkzODM2MjU4NDE1MTYzNWUtMjENCgloPXt9DQoJZj1UcnVlDQoJDQoJZD1kIG9yIHMNCglwPXAgb3Igbw0KCWc9bWF0aC5jb3MoZCphKQ0KCW09MA0KCXY9MA0KCV89W10NCgkNCgl2PShwKzEpKih1KzEpKjMNCglfPVtOb25lXSp2DQoJDQoJYj1yL2Zsb2F0KHAtMSkNCgl4PWkvZmxvYXQocC0xKQ0KCQ0KCWlmIGY6eT0zDQoJZWxzZTp5PTINCgkJDQoJCQ0KCW09MA0KCXY9bGVuKGlucHV0KS95DQoJd2hpbGUobTx2KToNCgkJQT1tKmMNCgkJUz1tKnkNCgkJQz1pbnB1dFtTXQ0KCQl3PWlucHV0W1MrMV0NCgkJaWYgYz09MDoNCgkJCWlmIGY9PTA6DQoJCQkJaWYgKEMmLTEwMjUpIT00OgkJDQoJCQkJCWVbQSszXT0tMQ0KCQkJCWVsc2U6DQoJCQkJCWVbQSszXT0xDQoJCU09Tm9uZQ0KCQlUPU5vbmUNCgkJRT1Ob25lDQoJCUk9MyooQytwKncpCQkNCgkJTT1fW0ldDQoJCWlmCU09PU5vbmU6CQkJCQ0KCQkJTj1DKmINCgkJCWs9Y29zKE4pDQoJCQlGPXNpbihOKQ0KCQkJTis9eA0KCQkJRD0oZy1rKmNvcyhOKSkvZmxvYXQobWF4KDFlLTUsRipzaW4oTikpKQ0KCQkJaWYgRD4xOkQ9MQ0KCQkJZWxzZToNCgkJCQlpZiBEPC0xOkQ9LTENCgkJCVA9dypuL2Zsb2F0KG1hdGguY2VpbChyL2Zsb2F0KG1heCgxZS01LG1hdGguYWNvcyhEKSkpKSkNCgkJCU09X1tJXT1GKm1hdGguY29zKFApDQoJCQlUPV9bSSsxXT1GKm1hdGguc2luKFApDQoJCQlFPV9bSSsyXT1rDQoJCWVsc2U6IA0KCQkJVD1fW0krMV0NCgkJCUU9X1tJKzJdDQoJCWlmIGY6DQoJCQlSPWlucHV0W1MrMl0qbA0KCQkJTz1tYXRoLnNpbihSKQ0KCQkJZVtBXT1PKk0NCgkJCWVbQSsxXT1PKlQNCgkJCWVbQSsyXT1PKkUNCgkJCWVbQSszXT1tYXRoLmNvcyhSKQ0KCQkJI3dyaXRlKGxvZyxbQSxlW0FdLGVbQSsxXSxlW0ErMl0sZVtBKzNdXSwwKQ0KCQllbHNlOiANCgkJCWVbQV09TQ0KCQkJZVtBKzFdPVQNCgkJCWVbQSsyXT1FDQoJCW0rPTENCgkNCglyZXR1cm4gZQkNCgkNCg0KZGVmIGdldEFuaW1hdGlvbih5cyxBLG4pOg0KCWFjdGlvbj1BY3Rpb24oKQ0KCWFjdGlvbi5CT05FU1BBQ0U9VHJ1ZQ0KCSNhY3Rpb24uQVJNQVRVUkVTUEFDRT1UcnVlDQoJYWN0aW9uLkZSQU1FU09SVD1UcnVlDQoJYWN0aW9uLnNrZWxldG9uPXNrZWxldG9uLm5hbWUNCgluKz00DQoJQ2hhbm5lbHM9eXMuZ2V0KEEsJyJDaGFubmVscyInKQ0KCWJvbmVMaXN0PXt9DQoJaWYgQ2hhbm5lbHM6DQoJCXZhbHVlcz15cy52YWx1ZXMoQ2hhbm5lbHNbMF0uaGVhZGVyLCc6JykNCgkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCWFjdGlvbi5uYW1lPU5hbWUNCgkJbmV3PU5ldyhOYW1lLnJlcGxhY2UoJyInLCcnKS5yZXBsYWNlKCd8JywnJykrJy5hY3Rpb24nLCd3Yicsc3lzKS5vcGVuKCkNCgkJZm9yIGEgaW4gIENoYW5uZWxzWzBdLmNoaWxkcmVuOg0KCQkJVmVjM0xlcnBDaGFubmVsPXlzLmdldChhLCcib3NnQW5pbWF0aW9uLlZlYzNMZXJwQ2hhbm5lbCInKQ0KCQkJaWYgVmVjM0xlcnBDaGFubmVsOg0KCQkJCUtleUZyYW1lcz15cy5nZXQoYSwnIktleUZyYW1lcyInKQ0KCQkJCWlmIEtleUZyYW1lczoNCgkJCQkJdmFsdWVzPXlzLnZhbHVlcyhLZXlGcmFtZXNbMF0uaGVhZGVyLCc6JykNCgkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCQkJCVRhcmdldE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVGFyZ2V0TmFtZSInLCciIicpDQoJCQkJCW5hbWU9Z2V0U3BsaXROYW1lKFRhcmdldE5hbWUsJ18nLC0xKQ0KCQkJCQlpZiBOYW1lPT0nInRyYW5zbGF0ZSInOg0KCQkJCQkJYm9uZT1Ob25lDQoJCQkJCQlpZiBUYXJnZXROYW1lIGluIGJvbmVJbmRla3NMaXN0Og0KCQkJCQkJCW5hbWU9Ym9uZUluZGVrc0xpc3RbVGFyZ2V0TmFtZV0NCgkJCQkJCQlpZiBuYW1lIG5vdCBpbiBib25lTGlzdC5rZXlzKCk6DQoJCQkJCQkJCWJvbmU9QWN0aW9uQm9uZSgpDQoJCQkJCQkJCWFjdGlvbi5ib25lTGlzdC5hcHBlbmQoYm9uZSkNCgkJCQkJCQkJYm9uZS5uYW1lPW5hbWUNCgkJCQkJCQkJYm9uZUxpc3RbbmFtZV09Ym9uZQ0KCQkJCQkJCWJvbmU9Ym9uZUxpc3RbbmFtZV0NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHJpbnQgJ3NraXBlZCB0cmFuc2xhdGUgYm9uZTonLFRhcmdldE5hbWUNCgkJCQkJCQ0KCQkJCQkJDQoJCQkJCQlLZXk9eXMuZ2V0KGEsJyJLZXkiJykNCgkJCQkJCWlmIEtleToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KEtleVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQkJCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQluZXcud3JpdGUoYm9uZS5uYW1lKydceDAwJykNCgkJCQkJCQkJCQluZXcud3JpdGUoJ3RyYW5zbGF0ZScrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy5pKFtpbnQoU2l6ZSldKQ0KCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoaW50KFNpemUpKToNCgkJCQkJCQkJCQl2YWx1ZT1nLmYoSXRlbVNpemUpDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyx2YWx1ZSxuKzgpDQoJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJbmV3LmYodmFsdWUpDQoJCQkJCQkJCQkJCWJvbmVNYXRyaXg9c2tlbGV0b24ub2JqZWN0LmdldERhdGEoKS5ib25lc1tib25lLm5hbWVdLm1hdHJpeFsnQVJNQVRVUkVTUEFDRSddDQoJCQkJCQkJCQkJCW1hdHJpeD1WZWN0b3JNYXRyaXgodmFsdWUpIypib25lTWF0cml4DQoJCQkJCQkJCQkJCWJvbmUucG9zS2V5TGlzdC5hcHBlbmQobWF0cml4KQ0KCQkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQkJZWxzZTpwcmludCAndW5rbm93IGFycmF5IHR5cGUnDQoJCQkJCQllbHNlOnByaW50ICdubyBrZXknCQkJCQ0KCQkJCQkJDQoJCQkJCQlUaW1lPXlzLmdldChhLCciVGltZSInKQ0KCQkJCQkJaWYgVGltZToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFRpbWVbMF0uZGF0YSwnOicpDQoJCQkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpCQkJCQkJDQoJCQkJCQkJRmxvYXQzMkFycmF5PXlzLmdldChUaW1lWzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQkJaWYgRmxvYXQzMkFycmF5Og0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInKQ0KCQkJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicpDQoJCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkJDQoJCQkJCQkJCQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQkJCQkJCQkNCgkJCQkJCQkJCWlmIGJvbmU6bmV3LmkoW2ludChTaXplKV0pDQoJCQkJCQkJCQlmb3IgbSBpbiByYW5nZShpbnQoU2l6ZSkpOg0KCQkJCQkJCQkJCXZhbHVlPWcuZihJdGVtU2l6ZSkNCgkJCQkJCQkJCQlpZiBJdGVtU2l6ZT09MTp2YWx1ZT12YWx1ZVswXQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csW3ZhbHVlXSxuKzgpDQoJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJbmV3LmYoW3ZhbHVlXSkNCgkJCQkJCQkJCQkJYm9uZS5wb3NGcmFtZUxpc3QuYXBwZW5kKGludCh2YWx1ZSozMykpDQoJCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJCQllbHNlOnByaW50ICd1bmtub3cgYXJyYXkgdHlwZScNCgkJCQkJCWVsc2U6cHJpbnQgJ25vIHRpbWUnCQkNCgkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCWlmIE5hbWU9PScic2NhbGUiJzoNCgkJCQkJCWJvbmU9Tm9uZQ0KCQkJCQkJaWYgVGFyZ2V0TmFtZSBpbiBib25lSW5kZWtzTGlzdDoNCgkJCQkJCQluYW1lPWJvbmVJbmRla3NMaXN0W1RhcmdldE5hbWVdDQoJCQkJCQkJaWYgbmFtZSBub3QgaW4gYm9uZUxpc3Qua2V5cygpOg0KCQkJCQkJCQlib25lPUFjdGlvbkJvbmUoKQ0KCQkJCQkJCQlhY3Rpb24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpDQoJCQkJCQkJCWJvbmUubmFtZT1uYW1lDQoJCQkJCQkJCWJvbmVMaXN0W25hbWVdPWJvbmUNCgkJCQkJCQlib25lPWJvbmVMaXN0W25hbWVdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXByaW50ICdza2lwZWQgc2NhbGUgYm9uZTonLFRhcmdldE5hbWUNCgkJCQkJCQ0KCQkJCQkJDQoJCQkJCQlLZXk9eXMuZ2V0KGEsJyJLZXkiJykNCgkJCQkJCWlmIEtleToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KEtleVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQkJCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQluZXcud3JpdGUoYm9uZS5uYW1lKydceDAwJykNCgkJCQkJCQkJCQluZXcud3JpdGUoJ3NpemUnKydceDAwJykNCgkJCQkJCQkJCQluZXcuaShbaW50KFNpemUpXSkNCgkJCQkJCQkJCWZvciBtIGluIHJhbmdlKGludChTaXplKSk6DQoJCQkJCQkJCQkJdmFsdWU9Zy5mKEl0ZW1TaXplKQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csdmFsdWUsbis4KQ0KCQkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJCW5ldy5mKHZhbHVlKQ0KCQkJCQkJCQkJCQlib25lTWF0cml4PXNrZWxldG9uLm9iamVjdC5nZXREYXRhKCkuYm9uZXNbYm9uZS5uYW1lXS5tYXRyaXhbJ0FSTUFUVVJFU1BBQ0UnXQ0KCQkJCQkJCQkJCQltYXRyaXg9VmVjdG9yTWF0cml4KHZhbHVlKSMqYm9uZU1hdHJpeA0KCQkJCQkJCQkJCQlib25lLnNpemVLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJCQllbHNlOnByaW50ICd1bmtub3cgYXJyYXkgdHlwZScNCgkJCQkJCWVsc2U6cHJpbnQgJ25vIGtleScJCQkJDQoJCQkJCQkNCgkJCQkJCVRpbWU9eXMuZ2V0KGEsJyJUaW1lIicpDQoJCQkJCQlpZiBUaW1lOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVGltZVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KFRpbWVbMF0sJyJGbG9hdDMyQXJyYXkiJykNCgkJCQkJCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJykNCgkJCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicpDQoJCQkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZTpuZXcuaShbaW50KFNpemUpXSkNCgkJCQkJCQkJCWZvciBtIGluIHJhbmdlKGludChTaXplKSk6DQoJCQkJCQkJCQkJdmFsdWU9Zy5mKEl0ZW1TaXplKQ0KCQkJCQkJCQkJCWlmIEl0ZW1TaXplPT0xOnZhbHVlPXZhbHVlWzBdDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyxbdmFsdWVdLG4rOCkNCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcuZihbdmFsdWVdKQ0KCQkJCQkJCQkJCQlib25lLnNpemVGcmFtZUxpc3QuYXBwZW5kKGludCh2YWx1ZSozMykpDQoJCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJCQllbHNlOnByaW50ICd1bmtub3cgYXJyYXkgdHlwZScNCgkJCQkJCWVsc2U6cHJpbnQgJ25vIHRpbWUnCQkNCgkJCQkJCQkJCQ0KCQkJVmVjM0xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZD15cy5nZXQoYSwnIm9zZ0FuaW1hdGlvbi5WZWMzTGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkIicpDQoJCQlpZiBWZWMzTGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkOg0KCQkJDQoJCQkJYXRyaWJ1dGVzPXt9DQoJCQkJVXNlckRhdGFDb250YWluZXI9eXMuZ2V0KFZlYzNMZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWRbMF0sJyJVc2VyRGF0YUNvbnRhaW5lciInKQ0KCQkJCWlmIFVzZXJEYXRhQ29udGFpbmVyOg0KCQkJCQlWYWx1ZXM9eXMuZ2V0KFVzZXJEYXRhQ29udGFpbmVyWzBdLCciVmFsdWVzIicpDQoJCQkJCWlmIFZhbHVlczoNCgkJCQkJCWZvciBjaGlsZCBpbiBWYWx1ZXNbMF0uY2hpbGRyZW46DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5kYXRhLCc6JykNCgkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJykNCgkJCQkJCQlWYWx1ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJWYWx1ZSInLCciZiInKQ0KCQkJCQkJCSN3cml0ZShsb2csW05hbWUsVmFsdWVdLG4rNCkNCgkJCQkJCQlhdHJpYnV0ZXNbTmFtZV09VmFsdWUNCgkJCQkNCgkJCQlLZXlGcmFtZXM9eXMuZ2V0KGEsJyJLZXlGcmFtZXMiJykNCgkJCQlpZiBLZXlGcmFtZXM6DQoJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5RnJhbWVzWzBdLmhlYWRlciwnOicpDQoJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInKQ0KCQkJCQlUYXJnZXROYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIlRhcmdldE5hbWUiJywnIiInKQ0KCQkJCQkjd3JpdGUobG9nLFsnVmVjM0xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZDonLE5hbWUsJ1RhcmdldE5hbWU6JyxUYXJnZXROYW1lXSxuKzQpDQoJCQkJCW5hbWU9Z2V0U3BsaXROYW1lKFRhcmdldE5hbWUsJ18nLC0xKQ0KCQkJCQlpZiBOYW1lPT0nInRyYW5zbGF0ZSInOg0KCQkJCQkJYm9uZT1Ob25lDQoJCQkJCQlpZiBUYXJnZXROYW1lIGluIGJvbmVJbmRla3NMaXN0Og0KCQkJCQkJCSNuZXcud3JpdGUoVGFyZ2V0TmFtZSsnXHgwMCcpDQoJCQkJCQkJI25ldy53cml0ZSgndHJhbnNsYXRlJysnXHgwMCcpDQoJCQkJCQkJbmFtZT1ib25lSW5kZWtzTGlzdFtUYXJnZXROYW1lXQ0KCQkJCQkJCWlmIG5hbWUgbm90IGluIGJvbmVMaXN0LmtleXMoKToNCgkJCQkJCQkJYm9uZT1BY3Rpb25Cb25lKCkNCgkJCQkJCQkJYWN0aW9uLmJvbmVMaXN0LmFwcGVuZChib25lKQ0KCQkJCQkJCQlib25lLm5hbWU9bmFtZQ0KCQkJCQkJCQlib25lTGlzdFtuYW1lXT1ib25lDQoJCQkJCQkJYm9uZT1ib25lTGlzdFtuYW1lXQ0KCQkJCQkJZWxzZToNCgkJCQkJCQlwcmludCAnc2tpcGVkIHRyYW5zbGF0ZSBib25lOicsVGFyZ2V0TmFtZQ0KCQkJCQkJDQoJCQkJCQlLZXk9eXMuZ2V0KGEsJyJLZXkiJykNCgkJCQkJCWlmIEtleToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT1pbnQoeXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJykpCQkJCQkJDQoJCQkJCQkJVWludDE2QXJyYXk9eXMuZ2V0KEtleVswXSwnIlVpbnQxNkFycmF5IicpDQoJCQkJCQkJdHlwZT0iVWludDE2QXJyYXkiDQoJCQkJCQkJaWYgVWludDE2QXJyYXk6DQoJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVWludDE2QXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPWludCh5cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicpKQ0KCQkJCQkJCQlPZmZzZXQ9aW50KHlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKSkNCgkJCQkJCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnRW5jb2Rpbmc6JyxFbmNvZGluZywnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlIGFuZCBvcy5wYXRoLmV4aXN0cyhwYXRoLnNwbGl0KCcuZ3onKVswXSk9PUZhbHNlOg0KCQkJCQkJCQkJY21kPUNtZCgpDQoJCQkJCQkJCQljbWQuaW5wdXQ9cGF0aA0KCQkJCQkJCQkJY21kLlpJUD1UcnVlDQoJCQkJCQkJCQljbWQucnVuKCkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0uc3BsaXQoJy5neicpWzBdDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZToNCgkJCQkJCQkJCXBhdGgrPScnDQoJCQkJCQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk6DQoJCQkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJbGlzdD1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCQkJCQkJbGlzdDE9ZXRhcDEobGlzdCxJdGVtU2l6ZSkNCgkJCQkJCQkJCW91dD1ldGFwMihsaXN0MSxJdGVtU2l6ZSxhdHJpYnV0ZXMpDQoJCQkJCQkJCQlsaXN0Mj1bYXRyaWJ1dGVzWycib3giJ10sYXRyaWJ1dGVzWycib3kiJ10sYXRyaWJ1dGVzWycib3oiJ11dDQoJCQkJCQkJCQlsaXN0Mi5leHRlbmQob3V0KQ0KCQkJCQkJCQkJbGlzdDM9ZXRhcDMobGlzdDIsSXRlbVNpemUpCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQluZXcud3JpdGUoYm9uZS5uYW1lKydceDAwJykNCgkJCQkJCQkJCQluZXcud3JpdGUoJ3RyYW5zbGF0ZScrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy5pKFtTaXplXSkNCgkJCQkJCQkJCWZvciBtIGluIHJhbmdlKFNpemUpOg0KCQkJCQkJCQkJCXZhbHVlPWxpc3QzW20qMzptKjMrM10NCgkJCQkJCQkJCQkjd3JpdGUobG9nLHZhbHVlLG4rOCkNCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcuZih2YWx1ZSkNCgkJCQkJCQkJCQkJaWYgYm9uZS5uYW1lIGluIHNrZWxldG9uLm9iamVjdC5nZXREYXRhKCkuYm9uZXMua2V5cygpOg0KCQkJCQkJCQkJCQkJYm9uZU1hdHJpeD1za2VsZXRvbi5vYmplY3QuZ2V0RGF0YSgpLmJvbmVzW2JvbmUubmFtZV0ubWF0cml4WydBUk1BVFVSRVNQQUNFJ10NCgkJCQkJCQkJCQkJCSNib25lTWF0cml4Kj1WZWN0b3JNYXRyaXgodmFsdWUpDQoJCQkJCQkJCQkJCQltYXRyaXg9VmVjdG9yTWF0cml4KHZhbHVlKSMqYm9uZU1hdHJpeA0KCQkJCQkJCQkJCQkJYm9uZS5wb3NLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQkJCQkJCQkJCQkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJCWVsc2U6cHJpbnQgJ3Vua25vdyBhcnJheSB0eXBlJw0KCQkJCQkJZWxzZTpwcmludCAnbm8ga2V5JwkNCgkJCQkJCQ0KCQkJCQkJVGltZT15cy5nZXQoYSwnIlRpbWUiJykNCgkJCQkJCWlmIFRpbWU6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhUaW1lWzBdLmRhdGEsJzonKQ0KCQkJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQkJCQkJCQ0KCQkJCQkJCUZsb2F0MzJBcnJheT15cy5nZXQoVGltZVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkJDQoJCQkJCQkJCQ0KCQkJCQkJCQkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQ0KCQkJCQkJCQkJbGlzdD1nLmYoU2l6ZSpJdGVtU2l6ZSkNCgkJCQkJCQkJCWxpc3QxPWV0YXAxKGxpc3QsSXRlbVNpemUpDQoJCQkJCQkJCQkjb3V0PWV0YXAyKGxpc3QxLEl0ZW1TaXplLGF0cmlidXRlcykNCgkJCQkJCQkJCWxpc3QyPVthdHJpYnV0ZXNbJyJvdCInXV0NCgkJCQkJCQkJCWxpc3QyLmV4dGVuZChsaXN0MSkNCgkJCQkJCQkJCWxpc3QzPWV0YXAzKGxpc3QyLEl0ZW1TaXplKQ0KCQkJCQkJCQkJI3dyaXRlKGxvZyxsaXN0MywwKQkJCQkJCQkNCgkJCQkJCQkJCWlmIGJvbmU6bmV3LmkoW1NpemVdKQ0KCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQkJCQkJdmFsdWU9bGlzdDNbbV0NCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcuZihbdmFsdWVdKQ0KCQkJCQkJCQkJCQlib25lLnBvc0ZyYW1lTGlzdC5hcHBlbmQoaW50KHZhbHVlKjMzKSkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJCWVsc2U6cHJpbnQgJ3Vua25vdyBhcnJheSB0eXBlJwkNCgkJCQkJCWVsc2U6cHJpbnQgJ25vIHRpbWUnCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCQ0KCQkJUXVhdFNsZXJwQ2hhbm5lbD15cy5nZXQoYSwnIm9zZ0FuaW1hdGlvbi5RdWF0U2xlcnBDaGFubmVsIicpDQoJCQlpZiBRdWF0U2xlcnBDaGFubmVsOg0KCQkJCUtleUZyYW1lcz15cy5nZXQoYSwnIktleUZyYW1lcyInKQ0KCQkJCWlmIEtleUZyYW1lczoNCgkJCQkJdmFsdWVzPXlzLnZhbHVlcyhLZXlGcmFtZXNbMF0uaGVhZGVyLCc6JykNCgkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCQkJCVRhcmdldE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVGFyZ2V0TmFtZSInLCciIicpDQoJCQkJCSN3cml0ZShsb2csWydRdWF0U2xlcnBDaGFubmVsOicsTmFtZSwnVGFyZ2V0TmFtZTonLFRhcmdldE5hbWVdLG4rNCkNCgkJCQkJbmFtZT1nZXRTcGxpdE5hbWUoVGFyZ2V0TmFtZSwnXycsLTEpDQoJCQkJCWJvbmU9Tm9uZQ0KCQkJCQlpZiBUYXJnZXROYW1lIGluIGJvbmVJbmRla3NMaXN0Og0KCQkJCQkJbmFtZT1ib25lSW5kZWtzTGlzdFtUYXJnZXROYW1lXQ0KCQkJCQkJaWYgbmFtZSBub3QgaW4gYm9uZUxpc3Qua2V5cygpOg0KCQkJCQkJCWJvbmU9QWN0aW9uQm9uZSgpDQoJCQkJCQkJYWN0aW9uLmJvbmVMaXN0LmFwcGVuZChib25lKQ0KCQkJCQkJCWJvbmUubmFtZT1uYW1lDQoJCQkJCQkJYm9uZUxpc3RbbmFtZV09Ym9uZQ0KCQkJCQkJYm9uZT1ib25lTGlzdFtuYW1lXQ0KCQkJCQllbHNlOg0KCQkJCQkJcHJpbnQgJ3NraXBlZCBxdWF0ZXJuaW9uIGJvbmU6JyxUYXJnZXROYW1lDQoJCQkJCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCUtleT15cy5nZXQoYSwnIktleSInKQ0KCQkJCQlpZiBLZXk6DQoJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleVswXS5kYXRhLCc6JykNCgkJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicpCQkJCQkJDQoJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KEtleVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJaWYgRmxvYXQzMkFycmF5Og0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInKQ0KCQkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJykNCgkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJDQoJCQkJCQkJCQ0KCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQljbWQuaW5wdXQ9cGF0aA0KCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0uc3BsaXQoJy5neicpWzBdDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQkJCQkJCQkNCgkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCW5ldy53cml0ZShib25lLm5hbWUrJ1x4MDAnKQ0KCQkJCQkJCQkJbmV3LndyaXRlKCdxdWF0ZXJuaW9uJysnXHgwMCcpDQoJCQkJCQkJCQluZXcuaShbaW50KFNpemUpXSkNCgkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoaW50KFNpemUpKToNCgkJCQkJCQkJCXZhbHVlPWcuZig0KQ0KCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQluZXcuZih2YWx1ZSkNCgkJCQkJCQkJCXZhbHVlPVF1YXRlcm5pb24odmFsdWUpDQoJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCSNuZXcuZih2YWx1ZSkNCgkJCQkJCQkJCQlib25lTWF0cml4PXNrZWxldG9uLm9iamVjdC5nZXREYXRhKCkuYm9uZXNbYm9uZS5uYW1lXS5tYXRyaXhbJ0FSTUFUVVJFU1BBQ0UnXQ0KCQkJCQkJCQkJCSNib25lLnJvdEtleUxpc3QuYXBwZW5kKGJvbmVNYXRyaXgqUXVhdE1hdHJpeCh2YWx1ZSkucmVzaXplNHg0KCkpDQoJCQkJCQkJCQkJbWF0cml4PVF1YXRNYXRyaXgodmFsdWUpLnJlc2l6ZTR4NCgpIypib25lTWF0cml4DQoJCQkJCQkJCQkJYm9uZS5yb3RLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkNCgkJCQkJVGltZT15cy5nZXQoYSwnIlRpbWUiJykNCgkJCQkJaWYgVGltZToNCgkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVGltZVswXS5kYXRhLCc6JykNCgkJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQkJCQkJCQ0KCQkJCQkJRmxvYXQzMkFycmF5PXlzLmdldChUaW1lWzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicpDQoJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJY21kPUNtZCgpDQoJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQljbWQucnVuKCkNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCXBhdGgrPScnDQoJCQkJCQkJCQ0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQ0KCQkJCQkJCQlpZiBib25lOm5ldy5pKFtpbnQoU2l6ZSldKQ0KCQkJCQkJCQlmb3IgbSBpbiByYW5nZShpbnQoU2l6ZSkpOg0KCQkJCQkJCQkJdmFsdWU9Zy5mKEl0ZW1TaXplKQ0KCQkJCQkJCQkJaWYgSXRlbVNpemU9PTE6dmFsdWU9dmFsdWVbMF0NCgkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJbmV3LmYoW3ZhbHVlXSkNCgkJCQkJCQkJCQlib25lLnJvdEZyYW1lTGlzdC5hcHBlbmQoaW50KHZhbHVlKjMzKSkNCgkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQ0KCQkJCQkJCQkJDQoJCQlRdWF0U2xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZD15cy5nZXQoYSwnIm9zZ0FuaW1hdGlvbi5RdWF0U2xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZCInKQ0KCQkJaWYgUXVhdFNsZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWQ6DQoJCQkJVGFyZ2V0TmFtZT1Ob25lDQoJCQkJdHJ5Og0KCQkJDQoJCQkJCWF0cmlidXRlcz17fQ0KCQkJCQlVc2VyRGF0YUNvbnRhaW5lcj15cy5nZXQoUXVhdFNsZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWRbMF0sJyJVc2VyRGF0YUNvbnRhaW5lciInKQ0KCQkJCQlpZiBVc2VyRGF0YUNvbnRhaW5lcjoNCgkJCQkJCVZhbHVlcz15cy5nZXQoVXNlckRhdGFDb250YWluZXJbMF0sJyJWYWx1ZXMiJykNCgkJCQkJCWlmIFZhbHVlczoNCgkJCQkJCQlmb3IgY2hpbGQgaW4gVmFsdWVzWzBdLmNoaWxkcmVuOg0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLmRhdGEsJzonKQ0KCQkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJykNCgkJCQkJCQkJVmFsdWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVmFsdWUiJywnImYiJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbTmFtZSxWYWx1ZV0sbis0KQ0KCQkJCQkJCQlhdHJpYnV0ZXNbTmFtZV09VmFsdWUNCgkJCQkNCgkJCQkJS2V5RnJhbWVzPXlzLmdldChhLCciS2V5RnJhbWVzIicpDQoJCQkJCWlmIEtleUZyYW1lczoJCQkJDQoJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleUZyYW1lc1swXS5oZWFkZXIsJzonKQ0KCQkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCQkJCQlUYXJnZXROYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIlRhcmdldE5hbWUiJywnIiInKQ0KCQkJCQkJI3dyaXRlKGxvZyxbJ1F1YXRTbGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkOicsTmFtZSwnVGFyZ2V0TmFtZTonLFRhcmdldE5hbWVdLG4rNCkNCgkJCQkJCW5hbWU9Z2V0U3BsaXROYW1lKFRhcmdldE5hbWUsJ18nLC0xKQ0KCQkJCQkJI3ByaW50IFRhcmdldE5hbWUNCgkJCQkJCWJvbmU9Tm9uZQ0KCQkJCQkJI3ByaW50IFRhcmdldE5hbWUNCgkJCQkJCSNwcmludCBhdHJpYnV0ZXMNCgkJCQkJCWlmIFRhcmdldE5hbWUgaW4gYm9uZUluZGVrc0xpc3Q6DQoJCQkJCQkJbmFtZT1ib25lSW5kZWtzTGlzdFtUYXJnZXROYW1lXQ0KCQkJCQkJCWlmIG5hbWUgbm90IGluIGJvbmVMaXN0LmtleXMoKToNCgkJCQkJCQkJYm9uZT1BY3Rpb25Cb25lKCkNCgkJCQkJCQkJYWN0aW9uLmJvbmVMaXN0LmFwcGVuZChib25lKQ0KCQkJCQkJCQlib25lLm5hbWU9bmFtZQ0KCQkJCQkJCQlib25lTGlzdFtuYW1lXT1ib25lDQoJCQkJCQkJYm9uZT1ib25lTGlzdFtuYW1lXQ0KCQkJCQkJZWxzZToNCgkJCQkJCQlwcmludCAnc2tpcGVkIHF1YXRlcm5pb24gYm9uZTonLFRhcmdldE5hbWUNCgkJCQkJCQkNCgkJCQkJCUtleT15cy5nZXQoYSwnIktleSInKQ0KCQkJCQkJaWYgS2V5Og0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCUl0ZW1TaXplPWludCh5cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInKSkJCQkJCQkNCgkJCQkJCQlVaW50MTZBcnJheT15cy5nZXQoS2V5WzBdLCciVWludDE2QXJyYXkiJykNCgkJCQkJCQl0eXBlPSJVaW50MTZBcnJheSINCgkJCQkJCQlpZiBVaW50MTZBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MTZBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9aW50KHlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykpDQoJCQkJCQkJCU9mZnNldD1pbnQoeXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicpKQ0KCQkJCQkJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdFbmNvZGluZzonLEVuY29kaW5nLCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlIGFuZCBvcy5wYXRoLmV4aXN0cyhwYXRoLnNwbGl0KCcuZ3onKVswXSk9PUZhbHNlOg0KCQkJCQkJCQkJY21kPUNtZCgpDQoJCQkJCQkJCQljbWQuaW5wdXQ9cGF0aA0KCQkJCQkJCQkJY21kLlpJUD1UcnVlDQoJCQkJCQkJCQljbWQucnVuKCkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0uc3BsaXQoJy5neicpWzBdDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZToNCgkJCQkJCQkJCXBhdGgrPScnDQoJCQkJCQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk6DQoJCQkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJbGlzdD1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCQkJCQkJI3dyaXRlKGxvZyxsaXN0LDApDQoJCQkJCQkJCQlsaXN0MT1ldGFwMShsaXN0LEl0ZW1TaXplKQ0KCQkJCQkJCQkJI3dyaXRlKGxvZyxsaXN0MSwwKQ0KCQkJCQkJCQkJaWYgJyJveCInIGluIGF0cmlidXRlczoNCgkJCQkJCQkJCQlsaXN0Mj1pbnQzZmxvYXQ0KGxpc3QxLGF0cmlidXRlcyxJdGVtU2l6ZSkJCQkJCQkJCQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csbGlzdDIsMCkNCgkJCQkJCQkJCQlsaXN0Mz1bYXRyaWJ1dGVzWycib3giJ10sYXRyaWJ1dGVzWycib3kiJ10sYXRyaWJ1dGVzWycib3oiJ10sYXRyaWJ1dGVzWycib3ciJ11dDQoJCQkJCQkJCQkJbGlzdDMuZXh0ZW5kKGxpc3QyKQ0KCQkJCQkJCQkJCWxpc3Q0PWV0YXA0KGxpc3QzKQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csbGlzdDQsMCkNCgkJCQkJCQkJCQkJCQkJCQkJDQoJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJbmV3LndyaXRlKGJvbmUubmFtZSsnXHgwMCcpDQoJCQkJCQkJCQkJCW5ldy53cml0ZSgncXVhdGVybmlvbicrJ1x4MDAnKQ0KCQkJCQkJCQkJCQluZXcuaShbU2l6ZV0pDQoJCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQkJCQkJCXZhbHVlPWxpc3Q0W20qNDptKjQrNF0NCgkJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJCW5ldy5mKHZhbHVlKQkJCQkJCQkJCQ0KCQkJCQkJCQkJCQl2YWx1ZT1RdWF0ZXJuaW9uKHZhbHVlKQ0KCQkJCQkJCQkJCQkjd3JpdGUobG9nLHZhbHVlLG4rOCkNCgkJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJCSNuZXcuZih2YWx1ZSkNCgkJCQkJCQkJCQkJCWJvbmVNYXRyaXg9c2tlbGV0b24ub2JqZWN0LmdldERhdGEoKS5ib25lc1tib25lLm5hbWVdLm1hdHJpeFsnQVJNQVRVUkVTUEFDRSddDQoJCQkJCQkJCQkJCQkjI2JvbmUucm90S2V5TGlzdC5hcHBlbmQoKGJvbmVNYXRyaXgucm90YXRpb25QYXJ0KCkqUXVhdE1hdHJpeCh2YWx1ZSkpLnJlc2l6ZTR4NCgpKQ0KCQkJCQkJCQkJCQkJbWF0cml4PVF1YXRNYXRyaXgodmFsdWUpLnJlc2l6ZTR4NCgpIypib25lTWF0cml4DQoJCQkJCQkJCQkJCQlib25lLnJvdEtleUxpc3QuYXBwZW5kKG1hdHJpeCkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJDQoJCQkJCQlUaW1lPXlzLmdldChhLCciVGltZSInKQ0KCQkJCQkJaWYgVGltZToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFRpbWVbMF0uZGF0YSwnOicpDQoJCQkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpCQkJCQkJDQoJCQkJCQkJRmxvYXQzMkFycmF5PXlzLmdldChUaW1lWzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQkJaWYgRmxvYXQzMkFycmF5Og0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJCQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJZy5zZWVrKGludChPZmZzZXQpKQ0KCQkJCQkJCQkJbGlzdD1nLmYoU2l6ZSpJdGVtU2l6ZSkNCgkJCQkJCQkJCWxpc3QxPWV0YXAxKGxpc3QsSXRlbVNpemUpDQoJCQkJCQkJCQkjb3V0PWV0YXAyKGxpc3QxLEl0ZW1TaXplLGF0cmlidXRlcykNCgkJCQkJCQkJCWlmICcib3QiJyBpbiBhdHJpYnV0ZXM6DQoJCQkJCQkJCQkJbGlzdDI9W2F0cmlidXRlc1snIm90IiddXQ0KCQkJCQkJCQkJCWxpc3QyLmV4dGVuZChsaXN0MSkNCgkJCQkJCQkJCQlsaXN0Mz1ldGFwMyhsaXN0MixJdGVtU2l6ZSkNCgkJCQkJCQkJCQkjd3JpdGUobG9nLGxpc3QzLDApCQkNCgkJCQkJCQkJCQlpZiBib25lOm5ldy5pKFtTaXplXSkNCgkJCQkJCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCQkJCQkJdmFsdWU9bGlzdDJbbV0NCgkJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJCW5ldy5mKFt2YWx1ZV0pDQoJCQkJCQkJCQkJCQlib25lLnJvdEZyYW1lTGlzdC5hcHBlbmQoaW50KHZhbHVlKjMzKSkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCWV4Y2VwdDoNCgkJCQkJcHJpbnQgJ25pZXBvd29kemVuaWU6UXVhdFNsZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWQ6JyxUYXJnZXROYW1lDQoJCQkJCQ0KCQkJI2lmIGJvbmU6CQ0KCQkJIwlwcmludCBuYW1lLGJvbmUubmFtZQ0KCQluZXcuY2xvc2UoKQkJDQoJI2FjdGlvbi5kcmF3KCkNCgkjYWN0aW9uLnNldENvbnRleHQoKQkNCgkJDQoNCmRlZiBkZWNvZGVWYXJpbnQoZyxvZmZzZXQsc2l6ZSx0eXBlKToNCglnLnNlZWsob2Zmc2V0KQ0KCW49WzBdKnNpemUNCglhPTANCglzPTAJDQoJd2hpbGUoYSE9c2l6ZSk6DQoJCXNoaWZ0ID0gMA0KCQlyZXN1bHQgPSAwDQoJCXdoaWxlIFRydWU6DQoJCQlieXRlID0gZy5CKDEpWzBdDQoJCQlyZXN1bHQgfD0gKGJ5dGUgJiAxMjcpIDw8IHNoaWZ0DQoJCQlzaGlmdCArPSA3DQoJCQlpZiBub3QgKGJ5dGUgJiAweDgwKTpicmVhawkJCQ0KCQluW2FdPXJlc3VsdAkJDQoJCWErPTENCglpZiB0eXBlWzBdIT0nVSc6DQoJCWw9MA0KCQl3aGlsZShsPHNpemUpOg0KCQkJaD1uW2xdDQoJCQluW2xdPWg+PjFeLSgxJmgpDQoJCQlsKz0xDQoJcmV0dXJuIG4NCgkJDQoJDQoJCQ0KZGVmIGRlY29kZURlbHRhKHQsZSk6DQoJaT1lfDANCgluPWxlbih0KQ0KCWlmIGk+PWxlbih0KTpyPU5vbmUNCgllbHNlOnI9dFtpXQ0KCWE9aSsxDQoJd2hpbGUoYTxuKToNCgkJcz10W2FdDQoJCXI9dFthXT1yKyhzPj4xXi0oMSZzKSkNCgkJYSs9MQ0KCXJldHVybiB0CQ0KDQoNCmRlZiBkZWNvZGVJbXBsaWNpdChpbnB1dCxuKToNCglJTVBMSUNJVF9IRUFERVJfTEVOR1RIPTMNCglJTVBMSUNJVF9IRUFERVJfTUFTS19MRU5HVEg9MQ0KCUlNUExJQ0lUX0hFQURFUl9QUklNSVRJVkVfTEVOR1RIPTANCglJTVBMSUNJVF9IRUFERVJfRVhQRUNURURfSU5ERVg9Mg0KCWhpZ2hXYXRlcm1hcms9Mg0KCQ0KCXQ9aW5wdXQNCgllPVswXSp0W0lNUExJQ0lUX0hFQURFUl9QUklNSVRJVkVfTEVOR1RIXQ0KCWE9dFtJTVBMSUNJVF9IRUFERVJfRVhQRUNURURfSU5ERVhdDQoJcz10W0lNUExJQ0lUX0hFQURFUl9NQVNLX0xFTkdUSF0NCglvPXRbSU1QTElDSVRfSEVBREVSX0xFTkdUSDpzK0lNUExJQ0lUX0hFQURFUl9MRU5HVEhdDQoJcj1oaWdoV2F0ZXJtYXJrDQoJdT0zMipzLWxlbihlKQ0KCWw9MTw8MzENCgloPTAJDQoJd2hpbGUoaDxzKToNCgkJYz1vW2hdDQoJCWQ9MzINCgkJcD1oKmQNCgkJaWYgaD09cy0xOmY9dQ0KCQllbHNlOmY9MA0KCQlnMT1mDQoJCXdoaWxlKGcxPGQpOg0KCQkJaWYgYyZsPj5nMToNCgkJCQllW3BdPXRbbl0NCgkJCQluKz0xCQ0KCQkJZWxzZToNCgkJCQlpZiByOg0KCQkJCQllW3BdPWENCgkJCQllbHNlOg0KCQkJCQllW3BdPWENCgkJCQkJYSs9MQkJCQ0KCQkJZzErPTENCgkJCXArPTENCgkJaCs9MQ0KCXJldHVybiBlCQkNCgkNCgkNCmRlZiBkZWNvZGVXYXRlcm1hcmsodCxlLGkpOg0KCW49aVswXQ0KCXI9bGVuKHQpDQoJYT0wDQoJd2hpbGUoYTxyKToNCgkJcz1uLXRbYV0NCgkJZVthXT1zDQoJCWlmIG48PXM6bj1zKzENCgkJYSs9MQ0KCXJldHVybiBlLG4NCg0KDQpkZWYgZGVjb2RlUXVhbnRpemUoaW5wdXQscyxhLGl0ZW1zaXplKToNCgl4PVswXSpsZW4oaW5wdXQpDQoJaWQ9MA0KCWZvciByIGluIHJhbmdlKGxlbihpbnB1dCkvaXRlbXNpemUpOg0KCQlmb3IgbCBpbiByYW5nZShpdGVtc2l6ZSk6DQoJCQl4W2lkXT1zW2xdK2lucHV0W2lkXSphW2xdDQoJCQlpZCs9MQ0KCXJldHVybiB4CQkNCgkJDQoNCmRlZiBkZWNvZGVQcmVkaWN0KGluZGljZXMsaW5wdXQsaXRlbXNpemUpOgkNCgl0PWlucHV0CQ0KCWlmIGxlbihpbmRpY2VzKT4wOg0KCQl0PWlucHV0CQ0KCQllPWl0ZW1zaXplDQoJCWk9aW5kaWNlcwkNCgkJbj1sZW4odCkvZQ0KCQlyPVswXSpuDQoJCWE9bGVuKGkpLTENCgkJcltpWzBdXT0xDQoJCXJbaVsxXV09MQ0KCQlyW2lbMl1dPTEJDQoJCXM9Mg0KCQl3aGlsZShzPGEpOg0KCQkJbz1zLTINCgkJCXU9aVtvXQ0KCQkJbD1pW28rMV0NCgkJCWg9aVtvKzJdDQoJCQljPWlbbyszXQ0KCQkJaWYgMSE9cltjXToNCgkJCQlyW2NdPTENCgkJCQl1Kj1lDQoJCQkJbCo9ZQ0KCQkJCWgqPWUNCgkJCQljKj1lCQkJDQoJCQkJZD0wDQoJCQkJd2hpbGUoZDxlKToNCgkJCQkJdFtjK2RdPXRbYytkXSt0W2wrZF0rdFtoK2RdLXRbdStkXQ0KCQkJCQlkKz0xDQoJCQlzKz0xDQoJcmV0dXJuIHQNCg0KDQoNCmNsYXNzIE5vZGU6DQoJZGVmIF9faW5pdF9fKHNlbGYpOg0KCQlzZWxmLm5hbWU9Tm9uZQ0KCQlzZWxmLmNoaWxkcmVuPVtdDQoJCXNlbGYub3NnQ2hpbGRyZW49W10NCgkJc2VsZi5vZmZzZXQ9Tm9uZQ0KCQlzZWxmLnN0YXJ0PU5vbmUNCgkJc2VsZi5lbmQ9Tm9uZQ0KCQlzZWxmLmhlYWRlcj0nJw0KCQlzZWxmLmRhdGE9JycNCgkJc2VsZi5wYXJlbnQ9Tm9uZQ0KCQ0KY2xhc3MgWXNvbjoNCglkZWYgX19pbml0X18oc2VsZik6DQoJCXNlbGYuaW5wdXQ9Tm9uZQ0KCQlzZWxmLmZpbGVuYW1lPU5vbmUNCgkJc2VsZi5yb290PU5vZGUoKQ0KCQlzZWxmLmxvZz1GYWxzZQ0KCWRlZiBwYXJzZShzZWxmKToNCgkJZ2xvYmFsIG9mZnNldCxzdHJpbmcsdHh0DQoJCWlmIHNlbGYuZmlsZW5hbWUgaXMgbm90IE5vbmU6DQoJCQlmaWxlPW9wZW4oc2VsZi5maWxlbmFtZSwncmInKQ0KCQkJc2VsZi5pbnB1dD1maWxlLnJlYWQoKS5yZXBsYWNlKCdceDIwJywnJykucmVwbGFjZSgnXHgwQScsJycpLnJlcGxhY2UoJyYjMzQ7JywnIicpCQkNCgkJDQoJCQlsaW5lPXNlbGYuaW5wdXQNCgkJCWlmIHNlbGYubG9nPT1UcnVlOnR4dD1vcGVuKHNlbGYuZmlsZW5hbWUrJy55cycsJ3cnKQ0KCQkJDQoJCQlpZiBsaW5lIGlzIG5vdCBOb25lIGFuZCBsZW4obGluZSk+MDoNCgkJCQlvZmZzZXQ9MA0KCQkJCW49MA0KCQkJCXN0cmluZz1bXQ0KCQkJCWlmIHNlbGYuaW5wdXRbb2Zmc2V0XT09J3snOg0KCQkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJCXR4dC53cml0ZSgnXG4nKQ0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydoZWFkZXI6JytzdHIoTm9uZSkpDQoJCQkJCQl0eHQud3JpdGUoJyB7ICcrc3RyKG9mZnNldCkpDQoJCQkJCQl0eHQud3JpdGUoJyAnKihuKzQpKQ0KCQkJCWlmIHNlbGYuaW5wdXRbb2Zmc2V0XT09J1snOg0KCQkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJCXR4dC53cml0ZSgnXG4nKQ0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydoZWFkZXI6JytzdHIoTm9uZSkpDQoJCQkJCQl0eHQud3JpdGUoJyBbICcrc3RyKG9mZnNldCkpDQoJCQkJCQl0eHQud3JpdGUoJyAnKihuKzQpKQ0KCQkJCXNlbGYudHJlZShzZWxmLnJvb3QsbikNCgkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJdHh0LndyaXRlKCcgJypuKQ0KCQkJCQ0KCQkJZmlsZS5jbG9zZSgpCQ0KCQkJDQoJCWlmIHNlbGYubG9nPT1UcnVlOnR4dC5jbG9zZSgpDQoNCglkZWYgZ2V0VHJlZTEoc2VsZixwYXJlbnQsbGlzdCxrZXkpOg0KCQlmb3IgY2hpbGQgaW4gcGFyZW50LmNoaWxkcmVuOg0KCQkJaWYga2V5IGluIGNoaWxkLmhlYWRlcjoNCgkJCQlsaXN0LmFwcGVuZChjaGlsZCkNCgkJCXNlbGYuZ2V0VHJlZShjaGlsZCxsaXN0LGtleSkNCgkJCQ0KCQkNCglkZWYgZ2V0VHJlZShzZWxmLHBhcmVudCxsaXN0LGtleSk6DQoJCWlmIGtleSBpbiBwYXJlbnQuaGVhZGVyIG9yIGtleSBpbiBwYXJlbnQuZGF0YToNCgkJCWxpc3QuYXBwZW5kKHBhcmVudCkNCgkJZm9yIGNoaWxkIGluIHBhcmVudC5jaGlsZHJlbjoNCgkJCXNlbGYuZ2V0VHJlZShjaGlsZCxsaXN0LGtleSkJDQoNCglkZWYgdmFsdWVzKHNlbGYsZGF0YSx0eXBlKToNCgkJbGlzdD17fQ0KCQlBPWRhdGEuc3BsaXQoJywnKQ0KCQlpZiB0eXBlPT0nOic6DQoJCQlmb3IgYSBpbiBBOg0KCQkJCWlmICc6JyBpbiBhOg0KCQkJCQljPTANCgkJCQkJYWxpc3Q9W10NCgkJCQkJc3RyaW5nPScnDQoJCQkJCWZvciBiIGluIGE6DQoJCQkJCQlpZiBiPT0nIicgYW5kIGM9PTA6DQoJCQkJCQkJaWYgbGVuKHN0cmluZyk+MDphbGlzdC5hcHBlbmQoc3RyaW5nKQ0KCQkJCQkJCXN0cmluZz0nJw0KCQkJCQkJCXN0cmluZys9Yg0KCQkJCQkJCWM9MQ0KCQkJCQkJZWxpZiBiPT0nIicgYW5kIGM9PTE6DQoJCQkJCQkJc3RyaW5nKz1iDQoJCQkJCQkJaWYgbGVuKHN0cmluZyk+MDphbGlzdC5hcHBlbmQoc3RyaW5nKQ0KCQkJCQkJCXN0cmluZz0nJw0KCQkJCQkJCWM9MA0KCQkJCQkJZWxpZiBiPT0nOic6DQoJCQkJCQkJcGFzcw0KCQkJCQkJZWxzZTpzdHJpbmcrPWINCgkJCQkJaWYgbGVuKHN0cmluZyk+MDphbGlzdC5hcHBlbmQoc3RyaW5nKQ0KCQkJCQlpZiBsZW4oYWxpc3QpPT0yOgkNCgkJCQkJCWxpc3RbYWxpc3RbMF1dPWFsaXN0WzFdCQkNCgkJCQkJaWYgbGVuKGFsaXN0KT09MToJDQoJCQkJCQlsaXN0W2FsaXN0WzBdXT0nTm9uZScJCQkJCQkNCgkJCQkJCQkJCQ0KCQkJCQkJDQoJCQkJCQkJDQoJCQkJCSNpZiBhLmNvdW50KCc6Jyk+MToNCgkJaWYgdHlwZT09J2YnOg0KCQkJbGlzdD1tYXAoZmxvYXQsQSkNCgkJaWYgdHlwZT09J2knOg0KCQkJbGlzdD1tYXAoaW50LEEpDQoJCWlmIHR5cGU9PSdzJzoNCgkJCWxpc3Q9QQ0KCQlyZXR1cm4gbGlzdAkNCg0KCWRlZiBnZXRWYWx1ZShzZWxmLHZhbHVlcyxuYW1lLHR5cGU9Tm9uZSk6DQoJCWlmIG5hbWUgaW4gdmFsdWVzOg0KCQkJaWYgdHlwZT09JyJmIic6DQoJCQkJcmV0dXJuIGZsb2F0KHZhbHVlc1tuYW1lXS5zcGxpdCgnIicpWzFdKQ0KCQkJZWxpZiB0eXBlPT0nImkiJzoNCgkJCQlyZXR1cm4gaW50KHZhbHVlc1tuYW1lXS5zcGxpdCgnIicpWzFdKQ0KCQkJZWxpZiB0eXBlPT0naSc6DQoJCQkJI3ByaW50IG5hbWUsdmFsdWVzW25hbWVdDQoJCQkJaWYgdmFsdWVzW25hbWVdIT0nTm9uZSc6DQoJCQkJCXJldHVybiBpbnQodmFsdWVzW25hbWVdLnJlcGxhY2UoJ1wiJywgJycpKQ0KCQkJCWVsc2U6DQoJCQkJCXJldHVybiBOb25lDQoJCQllbGlmIHR5cGU9PSciIic6DQoJCQkJcmV0dXJuIHZhbHVlc1tuYW1lXS5zcGxpdCgnIicpWzFdDQoJCQllbHNlOg0KCQkJCXJldHVybiB2YWx1ZXNbbmFtZV0NCgkJZWxzZToNCgkJCXJldHVybiBOb25lDQoJCQ0KCWRlZiBnZXQoc2VsZixub2RlLGtleSk6CQkNCgkJbGlzdD1bXQ0KCQlzZWxmLmdldFRyZWUobm9kZSxsaXN0LGtleSkNCgkJaWYgbGVuKGxpc3QpPjA6DQoJCQlyZXR1cm4gbGlzdAkNCgkJZWxzZToNCgkJCXJldHVybiBOb25lDQoJCQkNCglkZWYgdHJlZShzZWxmLHBhcmVudE5vZGUsbik6DQoJCWdsb2JhbCBvZmZzZXQsc3RyaW5nDQoJCW4rPTQNCgkJb2Zmc2V0Kz0xDQoJCXdoaWxlKFRydWUpOgkNCgkJCWlmCW9mZnNldD49bGVuKHNlbGYuaW5wdXQpOmJyZWFrDQoJCQl2YWx1ZT1zZWxmLmlucHV0W29mZnNldF0NCgkJCWlmIHZhbHVlPT0nfSc6DQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCXR4dC53cml0ZSgnXG4nKQ0KCQkJCQlpZiBsZW4oc3RyaW5nKT4wOg0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydkYXRhOicrc2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XSkJDQoJCQkJCWVsc2U6CQ0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydkYXRhOk5vbmUnKQkJCQkNCgkJCQkJdHh0LndyaXRlKCdcbicrJyAnKm4rJyB9ICcrc3RyKG9mZnNldCkpDQoJCQkJaWYgbGVuKHN0cmluZyk+MDoJDQoJCQkJCXBhcmVudE5vZGUuZGF0YT1zZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdDQoJCQkJc3RyaW5nPVtdDQoJCQkJb2Zmc2V0Kz0xCQkJDQoJCQkJYnJlYWsNCgkJCQ0KCQkJZWxpZiB2YWx1ZT09J3snOg0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJ1xuJykNCgkJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJCXR4dC53cml0ZSgnICcqbisnaGVhZGVyOicrc2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XSkJDQoJCQkJCWVsc2U6CQ0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydoZWFkZXI6Tm9uZScpCQkJCQ0KCQkJCQl0eHQud3JpdGUoJyB7ICcrc3RyKG9mZnNldCkpDQoJCQkJCXR4dC53cml0ZSgnICcqKG4rNCkpDQoJCQkJI3ByaW50IHJvdW5kKDEwMCpvZmZzZXQvZmxvYXQobGVuKHNlbGYuaW5wdXQpKSwzKSwncHJvY2VudCcNCgkJCQlub2RlPU5vZGUoKQ0KCQkJCW5vZGUucGFyZW50PXBhcmVudE5vZGUNCgkJCQlwYXJlbnROb2RlLmNoaWxkcmVuLmFwcGVuZChub2RlKQ0KCQkJCW5vZGUub2Zmc2V0PW9mZnNldA0KCQkJCWlmIGxlbihzdHJpbmcpPjA6DQoJCQkJCW5vZGUuaGVhZGVyPXNlbGYuaW5wdXRbc3RyaW5nWzBdOm9mZnNldF0NCgkJCQlzdHJpbmc9W10NCgkJCQlzZWxmLnRyZWUobm9kZSxuKQ0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJyAnKm4pDQoJCQkJDQoJCQllbGlmIHZhbHVlPT0nXSc6DQoJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJcGFyZW50Tm9kZS5kYXRhPXNlbGYuaW5wdXRbc3RyaW5nWzBdOm9mZnNldF0NCgkJCQkNCgkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJdHh0LndyaXRlKCdcbicpDQoJCQkJCWlmIGxlbihzdHJpbmcpPjA6DQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2RhdGE6JytzZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdKydcbicpCQ0KCQkJCQllbHNlOgkNCgkJCQkJCXR4dC53cml0ZSgnICcqbisnZGF0YTpOb25lJykJCQkJCQkJDQoJCQkJCXR4dC53cml0ZSgnICcqbisnIF0gJytzdHIob2Zmc2V0KSkNCgkJCQkJDQoJCQkJb2Zmc2V0Kz0xDQoJCQkJc3RyaW5nPVtdDQoJCQkJYnJlYWsNCgkJCQ0KCQkJZWxpZiB2YWx1ZT09J1snOg0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJ1xuJykNCgkJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJCXR4dC53cml0ZSgnICcqbisnaGVhZGVyOicrc2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XSkNCgkJCQkJZWxzZToJDQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2hlYWRlcjpOb25lJykNCgkJCQkJdHh0LndyaXRlKCcgWyAnK3N0cihvZmZzZXQpKQ0KCQkJCQl0eHQud3JpdGUoJyAnKihuKzQpKQ0KCQkJCSNwcmludCByb3VuZCgxMDAqb2Zmc2V0L2Zsb2F0KGxlbihzZWxmLmlucHV0KSksMyksJ3Byb2NlbnQnDQoJCQkJbm9kZT1Ob2RlKCkNCgkJCQlub2RlLnBhcmVudD1wYXJlbnROb2RlDQoJCQkJcGFyZW50Tm9kZS5jaGlsZHJlbi5hcHBlbmQobm9kZSkNCgkJCQlub2RlLm9mZnNldD1vZmZzZXQNCgkJCQlub2RlLm5hbWU9c3RyaW5nDQoJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJbm9kZS5oZWFkZXI9c2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XQ0KCQkJCWVsc2U6DQoJCQkJCW5vZGUuaGVhZGVyPScnDQoJCQkJc3RyaW5nPVtdDQoJCQkJc2VsZi50cmVlKG5vZGUsbikNCgkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJdHh0LndyaXRlKCcgJypuKQ0KCQkJZWxzZToJCQkNCgkJCQkjc3RyaW5nKz12YWx1ZQ0KCQkJCWlmIGxlbihzdHJpbmcpPT0wOg0KCQkJCQlzdHJpbmcuYXBwZW5kKG9mZnNldCkNCgkJCQlvZmZzZXQrPTENCgkJDQpkZWYgZ2V0VW5pcXVlSUQoeXMsZGF0YSk6DQoJVW5pcXVlSUQ9Tm9uZQ0KCXZhbHVlcz15cy52YWx1ZXMoZGF0YSwnOicpDQoJaWYgJyJVbmlxdWVJRCInIGluIHZhbHVlczoNCgkJVW5pcXVlSUQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciVW5pcXVlSUQiJywnaScpDQoJcmV0dXJuIFVuaXF1ZUlECQ0KCQ0KDQpjbGFzcyBOZXdOb2RlOg0KCWRlZiBfX2luaXRfXyhzZWxmKToNCgkJc2VsZi5ub2RlPU5vbmUNCgkJc2VsZi5wYXJlbnQ9Tm9uZQ0KCQlzZWxmLmNoaWxkcmVuPVtdDQoJCXNlbGYuVW5pcXVlSUQ9Tm9uZQ0KCQ0KZGVmIGdldElEVHJlZSh5cyxwYXJlbnROb2RlLG4scGFyZW50TmV3Tm9kZSk6DQoJaWYgbGVuKHBhcmVudE5vZGUuaGVhZGVyKSE9MCBhbmQgcGFyZW50Tm9kZS5oZWFkZXIhPScsJzoNCgkJbis9NA0KCVVuaXF1ZUlEPWdldFVuaXF1ZUlEKHlzLHBhcmVudE5vZGUuZGF0YSkNCglpZiBVbmlxdWVJRDoNCgkJcGFyZW50TmV3Tm9kZS5VbmlxdWVJRD1VbmlxdWVJRA0KCWZvciBjaGlsZCBpbiBwYXJlbnROb2RlLmNoaWxkcmVuOg0KCQlpZiBsZW4oY2hpbGQuaGVhZGVyKSE9MCBhbmQgY2hpbGQuaGVhZGVyIT0nLCc6DQoJCQluZXdOb2RlPU5ld05vZGUoKQ0KCQkJVW5pcXVlSUQ9Z2V0VW5pcXVlSUQoeXMsY2hpbGQuaGVhZGVyKQ0KCQkJaWYgVW5pcXVlSUQ6DQoJCQkJcGFyZW50TmV3Tm9kZS5VbmlxdWVJRD1VbmlxdWVJRA0KCQkJbmV3Tm9kZS5ub2RlPWNoaWxkDQoJCQlwYXJlbnROZXdOb2RlLmNoaWxkcmVuLmFwcGVuZChuZXdOb2RlKQ0KCQkJbmV3Tm9kZUxpc3QuYXBwZW5kKG5ld05vZGUpDQoJCQluZXdOb2RlLnBhcmVudD1wYXJlbnROb2RlDQoJCQlwYXJlbnROZXdOb2RlMT1uZXdOb2RlDQoJCQlnZXRJRFRyZWUoeXMsY2hpbGQsbixwYXJlbnROZXdOb2RlMSkNCgkJZWxzZToJDQoJCQlnZXRJRFRyZWUoeXMsY2hpbGQsbixwYXJlbnROZXdOb2RlKQ0KCQkJDQoJCQkJCQkJCQ0KZGVmIGdldFBhdGgoRmlsZSk6DQoJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCcuZ3onKVswXQ0KCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUrJy50eHQnDQoJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZQ0KCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlOnJldHVybiBwYXRoDQoJZWxzZTpyZXR1cm4gTm9uZQ0KDQpkZWYgcmVhZEZsb2F0cyhicixvZmZzZXQsc2l6ZSxpdGVtU2l6ZSk6DQoJaWYgYnIuaW5wdXRGaWxlLm1vZGU9PSdyYic6DQoJCWJyLnNlZWsob2Zmc2V0KQ0KCQlpID0gMA0KCQludW1iZXJzID0gW10NCgkJd2hpbGUgaSA8IHNpemUgKiBpdGVtU2l6ZToNCgkJCW51bWJlcnMuYXBwZW5kKGZsb2F0KHN0cnVjdC51bnBhY2soJzxmJyxici5pbnB1dEZpbGUucmVhZCg0KSlbMF0pKQ0KCQkJaSArPSAxDQoJCXJldHVybiBudW1iZXJzCQkJDQoNCmRlZiBWZXJ0ZXhOb3JtYWwoeXMsYik6DQoJbj0yMA0KCVNpemU9Tm9uZQ0KCU9mZnNldD1Ob25lDQoJRW5jb2Rpbmc9Tm9uZQ0KCUl0ZW1TaXplPU5vbmUNCgl0eXBlPU5vbmUNCglub3JtYWxBcnJheT1bXQkNCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJaWYgJyJJdGVtU2l6ZSInIGluIHZhbHVlczoNCgkJSXRlbVNpemU9aW50KHZhbHVlc1snIkl0ZW1TaXplIiddKQkJCQkJDQoJCVVpbnQzMkFycmF5PXlzLmdldChiLCciVWludDMyQXJyYXkiJykNCgkJaWYgVWludDMyQXJyYXk6DQoJCQl0eXBlPSdVaW50MzJBcnJheScNCgkJCXZhbHVlcz15cy52YWx1ZXMoVWludDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykNCgkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicpDQoJCQlpZiBFbmNvZGluZz09JyJ2YXJpbnQiJzoJCQkJCQkNCgkJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCQlpZiBwYXRoOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlieXRlcz1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCQlub3JtYWxBcnJheS5hcHBlbmQoW2J5dGVzLEVuY29kaW5nLEl0ZW1TaXplXSkNCgkJCQkJZmlsZS5jbG9zZSgpDQoJCUZsb2F0MzJBcnJheSA9IHlzLmdldChiLCAnIkZsb2F0MzJBcnJheSInKQ0KCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQl0eXBlPSdGbG9hdDMyQXJyYXknDQoJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCWlmIEVuY29kaW5nICE9ICcidmFyaW50Iic6DQoJCQkJcGF0aCA9IGdldFBhdGgoRmlsZSkNCgkJCQlpZiBwYXRoOg0KCQkJCQlnbG9iYWwgbW9kZWxJRA0KCQkJCQlmaWxlID0gb3BlbihwYXRoLCAicmIiKQ0KCQkJCQlnID0gQmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWJ5dGVzID0gcmVhZEZsb2F0cyhnLCBPZmZzZXQsIFNpemUsIEl0ZW1TaXplKQ0KCQkJCQl3aXRoIG9wZW4oIi4ve3RlbXBQYXRofS92ZXJ0ZXhOb3JtYWxEYXRhLyIgKyBzdHIobW9kZWxJRCkgKyAiLmRhdCIsICJhIikgYXMgbW9kZWxEYXRhOg0KCQkJCQkJbW9kZWxJRCArPSAxDQoJCQkJCQlmb3IgbGluZSBpbiBieXRlczoNCgkJCQkJCQltb2RlbERhdGEud3JpdGUoc3RyKGxpbmUpICsgIlxuIikNCgkJCQkJbm9ybWFsQXJyYXkuYXBwZW5kKFtieXRlcywgRW5jb2RpbmcsIEl0ZW1TaXplXSkNCgkJCQkJZmlsZS5jbG9zZSgpDQoJcmV0dXJuIG5vcm1hbEFycmF5DQoNCmRlZiBWZXJ0ZXgoeXMsYik6DQoJbj0yMA0KCVNpemU9Tm9uZQ0KCU9mZnNldD1Ob25lDQoJRW5jb2Rpbmc9Tm9uZQ0KCUl0ZW1TaXplPU5vbmUNCgl0eXBlPU5vbmUNCgl2ZXJ0ZXhBcnJheT1bXQkNCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJaWYgJyJJdGVtU2l6ZSInIGluIHZhbHVlczoNCgkJSXRlbVNpemU9aW50KHZhbHVlc1snIkl0ZW1TaXplIiddKQkJCQkJDQoJCUludDMyQXJyYXk9eXMuZ2V0KGIsJyJJbnQzMkFycmF5IicpDQoJCWlmIEludDMyQXJyYXk6DQoJCQl0eXBlPSdJbnQzMkFycmF5Jw0KCQkJdmFsdWVzPXlzLnZhbHVlcyhJbnQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInKQ0KCQkJI3dyaXRlKGxvZyxbdHlwZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnRW5jb2Rpbmc6JyxFbmNvZGluZ10sbikNCgkJCWlmIEVuY29kaW5nPT0nInZhcmludCInOgkJCQkJCQ0KCQkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJCWlmIHBhdGg6DQoJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWJ5dGVzPWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJCXZlcnRleEFycmF5LmFwcGVuZChbYnl0ZXMsRW5jb2RpbmcsSXRlbVNpemVdKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJDQoJCUZsb2F0MzJBcnJheT15cy5nZXQoYiwnIkZsb2F0MzJBcnJheSInKQ0KCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQl0eXBlPSdGbG9hdDMyQXJyYXknDQoJCQkjcHJpbnQgbW9kZSx0eXBlDQoJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCSN3cml0ZShsb2csW3R5cGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmddLG4pDQoJCQlpZiBFbmNvZGluZyE9JyJ2YXJpbnQiJzoJCQkJCQkNCgkJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCQlpZiBwYXRoOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlnLnNlZWsoT2Zmc2V0KQ0KCQkJCQlieXRlcz1nLmYoU2l6ZSpJdGVtU2l6ZSkNCgkJCQkJbGlzdD1bXQ0KCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCWxpc3QuYXBwZW5kKGJ5dGVzW20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0pDQoJCQkJCXZlcnRleEFycmF5LmFwcGVuZChbbGlzdCxFbmNvZGluZ10pDQoJCQkJCWZpbGUuY2xvc2UoKQ0KCXJldHVybiB2ZXJ0ZXhBcnJheQkJCQkNCgkNCmRlZiBUZXhDb29yZCh5cyxiKToNCgluPTIwDQoJU2l6ZT1Ob25lDQoJT2Zmc2V0PU5vbmUNCglFbmNvZGluZz1Ob25lDQoJSXRlbVNpemU9Tm9uZQ0KCXR5cGU9Tm9uZQkNCglUZXhDb29yZEFycmF5PVtdDQoJdmFsdWVzPXlzLnZhbHVlcyhiLmRhdGEsJzonKQ0KCWlmICciSXRlbVNpemUiJyBpbiB2YWx1ZXM6DQoJCUl0ZW1TaXplPWludCh2YWx1ZXNbJyJJdGVtU2l6ZSInXSkJCQkJCQ0KCQlJbnQzMkFycmF5PXlzLmdldChiLCciSW50MzJBcnJheSInKQ0KCQlpZiBJbnQzMkFycmF5Og0KCQkJdHlwZT0nSW50MzJBcnJheScNCgkJCXZhbHVlcz15cy52YWx1ZXMoSW50MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCWlmIEVuY29kaW5nPT0nInZhcmludCInOgkJCQkJCQ0KCQkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJCWlmIHBhdGg6DQoJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWJ5dGVzPWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJCVRleENvb3JkQXJyYXkuYXBwZW5kKFtieXRlcyxFbmNvZGluZyxJdGVtU2l6ZV0pDQoJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkNCgkJRmxvYXQzMkFycmF5PXlzLmdldChiLCciRmxvYXQzMkFycmF5IicpDQoJCWlmIEZsb2F0MzJBcnJheToNCgkJCXR5cGU9J0Zsb2F0MzJBcnJheScNCgkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInKQ0KCQkJaWYgRW5jb2RpbmchPScidmFyaW50Iic6CQkJCQkJDQoJCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQkJaWYgcGF0aDoNCgkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJZy5zZWVrKE9mZnNldCkNCgkJCQkJYnl0ZXM9Zy5mKFNpemUqSXRlbVNpemUpDQoJCQkJCWxpc3Q9W10NCgkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQl1LHY9Ynl0ZXNbbSpJdGVtU2l6ZTptKkl0ZW1TaXplK0l0ZW1TaXplXQ0KCQkJCQkJbGlzdC5hcHBlbmQoW3UsMS12XSkNCgkJCQkJVGV4Q29vcmRBcnJheS5hcHBlbmQoW2xpc3QsRW5jb2RpbmddKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCglyZXR1cm4gVGV4Q29vcmRBcnJheQ0KCQ0KZGVmIENvbG9yKHlzLGIpOg0KCW49MjANCglTaXplPU5vbmUNCglPZmZzZXQ9Tm9uZQ0KCUVuY29kaW5nPU5vbmUNCglJdGVtU2l6ZT1Ob25lDQoJdHlwZT1Ob25lCQkJCQ0KCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCgljb2xvckFycmF5PVtdDQoJaWYgJyJJdGVtU2l6ZSInIGluIHZhbHVlczoNCgkJSXRlbVNpemU9aW50KHZhbHVlc1snIkl0ZW1TaXplIiddKQkJCQkJDQoJCVVpbnQ4QXJyYXk9eXMuZ2V0KGIsJyJVaW50OEFycmF5IicpDQoJCWlmIFVpbnQ4QXJyYXk6DQoJCQl0eXBlPSJVaW50OEFycmF5Ig0KCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50OEFycmF5WzBdLmRhdGEsJzonKQ0KCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicsJyIiJykJDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQkJCQkJDQoJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCWlmIHBhdGg6DQoJCQkJaWYgRW5jb2RpbmchPScidmFyaW50Iic6DQoJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWcuc2VlayhPZmZzZXQpDQoJCQkJCWJ5dGVzPWcuQihTaXplKkl0ZW1TaXplKQ0KCQkJCQlsaXN0PVtdDQoJCQkJCWZvciBtIGluIHJhbmdlKFNpemUpOg0KCQkJCQkJbGlzdC5hcHBlbmQoYnl0ZXNbbSpJdGVtU2l6ZTptKkl0ZW1TaXplK0l0ZW1TaXplXSkNCgkJCQkJY29sb3JBcnJheT1saXN0DQoJCQkJCWZpbGUuY2xvc2UoKQkJCQkJDQoJCUZsb2F0MzJBcnJheT15cy5nZXQoYiwnIkZsb2F0MzJBcnJheSInKQ0KCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQl0eXBlPSJGbG9hdDMyQXJyYXkiDQoJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpCQ0KCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykJCQkJCQ0KCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQlpZiBwYXRoOg0KCQkJCWlmIEVuY29kaW5nIT0nInZhcmludCInOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlnLnNlZWsoT2Zmc2V0KQ0KCQkJCQlieXRlcz1nLmYoU2l6ZSpJdGVtU2l6ZSkNCgkJCQkJbGlzdD1bXQ0KCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCWl0ZW1zPWJ5dGVzW20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0NCgkJCQkJCUE9W10NCgkJCQkJCWZvciBpdGVtIGluIGl0ZW1zOg0KCQkJCQkJCUEuYXBwZW5kKGludChpdGVtKjI1NikpDQoJCQkJCQlsaXN0LmFwcGVuZChBKQ0KCQkJCQljb2xvckFycmF5PWxpc3QNCgkJCQkJZmlsZS5jbG9zZSgpDQoJcmV0dXJuIGNvbG9yQXJyYXkJCQkJCQkJDQoJDQoJDQoJDQpkZWYgZ2V0SW5kaWNlcyhpdGVtc2l6ZSxzaXplLG9mZnNldCx0eXBlLGcsbW9kZSxtYWdpYyk6DQoJaWYgdHlwZSE9IlVpbnQ4QXJyYXkiOmJ5dGVzPWRlY29kZVZhcmludChnLG9mZnNldCxzaXplKml0ZW1zaXplLHR5cGUpDQoJZWxzZToNCgkJZy5zZWVrKG9mZnNldCkNCgkJYnl0ZXM9bGlzdChnLkIoc2l6ZSppdGVtc2l6ZSkpCQkNCgl3cml0ZShsb2csW21hZ2ljLG1vZGUsdHlwZV0sMCkNCgl3cml0ZShsb2csYnl0ZXMsMCkJCQ0KCQ0KCUlNUExJQ0lUX0hFQURFUl9MRU5HVEg9Mw0KCUlNUExJQ0lUX0hFQURFUl9NQVNLX0xFTkdUSD0xDQoJSU1QTElDSVRfSEVBREVSX1BSSU1JVElWRV9MRU5HVEg9MA0KCUlNUExJQ0lUX0hFQURFUl9FWFBFQ1RFRF9JTkRFWD0yDQoJaGlnaFdhdGVybWFyaz0yDQoJDQoJTWlzc2luZ0NvbmRpdGlvbj1za2lwZGVjb2RlDQoJaWYgTWlzc2luZ0NvbmRpdGlvbiE9MToNCgkJDQoJCWlmIG1vZGU9PSciVFJJQU5HTEVfU1RSSVAiJzoNCgkJCQkJaz1JTVBMSUNJVF9IRUFERVJfTEVOR1RIK2J5dGVzW0lNUExJQ0lUX0hFQURFUl9NQVNLX0xFTkdUSF0NCgkJCQkJYnl0ZXM9ZGVjb2RlRGVsdGEoYnl0ZXMsaykJDQoJCQkJCSN3cml0ZShsb2csW21hZ2ljLGtdLDApCQ0KCQkJCQkjd3JpdGUobG9nLGJ5dGVzLDApCQkNCgkJCQkJYnl0ZXM9ZGVjb2RlSW1wbGljaXQoYnl0ZXMsaykNCgkJCQkJI3dyaXRlKGxvZyxbbWFnaWMsa10sMCkJDQoJCQkJCSN3cml0ZShsb2csYnl0ZXMsMCkJCQkNCgkJCQkJaT1bbWFnaWNdCQ0KCQkJCQlieXRlcyxtYWdpYz1kZWNvZGVXYXRlcm1hcmsoYnl0ZXMsYnl0ZXMsaSkNCgkJCQkJI3dyaXRlKGxvZyxbbWFnaWNdLDApCQ0KCQkJCQkjd3JpdGUobG9nLGJ5dGVzLDApCQ0KCQkJCQ0KCQllbGlmIG1vZGU9PSciVFJJQU5HTEVTIic6DQoJCQkJCWs9MA0KCQkJCQlieXRlcz1kZWNvZGVEZWx0YShieXRlcyxrKQ0KCQkJCQkjd3JpdGUobG9nLFttYWdpY10sMCkJDQoJCQkJCSN3cml0ZShsb2csYnl0ZXMsMCkJCQkNCgkJCQkJaT1bbWFnaWNdCQ0KCQkJCQlieXRlcyxtYWdpYz1kZWNvZGVXYXRlcm1hcmsoYnl0ZXMsYnl0ZXMsaSkNCgkJCQkJI3dyaXRlKGxvZyxbbWFnaWNdLDApCQ0KCQkJCQkjd3JpdGUobG9nLGJ5dGVzLDApCQ0KCQkNCgkJDQoJCQ0KCQkNCglyZXR1cm4gbWFnaWMsYnl0ZXMNCgkNCgkJCQkNCmRlZiBQcmltaXRpdmVTZXRMaXN0KHlzLGNoaWxkKToNCglnbG9iYWwgbWFnaWMNCgltb2RlPU5vbmUNCgltYWdpYz0wDQoJbj0xNg0KCWluZGljZUFycmF5PVtdDQoJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOgkJCQkJDQoJCWI9Y2hpbGQubm9kZQ0KCQlpZiAnIkRyYXdFbGVtZW50c1VJbnQiJyBpbiBiLmhlYWRlcjoJCQkNCgkJCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCgkJCW1vZGU9dmFsdWVzWyciTW9kZSInXQkJCQ0KCQkJU2l6ZT1Ob25lDQoJCQlPZmZzZXQ9Tm9uZQ0KCQkJRW5jb2Rpbmc9Tm9uZQ0KCQkJSXRlbVNpemU9Tm9uZQ0KCQkJdHlwZT1Ob25lDQoJCQlpZiBtb2RlIT0nIkxJTkVTIic6DQoJCQkJSW5kaWNlcz15cy5nZXQoYiwnIkluZGljZXMiJykNCgkJCQlpZiBJbmRpY2VzOg0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEluZGljZXNbMF0uZGF0YSwnOicpDQoJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQ0KCQkJCQlVaW50MzJBcnJheT15cy5nZXQoSW5kaWNlc1swXSwnIlVpbnQzMkFycmF5IicpDQoJCQkJCXR5cGU9IlVpbnQzMkFycmF5Ig0KCQkJCQkjcHJpbnQgIkRyYXdFbGVtZW50c1VJbnQiLHR5cGUNCgkJCQkJaWYgVWludDMyQXJyYXk6DQoJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFVpbnQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCQkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicsJyIiJykNCgkJCQkJCSN3cml0ZShsb2csWydJbmRpY2U6JywnbW9kZTonLG1vZGUsdHlwZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnRW5jb2Rpbmc6JyxFbmNvZGluZywnbWFnaWM6JyxtYWdpY10sbikNCgkJCQkJCWlmIEVuY29kaW5nPT0ndmFyaW50JzoNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwKyJtb2RlbF9maWxlLmJpbiINCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArdmFsdWVzWyciRmlsZSInXS5zcGxpdCgnIicpWzFdIysnLnR4dCcNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJbWFnaWMsaW5kaWNlTGlzdD1nZXRJbmRpY2VzKEl0ZW1TaXplLFNpemUsT2Zmc2V0LHR5cGUsZyxtb2RlLG1hZ2ljKQ0KCQkJCQkJCQlpbmRpY2VBcnJheS5hcHBlbmQoW2luZGljZUxpc3QsbW9kZV0pDQoJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJI2Vsc2U6DQoJCQkjCXByaW50ICdMSU5FUycNCgkJCQkNCgkJaWYgJyJEcmF3RWxlbWVudHNVU2hvcnQiJyBpbiBiLmhlYWRlcjoJCQ0KCQkJdmFsdWVzPXlzLnZhbHVlcyhiLmRhdGEsJzonKQ0KCQkJbW9kZT12YWx1ZXNbJyJNb2RlIiddCQkJDQoJCQlTaXplPU5vbmUNCgkJCU9mZnNldD1Ob25lDQoJCQlFbmNvZGluZz1Ob25lDQoJCQlJdGVtU2l6ZT1Ob25lDQoJCQl0eXBlPU5vbmUNCgkJCWlmIG1vZGUhPSciTElORVMiJzoNCgkJCQlJbmRpY2VzPXlzLmdldChiLCciSW5kaWNlcyInKQ0KCQkJCWlmIEluZGljZXM6DQoJCQkJCXZhbHVlcz15cy52YWx1ZXMoSW5kaWNlc1swXS5kYXRhLCc6JykNCgkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpDQoJCQkJCVVpbnQxNkFycmF5PXlzLmdldChJbmRpY2VzWzBdLCciVWludDE2QXJyYXkiJykNCgkJCQkJdHlwZT0iVWludDE2QXJyYXkiDQoJCQkJCSNwcmludCAiRHJhd0VsZW1lbnRzVVNob3J0Iix0eXBlDQoJCQkJCWlmIFVpbnQxNkFycmF5Og0KCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MTZBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQkJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpDQoJCQkJCQkjd3JpdGUobG9nLFsnSW5kaWNlOicsJ21vZGU6Jyxtb2RlLHR5cGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmcsJ21hZ2ljOicsbWFnaWNdLG4pDQoJCQkJCQkjcHJpbnQgRW5jb2RpbmcNCgkJCQkJCWlmIEVuY29kaW5nPT0ndmFyaW50JzoNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwKyJtb2RlbF9maWxlLmJpbiINCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArdmFsdWVzWyciRmlsZSInXS5zcGxpdCgnIicpWzFdIysnLnR4dCcNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJbWFnaWMsaW5kaWNlTGlzdD1nZXRJbmRpY2VzKEl0ZW1TaXplLFNpemUsT2Zmc2V0LHR5cGUsZyxtb2RlLG1hZ2ljKQ0KCQkJCQkJCQlpbmRpY2VBcnJheS5hcHBlbmQoW2luZGljZUxpc3QsbW9kZV0pDQoJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJZWxzZToNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwKyJtb2RlbF9maWxlLmJpbiINCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArdmFsdWVzWyciRmlsZSInXS5zcGxpdCgnIicpWzFdIysnLnR4dCcNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJZy5zZWVrKE9mZnNldCkNCgkJCQkJCQkJaW5kaWNlTGlzdD1nLkgoSXRlbVNpemUqU2l6ZSkNCgkJCQkJCQkJaW5kaWNlQXJyYXkuYXBwZW5kKFtpbmRpY2VMaXN0LG1vZGVdKQ0KCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCSNlbHNlOg0KCQkJIwlwcmludCAnTElORVMnDQoJCQkNCgkJaWYgJyJEcmF3RWxlbWVudHNVQnl0ZSInIGluIGIuaGVhZGVyOgkJCQ0KCQkJdmFsdWVzPXlzLnZhbHVlcyhiLmRhdGEsJzonKQ0KCQkJbW9kZT12YWx1ZXNbJyJNb2RlIiddCQkJDQoJCQlTaXplPU5vbmUNCgkJCU9mZnNldD1Ob25lDQoJCQlFbmNvZGluZz1Ob25lDQoJCQlJdGVtU2l6ZT1Ob25lDQoJCQl0eXBlPU5vbmUNCgkJCWlmIG1vZGUhPSciTElORVMiJzoNCgkJCQlJbmRpY2VzPXlzLmdldChiLCciSW5kaWNlcyInKQ0KCQkJCWlmIEluZGljZXM6DQoJCQkJCXZhbHVlcz15cy52YWx1ZXMoSW5kaWNlc1swXS5kYXRhLCc6JykNCgkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpDQoJCQkJCVVpbnQ4QXJyYXk9eXMuZ2V0KEluZGljZXNbMF0sJyJVaW50OEFycmF5IicpDQoJCQkJCXR5cGU9IlVpbnQ4QXJyYXkiDQoJCQkJCSNwcmludCAiRHJhd0VsZW1lbnRzVUJ5dGUiLHR5cGUNCgkJCQkJaWYgVWludDhBcnJheToNCgkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVWludDhBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQkJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpDQoJCQkJCQkjd3JpdGUobG9nLFsnSW5kaWNlOicsJ21vZGU6Jyxtb2RlLHR5cGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmcsJ21hZ2ljOicsbWFnaWNdLG4pDQoJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwKyJtb2RlbF9maWxlLmJpbiINCgkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwKyJtb2RlbF9maWxlLmJpbiINCgkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwK3ZhbHVlc1snIkZpbGUiJ10uc3BsaXQoJyInKVsxXSMrJy50eHQnDQoJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZToNCgkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJbWFnaWMsaW5kaWNlTGlzdD1nZXRJbmRpY2VzKEl0ZW1TaXplLFNpemUsT2Zmc2V0LHR5cGUsZyxtb2RlLG1hZ2ljKQ0KCQkJCQkJCWluZGljZUFycmF5LmFwcGVuZChbaW5kaWNlTGlzdCxtb2RlXSkNCgkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCSNlbHNlOg0KCQkJIwlwcmludCAnTElORVMnDQoJCQkJDQoJcmV0dXJuIGluZGljZUFycmF5DQoJDQoJDQoJCQkNCmRlZiBCb25lcyh5cyxiKToNCgluPTIwDQoJYm9uZXM9W10NCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpDQoJVWludDE2QXJyYXk9eXMuZ2V0KGIsJyJVaW50MTZBcnJheSInKQ0KCWlmIFVpbnQxNkFycmF5Og0KCQl0eXBlPSJVaW50MTZBcnJheSINCgkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MTZBcnJheVswXS5kYXRhLCc6JykNCgkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykNCgkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpDQoJCQ0KCQlpZiBFbmNvZGluZz09J3ZhcmludCc6CQkJCQkJDQoJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCWlmIHBhdGg6DQoJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCWxpc3Q9ZGVjb2RlVmFyaW50KGcsT2Zmc2V0LFNpemUqSXRlbVNpemUsdHlwZSkNCgkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJYm9uZXMuYXBwZW5kKGxpc3RbbSpJdGVtU2l6ZTptKkl0ZW1TaXplK0l0ZW1TaXplXSkNCgkJCQlmaWxlLmNsb3NlKCkNCglyZXR1cm4gYm9uZXMJCQ0KCQkJDQpkZWYgV2VpZ2h0cyh5cyxiKToNCgluPTIwDQoJd2VpZ2h0cz1bXQ0KCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCglJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykNCglGbG9hdDMyQXJyYXk9eXMuZ2V0KGIsJyJGbG9hdDMyQXJyYXkiJykNCglpZiBGbG9hdDMyQXJyYXk6DQoJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicsJyIiJykNCgkJDQoJCWlmIEVuY29kaW5nPT0ndmFyaW50JzoJCQkJCQ0KCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQlpZiBwYXRoOg0KCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQlsaXN0PWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJZmlsZS5jbG9zZSgpDQoJCWVsc2U6CQkJCQkNCgkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJaWYgcGF0aDoNCgkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJZy5zZWVrKE9mZnNldCkNCgkJCQlsaXN0PWcuZihTaXplKkl0ZW1TaXplKQ0KCQkJCWZvciBtIGluIHJhbmdlKFNpemUpOg0KCQkJCQl3ZWlnaHRzLmFwcGVuZChsaXN0W20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0pDQoJCQkJZmlsZS5jbG9zZSgpDQoJcmV0dXJuIHdlaWdodHMJDQoJDQpkZWYgQm9uZU1hcCh5cyxiKToJDQoJQm9uZU1hcD17fQ0KCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCglmb3IgdmFsdWUgaW4gdmFsdWVzOg0KCQlpZD15cy5nZXRWYWx1ZSh2YWx1ZXMsdmFsdWUsJ2knKQ0KCQluYW1lPXZhbHVlLnJlcGxhY2UoJyInLCAnJykNCgkJQm9uZU1hcFtuYW1lXT1pZA0KCXJldHVybiBCb25lTWFwCQ0KCQkNCgkJDQpkZWYgb3NnQW5pbWF0aW9uUmlnR2VvbWV0cnkoeXMscGFyZW50TmV3Tm9kZSk6DQoNCgltZXNoPU1lc2goKQ0KCW1lc2gudmVydGV4QXJyYXk9W10NCgltZXNoLmluZGljZUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDBBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQxQXJyYXk9W10NCgltZXNoLlRleENvb3JkM0FycmF5PVtdDQoJbWVzaC5UZXhDb29yZDVBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQ2QXJyYXk9W10NCgltZXNoLmNvbG9yQXJyYXk9W10NCgltZXNoLm5vcm1hbEFycmF5PVtdDQoJbWVzaC5tb3JwaEFycmF5PXt9DQoJbWVzaC5Cb25lcz1bXQ0KCW1lc2guV2VpZ2h0cz1bXQ0KCW1lc2guQm9uZU1hcD17fQ0KCW1lc2guYXRyaWJ1dGVzPXt9DQoJbWVzaC5wYXJlbnROb2RlPXBhcmVudE5ld05vZGUubm9kZQ0KCWZvciBjaGlsZCBpbiBwYXJlbnROZXdOb2RlLmNoaWxkcmVuOg0KCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sNCkNCgkJaWYgJyJTb3VyY2VHZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCSN3cml0ZShsb2csW2NoaWxkLm5vZGUuaGVhZGVyXSw4KQ0KCQkJCWlmICcib3NnQW5pbWF0aW9uLk1vcnBoR2VvbWV0cnkiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDEyKQ0KCQkJCQkJaWYgJyJWZXJ0ZXhBdHRyaWJ1dGVMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJCQlpZiAnIlZlcnRleCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC52ZXJ0ZXhBcnJheT1WZXJ0ZXgoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJCXByaW50ICJUcmlhbmdsZXM6ICIgKyBzdHIobGVuKG1lc2gudmVydGV4QXJyYXkpKQ0KCQkJCQkJCQkJc3lzMi5zdGRvdXQuZmx1c2goKQ0KCQkJCQkJCQlpZiAnIk5vcm1hbCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5ub3JtYWxBcnJheT1WZXJ0ZXhOb3JtYWwoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJUZXhDb29yZDAiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guVGV4Q29vcmQwQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJUZXhDb29yZDEiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guVGV4Q29vcmQxQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJUZXhDb29yZDMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guVGV4Q29vcmQzQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJUZXhDb29yZDUiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guVGV4Q29vcmQ1QXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJUZXhDb29yZDYiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guVGV4Q29vcmQ2QXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQkJCQkJaWYgJyJDb2xvciInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5jb2xvckFycmF5PUNvbG9yKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQlpZiAnIlByaW1pdGl2ZVNldExpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQltZXNoLmluZGljZUFycmF5PVByaW1pdGl2ZVNldExpc3QoeXMsY2hpbGQpDQoJCQkJCQlpZiAnIlVzZXJEYXRhQ29udGFpbmVyIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJbWVzaC5hdHJpYnV0ZXM9VXNlckRhdGFDb250YWluZXIoeXMsY2hpbGQpDQoJCQkJCQlpZiAnIk1vcnBoVGFyZ2V0cyInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCXByaW50ICJNb3JwaFRhcmdldHMiDQoJCQkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sMTYpDQoJCQkJCQkJCWlmICcib3NnLkdlb21ldHJ5IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQlOYW1lPU5vbmUNCgkJCQkJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCQkJCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sMjApCQkJCQkJCQkJCQ0KCQkJCQkJCQkJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQkJCQkJCQlpZiAnIlZlcnRleCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJCQkJCWlmIE5hbWU6DQoJCQkJCQkJCQkJCQkJCW1lc2gubW9ycGhBcnJheVtOYW1lXT1WZXJ0ZXgoeXMsY2hpbGQubm9kZSkJCQkJCQkJCQkJDQoJCQkJCQkJCQkJaWYgJyJVbmlxdWVJRCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCQkJCQkJCQkJVW5pcXVlSUQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciVW5pcXVlSUQiJywnaScpDQoJCQkJCQkJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkJCQkJCQkJCSN3cml0ZShsb2csW1VuaXF1ZUlELE5hbWVdLDI0KQ0KCQkJCWlmICcib3NnLkdlb21ldHJ5IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCQkJaWYgJyJWZXJ0ZXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2gudmVydGV4QXJyYXk9VmVydGV4KHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCQlwcmludCAiVHJpYW5nbGVzOiAiICsgc3RyKGxlbihtZXNoLnZlcnRleEFycmF5KSkNCgkJCQkJCQkJCXN5czIuc3Rkb3V0LmZsdXNoKCkNCgkJCQkJCQkJaWYgJyJOb3JtYWwiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2gubm9ybWFsQXJyYXk9VmVydGV4Tm9ybWFsKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQwIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkMEFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQxIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkMUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkM0FycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQ1IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkNUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQ2IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkNkFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciQ29sb3IiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guY29sb3JBcnJheT1Db2xvcih5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJaWYgJyJQcmltaXRpdmVTZXRMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJbWVzaC5pbmRpY2VBcnJheT1QcmltaXRpdmVTZXRMaXN0KHlzLGNoaWxkKQ0KCQkJCQkJaWYgJyJVc2VyRGF0YUNvbnRhaW5lciInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCW1lc2guYXRyaWJ1dGVzPVVzZXJEYXRhQ29udGFpbmVyKHlzLGNoaWxkKQ0KCQkJCQkJCQkNCgkJCQkJCQkJDQoJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCWlmICciQm9uZXMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5Cb25lcz1Cb25lcyh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciV2VpZ2h0cyInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLldlaWdodHM9V2VpZ2h0cyh5cyxjaGlsZC5ub2RlKQ0KCQlpZiAnIkJvbmVNYXAiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCW1lc2guQm9uZU1hcD1Cb25lTWFwKHlzLGNoaWxkLm5vZGUpDQoJCQkJDQoJcmV0dXJuIG1lc2gJDQoJDQpkZWYgb3NnR2VvbWV0cnkoeXMscGFyZW50TmV3Tm9kZSk6DQoNCgltZXNoPU1lc2goKQ0KCW1lc2gudmVydGV4QXJyYXk9W10NCgltZXNoLmluZGljZUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDBBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQxQXJyYXk9W10NCgltZXNoLlRleENvb3JkM0FycmF5PVtdDQoJbWVzaC5UZXhDb29yZDVBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQ2QXJyYXk9W10NCgltZXNoLmNvbG9yQXJyYXk9W10NCgltZXNoLm5vcm1hbEFycmF5PVtdDQoJbWVzaC5tb3JwaEFycmF5PXt9DQoJbWVzaC5Cb25lcz1bXQ0KCW1lc2guV2VpZ2h0cz1bXQ0KCW1lc2guQm9uZU1hcD17fQ0KCW1lc2guYXRyaWJ1dGVzPXt9DQoJbWVzaC5wYXJlbnROb2RlPXBhcmVudE5ld05vZGUubm9kZQ0KCWZvciBjaGlsZCBpbiBwYXJlbnROZXdOb2RlLmNoaWxkcmVuOg0KCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sNCkNCgkJaWYgJyJWZXJ0ZXhBdHRyaWJ1dGVMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDgpDQoJCQkJaWYgJyJWZXJ0ZXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC52ZXJ0ZXhBcnJheT1WZXJ0ZXgoeXMsY2hpbGQubm9kZSkNCgkJCQkJcHJpbnQgIlRyaWFuZ2xlczogIiArIHN0cihsZW4obWVzaC52ZXJ0ZXhBcnJheSkpDQoJCQkJCXN5czIuc3Rkb3V0LmZsdXNoKCkNCgkJCQlpZiAnIk5vcm1hbCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLm5vcm1hbEFycmF5PVZlcnRleE5vcm1hbCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQwIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQwQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkMSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkMUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDNBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQ1IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQ1QXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkNiInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkNkFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJDb2xvciInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLmNvbG9yQXJyYXk9Q29sb3IoeXMsY2hpbGQubm9kZSkNCgkJaWYgJyJQcmltaXRpdmVTZXRMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQltZXNoLmluZGljZUFycmF5PVByaW1pdGl2ZVNldExpc3QoeXMsY2hpbGQpDQoJCWlmICciVXNlckRhdGFDb250YWluZXIiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCW1lc2guYXRyaWJ1dGVzPVVzZXJEYXRhQ29udGFpbmVyKHlzLGNoaWxkKQ0KCXJldHVybiBtZXNoCQkNCgkNCgkNCmRlZiBvc2dBbmltYXRpb25Nb3JwaEdlb21ldHJ5KHlzLHBhcmVudE5ld05vZGUpOg0KDQoJbWVzaD1NZXNoKCkNCgltZXNoLnZlcnRleEFycmF5PVtdDQoJbWVzaC5pbmRpY2VBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQwQXJyYXk9W10NCgltZXNoLlRleENvb3JkMUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDNBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQ1QXJyYXk9W10NCgltZXNoLlRleENvb3JkNkFycmF5PVtdDQoJbWVzaC5jb2xvckFycmF5PVtdDQoJbWVzaC5ub3JtYWxBcnJheT1bXQ0KCW1lc2gubW9ycGhBcnJheT17fQ0KCW1lc2guQm9uZXM9W10NCgltZXNoLldlaWdodHM9W10NCgltZXNoLkJvbmVNYXA9e30NCgltZXNoLmF0cmlidXRlcz17fQ0KCW1lc2gucGFyZW50Tm9kZT1wYXJlbnROZXdOb2RlLm5vZGUNCglmb3IgY2hpbGQgaW4gcGFyZW50TmV3Tm9kZS5jaGlsZHJlbjoNCgkJaWYgJyJNb3JwaFRhcmdldHMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCXByaW50ICJNb3JwaFRhcmdldHMiDQoJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDE2KQ0KCQkJCWlmICcib3NnLkdlb21ldHJ5IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCU5hbWU9Tm9uZQ0KCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sMjApCQkJCQkJCQkJCQ0KCQkJCQkJaWYgJyJWZXJ0ZXhBdHRyaWJ1dGVMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJCQlpZiAnIlZlcnRleCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJaWYgTmFtZToNCgkJCQkJCQkJCQltZXNoLm1vcnBoQXJyYXlbTmFtZV09VmVydGV4KHlzLGNoaWxkLm5vZGUpCQkJCQkJCQkJCQ0KCQkJCQkJaWYgJyJVbmlxdWVJRCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5oZWFkZXIsJzonKQ0KCQkJCQkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkJCQkJI3dyaXRlKGxvZyxbVW5pcXVlSUQsTmFtZV0sMjQpDQoJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCSNwcmludCBjaGlsZC5ub2RlLmhlYWRlcg0KCQkJCWlmICciVmVydGV4IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2gudmVydGV4QXJyYXk9VmVydGV4KHlzLGNoaWxkLm5vZGUpDQoJCQkJCXByaW50ICJUcmlhbmdsZXM6ICIgKyBzdHIobGVuKG1lc2gudmVydGV4QXJyYXkpKQ0KCQkJCQlzeXMyLnN0ZG91dC5mbHVzaCgpDQoJCQkJaWYgJyJOb3JtYWwiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5ub3JtYWxBcnJheT1WZXJ0ZXhOb3JtYWwoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkMCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkMEFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDEiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDFBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQzQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkNSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkNUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDYiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDZBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciQ29sb3IiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5jb2xvckFycmF5PUNvbG9yKHlzLGNoaWxkLm5vZGUpDQoJCWlmICciUHJpbWl0aXZlU2V0TGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJbWVzaC5pbmRpY2VBcnJheT1QcmltaXRpdmVTZXRMaXN0KHlzLGNoaWxkKQ0KCQlpZiAnIlVzZXJEYXRhQ29udGFpbmVyIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQltZXNoLmF0cmlidXRlcz1Vc2VyRGF0YUNvbnRhaW5lcih5cyxjaGlsZCkNCgkJCQkJCQkJDQoJCQkJCQkNCgkJCQkNCglyZXR1cm4gbWVzaAkNCgkJDQoJCQ0KZGVmIGRyYXdNZXNoKHlzLG1lc2gpOgkNCglkaWZmdXNlPU5vbmUJCQ0KCW5vcm1hbD1Ob25lCQ0KCXNwZWN1bGFyPU5vbmUNCgl0cmFucz1Ob25lCQ0KCWFvPU5vbmUNCglyZ2JDb2w9Tm9uZQ0KCXJnYlNwZWM9Tm9uZQ0KCXJnYmE9Tm9uZQkNCgltb2RlPU5vbmUJDQoNCg0KDQoJbWF0TmFtZSxkaWZmdXNlLHNwZWN1bGFyLG5vcm1hbCxhbyx0cmFucyxyZ2JDb2wscmdiU3BlYyxyZ2JhPWdldE1hdE5hbWUoeXMsbWVzaC5wYXJlbnROb2RlKQ0KCSNwcmludCAnbWF0TmFtZTonLG1hdE5hbWUsZGlmZnVzZQ0KCXRyeToNCgkJaWYgbGVuKG1lc2gubm9ybWFsQXJyYXkpID09IDE6DQoJCQlpZiBtZXNoLm5vcm1hbEFycmF5WzBdWzFdID09ICcidmFyaW50Iic6DQoJCQkJYnl0ZXMgPSBtZXNoLm5vcm1hbEFycmF5WzBdWzBdDQoJCQkJSXRlbVNpemUgPSBtZXNoLm5vcm1hbEFycmF5WzBdWzJdDQoJCQkJZXBzID0gZmxvYXQobWVzaC5hdHJpYnV0ZXNbImVwc2lsb24iXSkNCgkJCQlucGhpID0gZmxvYXQobWVzaC5hdHJpYnV0ZXNbIm5waGkiXSkNCgkJCQlzaXplID0gbGVuKGJ5dGVzKSAvIEl0ZW1TaXplDQoJCQkJaW50cyA9IGJ5dGVzDQoJCQkJZ2xvYmFsIG1vZGVsSUQNCgkJCQkNCgkJCQlpZiBvcy5wYXRoLmV4aXN0cygibW9kZWxEYXRhLmpzIik6DQoJCQkJCW9zLnJlbW92ZSgibW9kZWxEYXRhLmpzIikNCgkJCQlpZiBvcy5wYXRoLmV4aXN0cygibm9ybWFscy5kYXQiKToNCgkJCQkJb3MucmVtb3ZlKCJub3JtYWxzLmRhdCIpDQoJCQkJd2l0aCBvcGVuKCJtb2RlbERhdGEuanMiLCAiYSIpIGFzIG1vZGVsRGF0YToNCgkJCQkJbW9kZWxJRCArPSAxDQoJCQkJCW1vZGVsRGF0YS53cml0ZSgibW9kdWxlLmV4cG9ydHMuZXBzID0gIiArIHN0cihlcHMpICsgIjtcbiIpDQoJCQkJCW1vZGVsRGF0YS53cml0ZSgibW9kdWxlLmV4cG9ydHMubnBoaSA9ICIgKyBzdHIobnBoaSkgKyAiO1xuIikNCgkJCQkJbW9kZWxEYXRhLndyaXRlKCJtb2R1bGUuZXhwb3J0cy5zaXplID0gIiArIHN0cihzaXplKSArICI7XG4iKQ0KCQkJCQltb2RlbERhdGEud3JpdGUoIm1vZHVsZS5leHBvcnRzLmlkID0gIiArIHN0cihtb2RlbElEKSArICI7XG4iKQ0KCQkJCQltb2RlbERhdGEud3JpdGUoIm1vZHVsZS5leHBvcnRzLmludHMgPSAiICsgc3RyKGJ5dGVzKSArICI7XG4iKQ0KCQkJCQ0KCQkJCXN1YnByb2Nlc3MuY2FsbCgoJ25vZGUuZXhlIC4ve3RlbXBQYXRofS9jYWxjVmVydGV4Tm9ybWFscy5qcycpKQ0KCWV4Y2VwdDoNCgkJcGFzcw0KCQ0KCWlmIGxlbihtZXNoLmluZGljZUFycmF5KT4wOg0KCQlmb3IgW2luZGljZXMsbW9kZV0gaW4gbWVzaC5pbmRpY2VBcnJheToNCgkJCW1hdD1NYXQoKQ0KCQkJbWF0Lm1hdE5hbWU9bWF0TmFtZQ0KCQkJbWF0LnJnYkNvbD1yZ2JDb2wNCgkJCW1hdC5kaWZmdXNlPWRpZmZ1c2UNCgkJCW1hdC5ub3JtYWw9bm9ybWFsDQoJCQltYXQuc3BlY3VsYXI9c3BlY3VsYXINCgkJCW1hdC50cmFucz10cmFucw0KCQkJaWYgdHJhbnM6DQoJCQkJbWF0LlpUUkFOUz1UcnVlDQoJCQkjbWF0LmFvPWFvDQoJCQlpZiByZ2JhOm1hdC5yZ2JhPXJnYmENCgkJCW1lc2gubWF0TGlzdC5hcHBlbmQobWF0KQ0KCQkJbWF0LklEU3RhcnQ9bGVuKG1lc2guaW5kaWNlTGlzdCkNCgkJCW1hdC5JRENvdW50PWxlbihpbmRpY2VzKQ0KCQkJbWVzaC5pbmRpY2VMaXN0LmV4dGVuZChpbmRpY2VzKQ0KCQkJaWYgbW9kZT09JyJUUklBTkdMRV9TVFJJUCInOm1hdC5UUklTVFJJUD1UcnVlDQoJCQlpZiBtb2RlPT0nIlRSSUFOR0xFUyInOm1hdC5UUklBTkdMRT1UcnVlDQoJCQkNCgkJaW5kaWNlcz1tZXNoLmluZGljZUFycmF5WzBdWzBdDQoJCW1vZGU9bWVzaC5pbmRpY2VBcnJheVswXVsxXQkJDQoJaWYgbGVuKG1lc2gudmVydGV4QXJyYXkpPT0xOg0KCQlpZiBtZXNoLnZlcnRleEFycmF5WzBdWzFdPT0nInZhcmludCInOg0KCQkJaWYgbW9kZToNCgkJCQlieXRlcz1tZXNoLnZlcnRleEFycmF5WzBdWzBdCQkJCQ0KCQkJCUl0ZW1TaXplPW1lc2gudmVydGV4QXJyYXlbMF1bMl0NCgkJCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWJ5dGVzPWRlY29kZVByZWRpY3QoaW5kaWNlcyxieXRlcyxJdGVtU2l6ZSkNCgkJCQlzMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndnR4X2JibF94J10pDQoJCQkJczI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3Z0eF9iYmxfeSddKQ0KCQkJCXMzPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd2dHhfYmJsX3onXSkNCgkJCQlzPVtzMSxzMixzM10JCQkNCgkJCQlhMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndnR4X2hfeCddKQ0KCQkJCWEyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd2dHhfaF95J10pDQoJCQkJYTM9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3Z0eF9oX3onXSkNCgkJCQlhPVthMSxhMixhM10NCgkJCQlmbG9hdHM9ZGVjb2RlUXVhbnRpemUoYnl0ZXMscyxhLEl0ZW1TaXplKQ0KCQkJCW1lc2gudmVydFBvc0xpc3Q9W2Zsb2F0c1ttOm0rSXRlbVNpemVdZm9yIG0gaW4gcmFuZ2UoMCxsZW4oZmxvYXRzKSwzKV0NCgkJCQkjcHJpbnQgbWVzaC52ZXJ0UG9zTGlzdA0KCQkJCSNtZXNoLmluZGkNCgkJCQkjbWVzaC5kcmF3KCkNCgkJZWxzZToNCgkJCWxpc3Q9bWVzaC52ZXJ0ZXhBcnJheVswXVswXQ0KCQkJbWVzaC52ZXJ0UG9zTGlzdD1saXN0DQoJCQkNCglpZiBsZW4obWVzaC5UZXhDb29yZDBBcnJheSk9PTE6DQoJCWlmIG1lc2guVGV4Q29vcmQwQXJyYXlbMF1bMV09PScidmFyaW50Iic6DQoJCQlpZiBtb2RlOg0KCQkJCWJ5dGVzPW1lc2guVGV4Q29vcmQwQXJyYXlbMF1bMF0JCQkJDQoJCQkJSXRlbVNpemU9bWVzaC5UZXhDb29yZDBBcnJheVswXVsyXQ0KCQkJCWlmIG1vZGU9PSciVFJJQU5HTEVfU1RSSVAiJzoNCgkJCQkJYnl0ZXM9ZGVjb2RlUHJlZGljdChpbmRpY2VzLGJ5dGVzLEl0ZW1TaXplKQ0KCQkJCXMxPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8wX2JibF94J10pDQoJCQkJczI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzBfYmJsX3knXSkNCgkJCQlzPVtzMSxzMl0JCQkNCgkJCQlhMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfMF9oX3gnXSkNCgkJCQlhMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfMF9oX3knXSkNCgkJCQlhPVthMSxhMl0NCgkJCQlmbG9hdHM9ZGVjb2RlUXVhbnRpemUoYnl0ZXMscyxhLEl0ZW1TaXplKQ0KCQkJCWZvciBtIGluIHJhbmdlKDAsbGVuKGZsb2F0cyksSXRlbVNpemUpOg0KCQkJCQl1LHY9ZmxvYXRzW206bStJdGVtU2l6ZV0NCgkJCQkJbWVzaC52ZXJ0VVZMaXN0LmFwcGVuZChbdSwxLXZdKQ0KCQllbHNlOg0KCQkJbGlzdD1tZXNoLlRleENvb3JkMEFycmF5WzBdWzBdDQoJCQltZXNoLnZlcnRVVkxpc3Q9bGlzdA0KCWVsaWYgbGVuKG1lc2guVGV4Q29vcmQxQXJyYXkpPT0xOg0KCQlpZiBtZXNoLlRleENvb3JkMUFycmF5WzBdWzFdPT0nInZhcmludCInOg0KCQkJaWYgbW9kZToNCgkJCQlieXRlcz1tZXNoLlRleENvb3JkMUFycmF5WzBdWzBdCQkJCQ0KCQkJCUl0ZW1TaXplPW1lc2guVGV4Q29vcmQxQXJyYXlbMF1bMl0NCgkJCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWJ5dGVzPWRlY29kZVByZWRpY3QoaW5kaWNlcyxieXRlcyxJdGVtU2l6ZSkNCgkJCQlzMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfMV9iYmxfeCddKQ0KCQkJCXMyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8xX2JibF95J10pDQoJCQkJcz1bczEsczJdCQkJDQoJCQkJYTE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzFfaF94J10pDQoJCQkJYTI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzFfaF95J10pDQoJCQkJYT1bYTEsYTJdDQoJCQkJZmxvYXRzPWRlY29kZVF1YW50aXplKGJ5dGVzLHMsYSxJdGVtU2l6ZSkNCgkJCQlmb3IgbSBpbiByYW5nZSgwLGxlbihmbG9hdHMpLEl0ZW1TaXplKToNCgkJCQkJdSx2PWZsb2F0c1ttOm0rSXRlbVNpemVdDQoJCQkJCW1lc2gudmVydFVWTGlzdC5hcHBlbmQoW3UsMS12XSkNCgkJZWxzZToNCgkJCWxpc3Q9bWVzaC5UZXhDb29yZDFBcnJheVswXVswXQ0KCQkJbWVzaC52ZXJ0VVZMaXN0PWxpc3QNCgllbGlmIGxlbihtZXNoLlRleENvb3JkM0FycmF5KT09MToNCgkJaWYgbWVzaC5UZXhDb29yZDNBcnJheVswXVsxXT09JyJ2YXJpbnQiJzoNCgkJCWlmIG1vZGU6DQoJCQkJYnl0ZXM9bWVzaC5UZXhDb29yZDNBcnJheVswXVswXQkJCQkNCgkJCQlJdGVtU2l6ZT1tZXNoLlRleENvb3JkM0FycmF5WzBdWzJdDQoJCQkJaWYgbW9kZT09JyJUUklBTkdMRV9TVFJJUCInOg0KCQkJCQlieXRlcz1kZWNvZGVQcmVkaWN0KGluZGljZXMsYnl0ZXMsSXRlbVNpemUpDQoJCQkJczE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzNfYmJsX3gnXSkNCgkJCQlzMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfM19iYmxfeSddKQ0KCQkJCXM9W3MxLHMyXQkJCQ0KCQkJCWExPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8zX2hfeCddKQ0KCQkJCWEyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8zX2hfeSddKQ0KCQkJCWE9W2ExLGEyXQ0KCQkJCWZsb2F0cz1kZWNvZGVRdWFudGl6ZShieXRlcyxzLGEsSXRlbVNpemUpDQoJCQkJZm9yIG0gaW4gcmFuZ2UoMCxsZW4oZmxvYXRzKSxJdGVtU2l6ZSk6DQoJCQkJCXUsdj1mbG9hdHNbbTptK0l0ZW1TaXplXQ0KCQkJCQltZXNoLnZlcnRVVkxpc3QuYXBwZW5kKFt1LDEtdl0pDQoJCWVsc2U6DQoJCQlsaXN0PW1lc2guVGV4Q29vcmQzQXJyYXlbMF1bMF0NCgkJCW1lc2gudmVydFVWTGlzdD1saXN0DQoJZWxpZiBsZW4obWVzaC5UZXhDb29yZDVBcnJheSk9PTE6DQoJCWlmIG1lc2guVGV4Q29vcmQ1QXJyYXlbMF1bMV09PScidmFyaW50Iic6DQoJCQlpZiBtb2RlOg0KCQkJCWJ5dGVzPW1lc2guVGV4Q29vcmQ1QXJyYXlbMF1bMF0JCQkJDQoJCQkJSXRlbVNpemU9bWVzaC5UZXhDb29yZDVBcnJheVswXVsyXQ0KCQkJCWlmIG1vZGU9PSciVFJJQU5HTEVfU1RSSVAiJzoNCgkJCQkJYnl0ZXM9ZGVjb2RlUHJlZGljdChpbmRpY2VzLGJ5dGVzLEl0ZW1TaXplKQ0KCQkJCXMxPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl81X2JibF94J10pDQoJCQkJczI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzVfYmJsX3knXSkNCgkJCQlzPVtzMSxzMl0JCQkNCgkJCQlhMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfNV9oX3gnXSkNCgkJCQlhMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfNV9oX3knXSkNCgkJCQlhPVthMSxhMl0NCgkJCQlmbG9hdHM9ZGVjb2RlUXVhbnRpemUoYnl0ZXMscyxhLEl0ZW1TaXplKQ0KCQkJCWZvciBtIGluIHJhbmdlKDAsbGVuKGZsb2F0cyksSXRlbVNpemUpOg0KCQkJCQl1LHY9ZmxvYXRzW206bStJdGVtU2l6ZV0NCgkJCQkJbWVzaC52ZXJ0VVZMaXN0LmFwcGVuZChbdSwxLXZdKQ0KCQllbHNlOg0KCQkJbGlzdD1tZXNoLlRleENvb3JkNUFycmF5WzBdWzBdDQoJCQltZXNoLnZlcnRVVkxpc3Q9bGlzdA0KCWVsaWYgbGVuKG1lc2guVGV4Q29vcmQ2QXJyYXkpPT0xOg0KCQlpZiBtZXNoLlRleENvb3JkNkFycmF5WzBdWzFdPT0nInZhcmludCInOg0KCQkJaWYgbW9kZToNCgkJCQlieXRlcz1tZXNoLlRleENvb3JkNkFycmF5WzBdWzBdCQkJCQ0KCQkJCUl0ZW1TaXplPW1lc2guVGV4Q29vcmQ2QXJyYXlbMF1bMl0NCgkJCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWJ5dGVzPWRlY29kZVByZWRpY3QoaW5kaWNlcyxieXRlcyxJdGVtU2l6ZSkNCgkJCQlzMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfNl9iYmxfeCddKQ0KCQkJCXMyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl82X2JibF95J10pDQoJCQkJcz1bczEsczJdCQkJDQoJCQkJYTE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzZfaF94J10pDQoJCQkJYTI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzZfaF95J10pDQoJCQkJYT1bYTEsYTJdDQoJCQkJZmxvYXRzPWRlY29kZVF1YW50aXplKGJ5dGVzLHMsYSxJdGVtU2l6ZSkNCgkJCQlmb3IgbSBpbiByYW5nZSgwLGxlbihmbG9hdHMpLEl0ZW1TaXplKToNCgkJCQkJdSx2PWZsb2F0c1ttOm0rSXRlbVNpemVdDQoJCQkJCW1lc2gudmVydFVWTGlzdC5hcHBlbmQoW3UsMS12XSkNCgkJZWxzZToNCgkJCWxpc3Q9bWVzaC5UZXhDb29yZDZBcnJheVswXVswXQ0KCQkJbWVzaC52ZXJ0VVZMaXN0PWxpc3QNCglpZiBsZW4obWVzaC5jb2xvckFycmF5KT4wOg0KCQltZXNoLnZlcnRDb2xMaXN0PW1lc2guY29sb3JBcnJheQ0KCQkNCgkJDQoJCQ0KDQpkZWYgVXNlckRhdGFDb250YWluZXIoeXMsYik6DQoJYXRyaWJ1dGVzPXt9DQoJVmFsdWVzPXlzLmdldChiLm5vZGUsJyJWYWx1ZXMiJykNCglpZiBWYWx1ZXM6DQoJCWZvciBhIGluIFZhbHVlc1swXS5jaGlsZHJlbjoNCgkJCXZhbHVlcz15cy52YWx1ZXMoYS5kYXRhLCc6JykNCgkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQlWYWx1ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJWYWx1ZSInLCciIicpDQoJCQkjaWYgTmFtZTp3cml0ZShsb2csW05hbWUsVmFsdWVdLG4rNCkNCgkJCWlmIE5hbWU6YXRyaWJ1dGVzW05hbWVdPVZhbHVlCQ0KCXJldHVybiBhdHJpYnV0ZXMJCQkNCgkJDQpkZWYgb3NnTm9kZSh5cyxwYXJlbnROZXdOb2RlLHBhcmVudEJvbmUpOg0KCWZvciBjaGlsZCBpbiBwYXJlbnROZXdOb2RlLmNoaWxkcmVuOg0KCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQlpZiAnIm9zZy5HZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCW1lc2g9b3NnR2VvbWV0cnkoeXMsY2hpbGQpDQoJCQkJbWVzaC5wYXJlbnRCb25lPXBhcmVudEJvbmUNCgkJCQltb2RlbC5tZXNoTGlzdC5hcHBlbmQobWVzaCkNCgkJCWlmICcib3NnQW5pbWF0aW9uLlJpZ0dlb21ldHJ5IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJbWVzaD1vc2dBbmltYXRpb25SaWdHZW9tZXRyeSh5cyxjaGlsZCkNCgkJCQltZXNoLnBhcmVudEJvbmU9cGFyZW50Qm9uZQ0KCQkJCW1vZGVsLm1lc2hMaXN0LmFwcGVuZChtZXNoKQ0KCQkJaWYgJyJvc2dBbmltYXRpb24uTW9ycGhHZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCW1lc2g9b3NnQW5pbWF0aW9uTW9ycGhHZW9tZXRyeSh5cyxjaGlsZCkNCgkJCQltZXNoLnBhcmVudEJvbmU9cGFyZW50Qm9uZQ0KCQkJCW1vZGVsLm1lc2hMaXN0LmFwcGVuZChtZXNoKQ0KCQkJCXByaW50ICJUcmlhbmdsZXM6IDEiDQoJCQkJDQoJCQkJDQpkZWYgb3NnTWF0cml4VHJhbnNmb3JtKHlzLHBhcmVudE5ld05vZGUscGFyZW50Qm9uZSk6DQoJYm9uZT1Cb25lKCkJDQoJYm9uZS5OYW1lPU5vbmUNCglib25lLlVwZGF0ZU5hbWU9Tm9uZQ0KCWJvbmUubWF0cml4PU1hdHJpeCgpLnJlc2l6ZTR4NCgpIy5pbnZlcnQoKQ0KCWlmIHBhcmVudEJvbmU6Ym9uZS5wYXJlbnROYW1lPXBhcmVudEJvbmUubmFtZQ0KCXNrZWxldG9uLmJvbmVMaXN0LmFwcGVuZChib25lKQ0KCWZvciBjaGlsZCBpbiBwYXJlbnROZXdOb2RlLmNoaWxkcmVuOg0KCQlpZiAnIk1hdHJpeCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmRhdGEsJ2YnKQkNCgkJCWJvbmUubWF0cml4PU1hdHJpeDR4NCh2YWx1ZXMpDQoJCQlpZiBwYXJlbnRCb25lOmJvbmUubWF0cml4Kj1wYXJlbnRCb25lLm1hdHJpeAkNCgkJaWYgJyJVbmlxdWVJRCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmhlYWRlciwnOicpDQoJCQlVbmlxdWVJRD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJVbmlxdWVJRCInLCdpJykNCgkJCWJvbmUubmFtZT0nVW5pcXVlSURfJytzdHIoVW5pcXVlSUQpDQoJCWlmICciTmFtZSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmhlYWRlciwnOicpDQoJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJI2JpbmRCb25lLk5hbWU9TmFtZQ0KCQkJYm9uZS5OYW1lPU5hbWUNCgkJaWYgJyJVcGRhdGVDYWxsYmFja3MiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQlpZiAnIm9zZ0FuaW1hdGlvbi5VcGRhdGVNYXRyaXhUcmFuc2Zvcm0iJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJaWYgJyJOYW1lIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmhlYWRlciwnOicpDQoJCQkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicsJyIiJykNCgkJCQkJCQkjYmluZEJvbmUuVXBkYXRlTmFtZT1OYW1lDQoJCQkJCQkJYm9uZS5VcGRhdGVOYW1lPU5hbWUNCglyZXR1cm4gYm9uZQkJDQoJCQkNCgkJDQpkZWYgb3NnQW5pbWF0aW9uQm9uZSh5cyxwYXJlbnROZXdOb2RlLHBhcmVudEJvbmUpOg0KCWJvbmU9Qm9uZSgpDQoJc2tlbGV0b24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpCQkNCglib25lLm1hdHJpeD1NYXRyaXgoKS5yZXNpemU0eDQoKSMuaW52ZXJ0KCkNCgliaW5kQm9uZT1Cb25lKCkNCgliaW5kQm9uZS5tYXRyaXg9TWF0cml4KCkucmVzaXplNHg0KCkjLmludmVydCgpDQoJYmluZEJvbmUuTmFtZT1Ob25lDQoJYm9uZS5OYW1lPU5vbmUNCglib25lLlVwZGF0ZU5hbWU9Tm9uZQ0KCWJpbmRCb25lLlVwZGF0ZU5hbWU9Tm9uZQ0KCWZvciBjaGlsZCBpbiBwYXJlbnROZXdOb2RlLmNoaWxkcmVuOg0KCQlpZiAnIkludkJpbmRNYXRyaXhJblNrZWxldG9uU3BhY2UiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5kYXRhLCdmJykJDQoJCQltYXRyaXg9TWF0cml4NHg0KHZhbHVlcykNCgkJCWJpbmRCb25lLm1hdHJpeD1tYXRyaXguaW52ZXJ0KCkJDQoJCQliaW5kc2tlbGV0b24uYm9uZUxpc3QuYXBwZW5kKGJpbmRCb25lKQ0KCQlpZiAnIlVuaXF1ZUlEIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJYmluZEJvbmUubmFtZT0nVW5pcXVlSURfJytzdHIoVW5pcXVlSUQpDQoJCQlib25lLm5hbWU9J1VuaXF1ZUlEXycrc3RyKFVuaXF1ZUlEKQ0KCQlpZiAnIk5hbWUiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5oZWFkZXIsJzonKQ0KCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicsJyIiJykNCgkJCWJpbmRCb25lLk5hbWU9TmFtZQ0KCQkJYm9uZS5OYW1lPU5hbWUNCgkJCSNib25lSW5kZWtzTGlzdFtOYW1lXT1ib25lLm5hbWUNCgkJaWYgJyJNYXRyaXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5kYXRhLCdmJykJDQoJCQlib25lLm1hdHJpeD1NYXRyaXg0eDQodmFsdWVzKQ0KCQkJaWYgcGFyZW50Qm9uZToNCgkJCQlpZiAnTWF0cml4VHJhbnNmb3JtJyBub3QgaW4gcGFyZW50Qm9uZS5uYW1lOg0KCQkJCQlib25lLnBhcmVudE5hbWU9cGFyZW50Qm9uZS5uYW1lDQoJCQkJYm9uZS5tYXRyaXgqPXBhcmVudEJvbmUubWF0cml4DQoJCWlmICciVXBkYXRlQ2FsbGJhY2tzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJaWYgJyJvc2dBbmltYXRpb24uVXBkYXRlQm9uZSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQlpZiAnIk5hbWUiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJCQkJCWJpbmRCb25lLlVwZGF0ZU5hbWU9TmFtZQ0KCQkJCQkJCWJvbmUuVXBkYXRlTmFtZT1OYW1lDQoJcmV0dXJuIGJvbmUJCQkNCgkJDQpkZWYgZ2V0TmV3Tm9kZVRyZWUoeXMscGFyZW50TmV3Tm9kZSxuLHBhcmVudEJvbmUsZGF0YSk6DQoJDQoJaWYgJyJvc2dBbmltYXRpb24uU2tlbGV0b24iJyBpbiBwYXJlbnROZXdOb2RlLm5vZGUuaGVhZGVyOg0KCQlwYXJlbnRCb25lPW9zZ0FuaW1hdGlvbkJvbmUoeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKQ0KCQliaW5kc2tlbGV0b24ucGFyZW50Qm9uZT1wYXJlbnRCb25lDQoJaWYgJyJvc2cuTm9kZSInIGluIHBhcmVudE5ld05vZGUubm9kZS5oZWFkZXI6DQoJCW9zZ05vZGUoeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKQ0KCWlmICcib3NnLk1hdHJpeFRyYW5zZm9ybSInIGluIHBhcmVudE5ld05vZGUubm9kZS5oZWFkZXI6DQoJCXBhcmVudEJvbmU9b3NnTWF0cml4VHJhbnNmb3JtKHlzLHBhcmVudE5ld05vZGUscGFyZW50Qm9uZSkNCglpZiAnIm9zZ0FuaW1hdGlvbi5Cb25lIicgaW4gcGFyZW50TmV3Tm9kZS5ub2RlLmhlYWRlcjoNCgkJcGFyZW50Qm9uZT1vc2dBbmltYXRpb25Cb25lKHlzLHBhcmVudE5ld05vZGUscGFyZW50Qm9uZSkNCgluKz00DQoJZm9yIGNoaWxkIGluIHBhcmVudE5ld05vZGUuY2hpbGRyZW46DQoJCSN3cml0ZShsb2csW2NoaWxkLm5vZGUuaGVhZGVyLGNoaWxkLlVuaXF1ZUlEXSxuKQ0KCQlnZXROZXdOb2RlVHJlZSh5cyxjaGlsZCxuLHBhcmVudEJvbmUsZGF0YSkJCQ0KCQ0KZGVmIG9zZ1BhcnNlcihmaWxlbmFtZSk6DQoJZ2xvYmFsIHNrZWxldG9uLGJpbmRza2VsZXRvbixtb2RlbCxib25lSW5kZWtzTGlzdCxmaXJzdG1hdHJpeCxuZXdOb2RlTGlzdA0KCSNSaWdHZW9tZXRyeT1GYWxzZQ0KCWJvbmVJbmRla3NMaXN0PXt9DQoJbW9kZWw9TW9kZWwoZmlsZW5hbWUpDQoJbW9kZWwubWF0TGlzdD17fQ0KCXNrZWxldG9uPVNrZWxldG9uKCkNCglza2VsZXRvbi5BUk1BVFVSRVNQQUNFPVRydWUNCgliaW5kc2tlbGV0b249U2tlbGV0b24oKQ0KCWJpbmRza2VsZXRvbi5wYXJlbnRCb25lPU5vbmUNCgliaW5kc2tlbGV0b24uQVJNQVRVUkVTUEFDRT1UcnVlDQoJVW5pcXVlSURMaXN0PXt9DQoJeXM9WXNvbigpDQoJeXMubG9nPVRydWUNCgl5cy5maWxlbmFtZT1maWxlbmFtZQ0KCXlzLnBhcnNlKCkNCgkNCglyb290PXlzLnJvb3QNCgluPTANCgluZXdOb2RlTGlzdD1bXQ0KCW5ld1Jvb3Q9TmV3Tm9kZSgpDQoJbmV3Um9vdC5ub2RlPXlzLnJvb3QNCgluZXdOb2RlTGlzdC5hcHBlbmQobmV3Um9vdCkNCglnZXRJRFRyZWUoeXMseXMucm9vdCxuLG5ld1Jvb3QpDQoJDQoJcm9vdD1uZXdSb290DQoJZ2V0TmV3Tm9kZVRyZWUoeXMscm9vdCxuLE5vbmUsTm9uZSkNCgkNCiNkZWYgc3NzKCk6CQ0KCQ0KCXNrZWxldG9uLmRyYXcoKQ0KCQkjZm9yIGJvbmUgaW4gYmluZHNrZWxldG9uLmJvbmVMaXN0Og0KCQkjCWJvbmUubWF0cml4Kj1iaW5kc2tlbGV0b24ucGFyZW50Qm9uZS5tYXRyaXgNCglpZiBsZW4oYmluZHNrZWxldG9uLmJvbmVMaXN0KT4wOgkJDQoJCWJpbmRza2VsZXRvbi5kcmF3KCkNCglpZiBiaW5kc2tlbGV0b24ucGFyZW50Qm9uZSBhbmQgYmluZHNrZWxldG9uLm9iamVjdDoNCgkJYmluZHNrZWxldG9uLm9iamVjdC5zZXRNYXRyaXgoYmluZHNrZWxldG9uLnBhcmVudEJvbmUubWF0cml4KQ0KCSNib25lTmFtZUxpc3Q9W10NCgkNCglmb3IgYm9uZSBpbiBza2VsZXRvbi5ib25lTGlzdDoNCgkJaWYgYm9uZS5VcGRhdGVOYW1lOg0KCQkJI05hbWU9Z2V0U3BsaXROYW1lKGJvbmUuTmFtZSwnXycsLTEpDQoJCQlib25lSW5kZWtzTGlzdFtib25lLlVwZGF0ZU5hbWVdPWJvbmUubmFtZQ0KCQkJI3ByaW50IE5hbWUsYm9uZS5uYW1lDQoJCQkNCgluPTAJDQoJcmVzdWx0PTANCglBbmltYXRpb25zPXlzLmdldCh5cy5yb290LCcib3NnQW5pbWF0aW9uLkFuaW1hdGlvbiInKQkJDQoJaWYgQW5pbWF0aW9uczoNCgkJI3Jlc3VsdD1CbGVuZGVyLkRyYXcuUHVwTWVudSgiZXhwb3J0IGFuaW1hdGlvbnMgYXMgKi5hY3Rpb24/JXR8WWVzfE5vIikNCgkJaWYgcmVzdWx0PT0xOg0KCQkJZm9yIGFuaW1hdGlvbiBpbiBBbmltYXRpb25zOgkNCgkJCQlnZXRBbmltYXRpb24oeXMsYW5pbWF0aW9uLG4pDQoJCQkJDQoJCQkJDQoJCQ0KCQkNCgkJDQoJZm9yIG1lc2ggaW4gbW9kZWwubWVzaExpc3Q6DQoJCW1lc2guQklORFNLRUxFVE9OPXNrZWxldG9uLm5hbWUNCgkJZHJhd01lc2goeXMsbWVzaCkNCgkJCQkNCgkjbW9kZWwuZ2V0TWF0KCkJDQoJcmVzdWx0PTENCgkjcmVzdWx0PUJsZW5kZXIuRHJhdy5QdXBNZW51KCJTZW5kIG1lc2hlcyB0byBzdGFydHBvc2U/JXR8WWVzfE5vIikNCgkNCglyZXN1bHQxMD0xIA0KCQkNCglpZiByZXN1bHQxMD09MToNCgkJZm9yIGkxLG1lc2ggaW4gZW51bWVyYXRlKG1vZGVsLm1lc2hMaXN0KToNCgkJCXByaW50IGkxLCd2ZXJ0OicsbGVuKG1lc2gudmVydFBvc0xpc3QpLCdjb2w6JyxsZW4obWVzaC52ZXJ0Q29sTGlzdCksJ3V2OicsbGVuKG1lc2gudmVydFVWTGlzdCksJ2luZGljZTonLGxlbihtZXNoLmluZGljZUxpc3QpLCdtYXQ6JyxsZW4obWVzaC5tYXRMaXN0KSwnc2tpbjonLGxlbihtZXNoLnNraW5MaXN0KSMsbWF0TmFtZQ0KCQkJc3lzMi5zdGRvdXQuZmx1c2goKQ0KCQkJI0JsZW5kZXIuV2luZG93LkRyYXdQcm9ncmVzc0JhcihmbG9hdCgoaTEpL2Zsb2F0KGxlbihtb2RlbC5tZXNoTGlzdCkpKSxzdHIobGVuKG1vZGVsLm1lc2hMaXN0KS0xLWkxKSkNCgkJCQ0KCQkJbWVzaC5CSU5EU0tFTEVUT049c2tlbGV0b24ubmFtZQ0KCQkJaWYgbGVuKG1lc2gudmVydFBvc0xpc3QpPjA6CQ0KCQkJCWlmIGxlbihtZXNoLkJvbmVzKT4wIGFuZCBsZW4obWVzaC5XZWlnaHRzKT4wOg0KCQkJCQlza2luPVNraW4oKQ0KCQkJCQlza2luLmJvbmVNYXA9WzBdKmxlbihtZXNoLkJvbmVNYXApDQoJCQkJCW1lc2guYm9uZU5hbWVMaXN0PVsnJ10qbGVuKG1lc2guQm9uZU1hcCkNCgkJCQkJZm9yIGJvbmVOYW1lIGluIG1lc2guQm9uZU1hcDoNCgkJCQkJCWZvciBib25lIGluIHNrZWxldG9uLmJvbmVMaXN0Og0KCQkJCQkJCWlmIGJvbmUuTmFtZT09Ym9uZU5hbWU6DQoJCQkJCQkJCWlkPW1lc2guQm9uZU1hcFtib25lTmFtZV0NCgkJCQkJCQkJc2tpbi5ib25lTWFwW2lkXT1pZA0KCQkJCQkJCQltZXNoLmJvbmVOYW1lTGlzdFtpZF09Ym9uZS5uYW1lCQ0KCQkJCQkJCQlicmVhawkJCQkNCgkJCQkJbWVzaC5za2luTGlzdC5hcHBlbmQoc2tpbikNCgkJCQkJbWVzaC5za2luSW5kaWNlTGlzdD1tZXNoLkJvbmVzDQoJCQkJCW1lc2guc2tpbldlaWdodExpc3Q9bWVzaC5XZWlnaHRzDQoJCQkJDQoJCQkJaWYgYmluZHNrZWxldG9uLm9iamVjdCBhbmQgc2tlbGV0b24ub2JqZWN0Og0KCQkJCQlpZiBtZXNoLnBhcmVudEJvbmUgYW5kIGxlbihtZXNoLnNraW5MaXN0KT4wOg0KCQkJCQkJbWVzaC5kcmF3KCkJDQoJCQkJCQltZXNoLm9iamVjdC5nZXREYXRhKG1lc2g9MSkudHJhbnNmb3JtKG1lc2gucGFyZW50Qm9uZS5tYXRyaXgpDQoJCQkJCQltZXNoLm9iamVjdC5nZXREYXRhKG1lc2g9MSkudXBkYXRlKCkNCgkJCQkJCSNtZXNoLm9iamVjdC5zZXRNYXRyaXgobWVzaC5wYXJlbnRCb25lLm1hdHJpeCkNCgkJCQkJCWlmIHJlc3VsdD09MToNCgkJCQkJCQliaW5kUG9zZShiaW5kc2tlbGV0b24ub2JqZWN0LHNrZWxldG9uLm9iamVjdCxtZXNoLm9iamVjdCkNCgkJCQkJCXNrZWxldG9uLm9iamVjdC5tYWtlUGFyZW50RGVmb3JtKFttZXNoLm9iamVjdF0sMSwwKQ0KCQkJCQllbGlmIG1lc2gucGFyZW50Qm9uZSBhbmQgbGVuKG1lc2guc2tpbkxpc3QpPT0wOg0KCQkJCQkJbWVzaC5zZXRTa2luKG1lc2gucGFyZW50Qm9uZS5uYW1lKQkNCgkJCQkJCW1lc2guZHJhdygpCQ0KCQkJCQkJbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnRyYW5zZm9ybShtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQkJbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnVwZGF0ZSgpDQoJCQkJCQlza2VsZXRvbi5vYmplY3QubWFrZVBhcmVudERlZm9ybShbbWVzaC5vYmplY3RdLDEsMCkNCgkJCQllbHNlOgkNCgkJCQkJaWYgbWVzaC5wYXJlbnRCb25lOg0KCQkJCQkJaWYgbGVuKG1lc2guc2tpbkxpc3QpPT0wOg0KCQkJCQkJCW1lc2guc2V0U2tpbihtZXNoLnBhcmVudEJvbmUubmFtZSkJDQoJCQkJCQltZXNoLmRyYXcoKQkNCgkJCQkJCW1lc2gub2JqZWN0LmdldERhdGEobWVzaD0xKS50cmFuc2Zvcm0obWVzaC5wYXJlbnRCb25lLm1hdHJpeCkNCgkJCQkJCW1lc2gub2JqZWN0LmdldERhdGEobWVzaD0xKS51cGRhdGUoKQ0KCQkJCQkJI21lc2gub2JqZWN0LnNldE1hdHJpeChtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQkJI3NrZWxldG9uLm9iamVjdC5tYWtlUGFyZW50Qm9uZShbbWVzaC5vYmplY3RdLG1lc2gucGFyZW50Qm9uZS5uYW1lLDAsMCkNCgkJCQkJCWlmIHNrZWxldG9uLm9iamVjdCBhbmQgc2tlbGV0b24ub2JqZWN0Og0KCQkJCQkJCXNrZWxldG9uLm9iamVjdC5tYWtlUGFyZW50RGVmb3JtKFttZXNoLm9iamVjdF0sMSwwKQ0KCQkJCQllbHNlOg0KCQkJCQkJI3ByaW50IGxlbihtZXNoLnZlcnRQb3NMaXN0KQ0KCQkJCQkJI3ByaW50IG1lc2guaW5kaWNlTGlzdA0KCQkJCQkJI21lc2guaW5kaWNlTGlzdD1bXQ0KCQkJCQkJbWVzaC5kcmF3KCkJDQoJCQkJCQkjbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnRyYW5zZm9ybShtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQkJI21lc2gub2JqZWN0LmdldERhdGEobWVzaD0xKS51cGRhdGUoKQ0KCQkJCQkJI21lc2gub2JqZWN0LnNldE1hdHJpeChtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQ0KCQkJCSIiIg0KCQkJCWlmIGxlbihtZXNoLm1vcnBoQXJyYXkpPjA6CQkNCgkJCQkJbmFtZT1tZXNoLm9iamVjdC5uYW1lDQoJCQkJCWFjdGlvbj1BY3Rpb24oKQkJDQoJCQkJCWFjdGlvbi5NRVNIU1BBQ0U9VHJ1ZQ0KCQkJCQlhY3Rpb24ubmFtZT1uYW1lDQoJCQkJCWZvciBpLG1vcnBoIGluIGVudW1lcmF0ZShtZXNoLm1vcnBoQXJyYXkpOg0KCQkJCQkJI21vcnBoTWVzaD1NZXNoKCkNCgkJCQkJCSNtb3JwaE1lc2gudmVydFBvc0xpc3Q9bWVzaC5tb3JwaEFycmF5W21vcnBoXVswXVswXQ0KCQkJCQkJI3ByaW50IG1vcnBoDQoJCQkJCQkjbW9ycGhNZXNoLmRyYXcoKQ0KCQkJCQkJdmVydExpc3Q9bWVzaC5tb3JwaEFycmF5W21vcnBoXVswXVswXQ0KCQkJCQkJZnJhbWU9aSo1DQoJCQkJCQlhY3Rpb24uc2hhcGVGcmFtZUxpc3QuYXBwZW5kKGZyYW1lKQ0KCQkJCQkJYWN0aW9uLnNoYXBlS2V5TGlzdC5hcHBlbmQodmVydExpc3QpDQoJCQkJCWFjdGlvbi5kcmF3KCkNCgkJCQkJYWN0aW9uLnNldENvbnRleHQoKQ0KCQkJCQkiIiINCgkJCQkJCQ0KCQkJCQkJDQoJCQkJCQkNCg0KDQoJCW1vZGVsLnNldCgpCQ0KCQkJCQkJDQoNCg0KDQoNCg0KDQoNCg0KDQoJCQ0KCQkjZm9yIGksbWVzaCBpbiBlbnVtZXJhdGUobW9kZWwubWVzaExpc3QpOg0KCQkjCUJsZW5kZXIuV2luZG93LkRyYXdQcm9ncmVzc0JhcihmbG9hdChpL2Zsb2F0KGxlbihtb2RlbC5tZXNoTGlzdCkrMSkpLHN0cigtMStsZW4obW9kZWwubWVzaExpc3QpLWkpKQ0KCQkjcHJpbnQgJ3Jlc3VsdDonLHJlc3VsdA0KCQlpZiByZXN1bHQhPTI6DQoJCQlpZgliaW5kc2tlbGV0b24ub2JqZWN0Og0KCQkJCXNjZW5lID0gYnB5LmRhdGEuc2NlbmVzLmFjdGl2ZQ0KCQkJCXNjZW5lLm9iamVjdHMudW5saW5rKGJpbmRza2VsZXRvbi5vYmplY3QpDQoJCQ0KZGVmIGh0bVBhcnNlcihmaWxlbmFtZSk6DQoJeXM9WXNvbigpDQoJeXMubG9nPVRydWUNCgl5cy5maWxlbmFtZT1maWxlbmFtZQ0KCXlzLnBhcnNlKCkJCQ0KCSMjb3Muc3lzdGVtKCdjbHMnKQ0KCQ0KCQkJDQoJI3N6dWthbSBpa29ueQ0KCXByaW50ICdzenVrYW0gaWtvbnknDQoJI3ByaW50IHlzLnJvb3QNCglUSFVNQk5BSUxTPXlzLmdldCh5cy5yb290LCcidGh1bWJuYWlscyInKQ0KCXByaW50IFRIVU1CTkFJTFMNCglpa29uYT1Ob25lDQoJU0laRT0wDQoJaWYgVEhVTUJOQUlMUzoNCgkJZm9yIHRodW1ibmFpbHMgaW4gVEhVTUJOQUlMUzoNCgkJCSNwcmludCB0aHVtYm5haWxzLmhlYWRlcg0KCQkJVVJMPXlzLmdldCh0aHVtYm5haWxzLCcidXJsIicpDQoJCQlmb3IgYSBpbiBVUkw6DQoJCQkJdmFsdWVzPXlzLnZhbHVlcyhhLmRhdGEsJzonKQ0KCQkJCXVybD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1cmwiJywnIiInKQ0KCQkJCXNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCcic2l6ZSInLCdpJykNCgkJCQlpZiB1cmw6DQoJCQkJCWJhc2VuYW1lPW9zLnBhdGguYmFzZW5hbWUodXJsKQkJCQ0KCQkJCQlpZiAnLmpwZWcnIGluIGJhc2VuYW1lOnBhdGg9c3lzLmRpcitvcy5zZXArb3MucGF0aC5iYXNlbmFtZSh1cmwpKycuanBnJw0KCQkJCQllbHNlOnBhdGg9c3lzLmRpcitvcy5zZXArb3MucGF0aC5iYXNlbmFtZSh1cmwpDQoJCQkJCWV4aXN0cz1vcy5wYXRoLmV4aXN0cyhwYXRoKQ0KCQkJCQkjcHJpbnQgJ2lrb25hJyxleGlzdHMsb3MucGF0aC5iYXNlbmFtZSh1cmwpKycuanBnJwkJCQkJCQkNCgkJCQkJaWYgZXhpc3RzPT1UcnVlOg0KCQkJCQkJaWYgc2l6ZT5TSVpFOg0KCQkJCQkJCVNJWkU9c2l6ZQ0KCQkJCQkJCWlrb25hPXBhdGgNCgkJCQkJCQkNCglpZiBpa29uYToNCgkJI3ByaW50IGlrb25hDQoJCWZvciBmaWxlIGluIG9zLmxpc3RkaXIoc3lzLmRpcik6DQoJCQlpZiAnLmh0bScgaW4gZmlsZToNCgkJCQlpZiBvcy5wYXRoLmV4aXN0cyhzeXMuZGlyK29zLnNlcCtmaWxlKyIudGh1bWIuMTAucG5nIik9PUZhbHNlOg0KCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhpa29uYSk6DQoJCQkJCQlvcy5yZW5hbWUoaWtvbmEsc3lzLmRpcitvcy5zZXArZmlsZSsiLnRodW1iLjEwLnBuZyIpDQoJCQkJZWxzZToNCgkJCQkJaWYgb3MucGF0aC5leGlzdHMoc3lzLmRpcitvcy5zZXArZmlsZSsiLnRodW1iLjExLnBuZyIpPT1GYWxzZToNCgkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKGlrb25hKToJCQkJCQkNCgkJCQkJCQlvcy5yZW5hbWUoaWtvbmEsc3lzLmRpcitvcy5zZXArZmlsZSsiLnRodW1iLjExLnBuZyIpDQoJCQkJCQ0KCQkJDQoJCQ0KCQ0KCVJFU1VMVFM9eXMuZ2V0KHlzLnJvb3QsJyJyZXN1bHRzIicpCQ0KCWlmIFJFU1VMVFM6DQoJCWZvciByZXN1bHRzIGluIFJFU1VMVFM6DQoJCQl3cml0ZShsb2csWyJyZXN1bHRzIl0sMCkNCgkJCVVJRFM9eXMuZ2V0KHJlc3VsdHMsJyJ1aWQiJykJDQoJCQlpZiBVSURTOg0KCQkJCWZvciBVSUQgaW4gVUlEUzoNCgkJCQkJI3dyaXRlKGxvZyxbVUlELmhlYWRlcl0sNCkNCgkJCQkJdWlkPU5vbmUNCgkJCQkJdmFsdWVzPU5vbmUNCgkJCQkJaWYgJyJ1aWQiJyBpbiBVSUQuaGVhZGVyOnZhbHVlcz15cy52YWx1ZXMoVUlELmhlYWRlciwnOicpDQoJCQkJCWlmICcidWlkIicgaW4gVUlELmRhdGE6dmFsdWVzPXlzLnZhbHVlcyhVSUQuZGF0YSwnOicpDQoJCQkJCWlmIHZhbHVlczp1aWQ9eXMuZ2V0VmFsdWUodmFsdWVzLCcidWlkIicsJyIiJykNCgkJCQkJd3JpdGUobG9nLFsndWlkOicsdWlkXSw0KQ0KCQkJCQlpZiB1aWQ6DQoJCQkJCQlmb3JtYXRzPXlzLmdldChVSUQsJyJmb3JtYXQiJykNCgkJCQkJCWlmIGZvcm1hdHM6CQkJCQkJCQ0KCQkJCQkJCUlNQUdFU1t1aWRdPXt9DQoJCQkJCQkJSU1BR0VTW3VpZF1bJ0EnXT1bTm9uZSxOb25lLDEwMF0NCgkJCQkJCQlJTUFHRVNbdWlkXVsnUkdCJ109W05vbmUsTm9uZSwxMDBdDQoJCQkJCQkJSU1BR0VTW3VpZF1bJ04nXT1bTm9uZSxOb25lLDEwMF0NCgkJCQkJCQlJTUFHRVNbdWlkXVsnUiddPVtOb25lLE5vbmUsMTAwXQ0KCQkJCQkJCWZvciBmb3JtYXROb2RlIGluIGZvcm1hdHM6DQoJCQkJCQkJCXdyaXRlKGxvZyxbJ2ltYWdlJ10sOCkJCQkJCQkJCQ0KCQkJCQkJCQl2YWx1ZXM9Tm9uZQ0KCQkJCQkJCQlmb3JtYXQ9Tm9uZQ0KCQkJCQkJCQlpZiAnImZvcm1hdCInIGluIGZvcm1hdE5vZGUuaGVhZGVyOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5oZWFkZXIsJzonKQ0KCQkJCQkJCQlpZiAnImZvcm1hdCInIGluIGZvcm1hdE5vZGUuZGF0YTp2YWx1ZXM9eXMudmFsdWVzKGZvcm1hdE5vZGUuZGF0YSwnOicpDQoJCQkJCQkJCWlmIHZhbHVlczpmb3JtYXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciZm9ybWF0IicsJyIiJykNCgkJCQkJCQkJd3JpdGUobG9nLFsnZm9ybWF0OicsZm9ybWF0XSwxMikJCQkJCQkJCQ0KCQkJCQkJCQl2YWx1ZXM9Tm9uZQ0KCQkJCQkJCQlxdWFsaXR5PU5vbmUNCgkJCQkJCQkJaWYgJyJxdWFsaXR5IicgaW4gZm9ybWF0Tm9kZS5oZWFkZXI6dmFsdWVzPXlzLnZhbHVlcyhmb3JtYXROb2RlLmhlYWRlciwnOicpDQoJCQkJCQkJCWlmICcicXVhbGl0eSInIGluIGZvcm1hdE5vZGUuZGF0YTp2YWx1ZXM9eXMudmFsdWVzKGZvcm1hdE5vZGUuZGF0YSwnOicpDQoJCQkJCQkJCWlmIHZhbHVlczpxdWFsaXR5PXlzLmdldFZhbHVlKHZhbHVlcywnInF1YWxpdHkiJywnaScpDQoJCQkJCQkJCXdyaXRlKGxvZyxbJ3F1YWxpdHk6JyxxdWFsaXR5XSwxMikJCQkJCQkJCQ0KCQkJCQkJCQl2YWx1ZXM9Tm9uZQ0KCQkJCQkJCQl1cmw9Tm9uZQ0KCQkJCQkJCQlpZiAnInVybCInIGluIGZvcm1hdE5vZGUuaGVhZGVyOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5oZWFkZXIsJzonKQ0KCQkJCQkJCQlpZiAnInVybCInIGluIGZvcm1hdE5vZGUuZGF0YTp2YWx1ZXM9eXMudmFsdWVzKGZvcm1hdE5vZGUuZGF0YSwnOicpDQoJCQkJCQkJCWlmIHZhbHVlczp1cmw9eXMuZ2V0VmFsdWUodmFsdWVzLCcidXJsIicsJyIiJykJCQkJCQkJCQ0KCQkJCQkJCQkjd3JpdGUobG9nLFsndXJsOicsdXJsXSwxMikNCgkJCQkJCQkJaWYgbm90IHVybDoNCgkJCQkJCQkJCWlmICcidXJsIicgaW4gZm9ybWF0Tm9kZS5wYXJlbnQuaGVhZGVyOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5wYXJlbnQuaGVhZGVyLCc6JykNCgkJCQkJCQkJCWlmICcidXJsIicgaW4gZm9ybWF0Tm9kZS5wYXJlbnQuZGF0YTp2YWx1ZXM9eXMudmFsdWVzKGZvcm1hdE5vZGUucGFyZW50LmRhdGEsJzonKQ0KCQkJCQkJCQkJaWYgdmFsdWVzOnVybD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1cmwiJywnIiInKQkNCgkJCQkJCQkJaWYgdXJsOg0KCQkJCQkJCQkJYmFzZW5hbWU9b3MucGF0aC5iYXNlbmFtZSh1cmwpCQkJDQoJCQkJCQkJCQlpZiAnLmpwZWcnIGluIGJhc2VuYW1lOnBhdGg9c3lzLmRpcitvcy5zZXArb3MucGF0aC5iYXNlbmFtZSh1cmwpKycuanBnJw0KCQkJCQkJCQkJZWxzZTpwYXRoPXN5cy5kaXIrb3Muc2VwK29zLnBhdGguYmFzZW5hbWUodXJsKQ0KCQkJCQkJCQkJZXhpc3RzPW9zLnBhdGguZXhpc3RzKHBhdGgpCQkJCQkJCQkNCgkJCQkJCQkJCXdyaXRlKGxvZyxbJ3BhdGg6JyxwYXRoLGV4aXN0c10sMTIpDQoJCQkJCQkJCQkNCgkJCQkJCQkJCWlmIGZvcm1hdCBub3QgaW4gSU1BR0VTW3VpZF0ua2V5cygpOg0KCQkJCQkJCQkJCXByaW50ICdOT1dZIEZPUk1BVDonLGZvcm1hdA0KCQkJCQkJCQkJCUlNQUdFU1t1aWRdW2Zvcm1hdF09W3BhdGgsZXhpc3RzLHF1YWxpdHldDQoJCQkJCQkJCQllbHNlOg0KCQkJCQkJCQkJCWlmIHF1YWxpdHkgYW5kIGZvcm1hdDoNCgkJCQkJCQkJCQkJaWYgcXVhbGl0eTw9SU1BR0VTW3VpZF1bZm9ybWF0XVsyXSBhbmQgZXhpc3RzPT1UcnVlOg0KCQkJCQkJCQkJCQkJSU1BR0VTW3VpZF1bZm9ybWF0XT1bcGF0aCxleGlzdHMscXVhbGl0eV0NCgkJCQkJCQkJCQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQ0KCQkJCQkJCQ0KCQkNCgkJCQkJCQ0KCQkJCQ0KCQkJDQoJYWxsSW1hZ2VQYXRocz1bXQkJCQ0KCQkJCQkJDQoJDQoJdXNlZEltYWdlUGF0aHM9W10NCglmb3Iga2V5IGluIElNQUdFUzoNCgkJI3dyaXRlKGxvZyxba2V5XSwwKQ0KCQlmb3IgaXRlbSBpbiBJTUFHRVNba2V5XToNCgkJCSN3cml0ZShsb2csW2l0ZW0sJzonLElNQUdFU1trZXldW2l0ZW1dXSw0KQ0KCQkJaWYgSU1BR0VTW2tleV1baXRlbV1bMF06DQoJCQkJaWYgSU1BR0VTW2tleV1baXRlbV1bMF0gbm90IGluIHVzZWRJbWFnZVBhdGhzOg0KCQkJCQl1c2VkSW1hZ2VQYXRocy5hcHBlbmQoSU1BR0VTW2tleV1baXRlbV1bMF0pDQoJDQoJZm9yIGltYWdlIGluIGFsbEltYWdlUGF0aHM6DQoJCWlmIGltYWdlIG5vdCBpbiB1c2VkSW1hZ2VQYXRoczoNCgkJCWlmIG9zLnBhdGguZXhpc3RzKGltYWdlKT09VHJ1ZToNCgkJCQlwcmludCAndXN1d2FtOicsaW1hZ2UNCgkJCQkjb3MucmVtb3ZlKGltYWdlKQ0KCQ0KCW1hdGVyaWFscz15cy5nZXQoeXMucm9vdCwnIm1hdGVyaWFscyInKQ0KCWlmIG1hdGVyaWFsczoNCgkJZm9yIGEgaW4gbWF0ZXJpYWxzOg0KCQkJZm9yIGIgaW4gYS5jaGlsZHJlbjoNCgkJCQltYXROYW1lPU5vbmUJDQoJCQkJaWYgJyJuYW1lIicgaW4gYi5kYXRhOg0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJCQkJCW1hdE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCcibmFtZSInLCciIicpLnJlcGxhY2UoJzonLCcnKQ0KCQkJCQltYXROYW1lPW1hdE5hbWUucmVwbGFjZSgnOicsJycpDQoJCQkJCWlmICdcXCcgaW4gbWF0TmFtZTptYXROYW1lPW1hdE5hbWUuc3BsaXQoJ1xcJylbMF0NCgkJCQkJTUFURVJJQUxTW21hdE5hbWVdPXt9DQoJCQkJZWxzZToJDQoJCQkJCWZvciBjIGluIGIuY2hpbGRyZW46CQkNCgkJCQkJCWlmICcibmFtZSInIGluIGMuaGVhZGVyOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoYy5oZWFkZXIsJzonKQ0KCQkJCQkJCW1hdE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCcibmFtZSInLCciIicpDQoJCQkJCQkJTUFURVJJQUxTW21hdE5hbWVdPXt9DQoJCQkJI3ByaW50IG1hdE5hbWUNCgkJCQl3cml0ZShsb2csW21hdE5hbWVdLDApDQoJCQkJaWYJbWF0TmFtZToNCgkJCQkJI21hdE5hbWU9bWF0TmFtZS5yZXBsYWNlKCc6JywnJykNCgkJCQkJI2lmICdcXCcgaW4gbWF0TmFtZTptYXROYW1lPW1hdE5hbWUuc3BsaXQoJ1xcJylbMF0NCgkJCQkJY2hhbm5lbHM9eXMuZ2V0KGIsJyJjaGFubmVscyInKQ0KCQkJCQlpZiBjaGFubmVsczoNCgkJCQkJCWZvciBjIGluIGNoYW5uZWxzWzBdLmNoaWxkcmVuOgkJCQkJDQoJCQkJCQkJTUFURVJJQUxTW21hdE5hbWVdW2MuaGVhZGVyLnNwbGl0KCciJylbMV1dPVsnJyxbXSxbXV0NCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGMuZGF0YSwnOicpDQoJCQkJCQkJZW5hYmxlPXlzLmdldFZhbHVlKHZhbHVlcywnImVuYWJsZSInLCdzJykNCgkJCQkJCQlpZiBlbmFibGU6DQoJCQkJCQkJCWlmIGVuYWJsZT09J3RydWUnOg0KCQkJCQkJCQkJZm9yIGQgaW4gYy5jaGlsZHJlbjoNCgkJCQkJCQkJCQlkdmFsdWVzPXlzLnZhbHVlcyhkLmhlYWRlciwnOicpDQoJCQkJCQkJCQkJI3ByaW50IGR2YWx1ZXMNCgkJCQkJCQkJCQlpZiAnInRleHR1cmUiJyBpbiBkLmhlYWRlcjoNCgkJCQkJCQkJCQkJaWYgJyJ1aWQiJyBpbiBkLmRhdGE6DQoJCQkJCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGQuZGF0YSwnOicpDQoJCQkJCQkJCQkJCQl1aWQ9eXMuZ2V0VmFsdWUodmFsdWVzLCcidWlkIicsJyIiJykNCgkJCQkJCQkJCQkJCXdyaXRlKGxvZyxbdWlkXSw0KQ0KCQkJCQkJCQkJCQkJaWYgdWlkIGluIElNQUdFUy5rZXlzKCk6DQoJCQkJCQkJCQkJCQkJZm9yIGZvcm1hdCBpbiBJTUFHRVNbdWlkXToNCgkJCQkJCQkJCQkJCQkJd3JpdGUobG9nLFtmb3JtYXQsSU1BR0VTW3VpZF1bZm9ybWF0XV0sOCkNCgkJCQkJCQkJCQkJCQkJcGFzcw0KCQkJCQkJCQkJCQkJZWxzZToNCgkJCQkJCQkJCQkJCQl3cml0ZShsb2csWydNSVNTSU5HOicsdWlkXSw4KQ0KCQkJCQkJCQkJCQkJCXBhc3MNCgkJCQkJCQkJCQkJCQkNCgkJCQkJCQkJCQkJCU1BVEVSSUFMU1ttYXROYW1lXVtjLmhlYWRlci5zcGxpdCgnIicpWzFdXT1bJ3RleHR1cmUnLHVpZF0NCgkJCQkJCQkJCQkJCXVpZD1NQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV1bMV0NCgkJCQkJCQkJCQkJCSNwcmludCBJTUFHRVNbdWlkXQ0KCQkJCQkJCQkJCWlmICciY29sb3IiJyBpbiBkLmhlYWRlcjoNCgkJCQkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhkLmRhdGEsJ2YnKQ0KCQkJCQkJCQkJCQlNQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV09Wydjb2xvcicsdmFsdWVzXQ0KCQkJCQkJCWVsc2U6DQoJCQkJCQkJCQlmb3IgZCBpbiBjLmNoaWxkcmVuOg0KCQkJCQkJCQkJDQoJCQkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhkLmhlYWRlciwnOicpDQoJCQkJCQkJCQkJZW5hYmxlPXlzLmdldFZhbHVlKHZhbHVlcywnImVuYWJsZSInLCdzJykNCgkJCQkJCQkJCQlpZiBlbmFibGU6DQoJCQkJCQkJCQkNCgkJCQkJCQkJCQkJaWYgZW5hYmxlPT0ndHJ1ZSc6DQoJCQkJCQkJCQkJCQkNCgkJCQkJCQkJCQkJCQlkdmFsdWVzPXlzLnZhbHVlcyhkLmhlYWRlciwnOicpDQoJCQkJCQkJCQkJCQkJI3ByaW50IGR2YWx1ZXMNCgkJCQkJCQkJCQkJCQlpZiAnInRleHR1cmUiJyBpbiBkLmhlYWRlcjoNCgkJCQkJCQkJCQkJCQkJaWYgJyJ1aWQiJyBpbiBkLmRhdGE6DQoJCQkJCQkJCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGQuZGF0YSwnOicpDQoJCQkJCQkJCQkJCQkJCQl1aWQ9eXMuZ2V0VmFsdWUodmFsdWVzLCcidWlkIicsJyIiJykNCgkJCQkJCQkJCQkJCQkJCXdyaXRlKGxvZyxbdWlkXSw0KQ0KCQkJCQkJCQkJCQkJCQkJaWYgdWlkIGluIElNQUdFUy5rZXlzKCk6DQoJCQkJCQkJCQkJCQkJCQkJZm9yIGZvcm1hdCBpbiBJTUFHRVNbdWlkXToNCgkJCQkJCQkJCQkJCQkJCQkJd3JpdGUobG9nLFtmb3JtYXQsSU1BR0VTW3VpZF1bZm9ybWF0XSxlbmFibGVdLDgpDQoJCQkJCQkJCQkJCQkJCQkJCXBhc3MNCgkJCQkJCQkJCQkJCQkJCWVsc2U6DQoJCQkJCQkJCQkJCQkJCQkJd3JpdGUobG9nLFsnTUlTU0lORzonLHVpZF0sOCkNCgkJCQkJCQkJCQkJCQkJCQlwYXNzDQoJCQkJCQkJCQkJCQkJCQkJDQoJCQkJCQkJCQkJCQkJCQlNQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV09Wyd0ZXh0dXJlJyx1aWRdDQoJCQkJCQkJCQkJCQkJCQl1aWQ9TUFURVJJQUxTW21hdE5hbWVdW2MuaGVhZGVyLnNwbGl0KCciJylbMV1dWzFdDQoJCQkJCQkJCQkJCQkJCQkjcHJpbnQgSU1BR0VTW3VpZF0NCgkJCQkJCQkJCQkJCQlpZiAnImNvbG9yIicgaW4gZC5oZWFkZXI6DQoJCQkJCQkJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoZC5kYXRhLCdmJykNCgkJCQkJCQkJCQkJCQkJTUFURVJJQUxTW21hdE5hbWVdW2MuaGVhZGVyLnNwbGl0KCciJylbMV1dPVsnY29sb3InLHZhbHVlc10NCgkJCQkJCQkJDQoNCg0KZGVmIGFjdGlvblBhcnNlcihmaWxlbmFtZSxnKToNCglhY3Rpb249QWN0aW9uKCkNCglhY3Rpb24uQk9ORVNQQUNFPVRydWUNCglhY3Rpb24uQk9ORVNPUlQ9VHJ1ZQ0KCXdoaWxlKFRydWUpOg0KCQlpZiBnLnRlbGwoKT49Zy5maWxlU2l6ZSgpOmJyZWFrDQoJCWJvbmU9QWN0aW9uQm9uZSgpDQoJCWFjdGlvbi5ib25lTGlzdC5hcHBlbmQoYm9uZSkNCgkJYm9uZS5uYW1lPWcuZmluZCgnXHgwMCcpDQoJCXR5cGU9Zy5maW5kKCdceDAwJykNCgkJI3ByaW50IGJvbmUubmFtZSx0eXBlLGcudGVsbCgpDQoJCWlmIHR5cGU9PSdzaXplJzoNCgkJCWNvdW50PWcuaSgxKVswXQ0KCQkJI3ByaW50IGNvdW50DQoJCQlmb3IgbSBpbiBzYWZlKGNvdW50KToNCgkJCQltYXRyaXg9VmVjdG9yU2NhbGVNYXRyaXgoZy5mKDMpKQ0KCQkJCWJvbmUuc2l6ZUtleUxpc3QuYXBwZW5kKG1hdHJpeCkNCgkJCWNvdW50PWcuaSgxKVswXQ0KCQkJI3ByaW50IGNvdW50DQoJCQlmb3IgbSBpbiBzYWZlKGNvdW50KToNCgkJCQlmcmFtZT1pbnQoZy5mKDEpWzBdKjMzKQ0KCQkJCWJvbmUuc2l6ZUZyYW1lTGlzdC5hcHBlbmQoZnJhbWUpDQoJCWlmIHR5cGU9PSd0cmFuc2xhdGUnOg0KCQkJY291bnQ9Zy5pKDEpWzBdDQoJCQkjcHJpbnQgY291bnQNCgkJCWZvciBtIGluIHNhZmUoY291bnQpOg0KCQkJCW1hdHJpeD1WZWN0b3JNYXRyaXgoZy5mKDMpKQ0KCQkJCWJvbmUucG9zS2V5TGlzdC5hcHBlbmQobWF0cml4KQ0KCQkJY291bnQ9Zy5pKDEpWzBdDQoJCQkjcHJpbnQgY291bnQNCgkJCWZvciBtIGluIHNhZmUoY291bnQpOg0KCQkJCWZyYW1lPWludChnLmYoMSlbMF0qMzMpDQoJCQkJYm9uZS5wb3NGcmFtZUxpc3QuYXBwZW5kKGZyYW1lKQ0KCQlpZiB0eXBlPT0ncXVhdGVybmlvbic6DQoJCQljb3VudD1nLmkoMSlbMF0NCgkJCSNwcmludCBjb3VudA0KCQkJZm9yIG0gaW4gc2FmZShjb3VudCk6DQoJCQkJcXVhdD1RdWF0ZXJuaW9uKGcuZig0KSkNCgkJCQltYXRyaXg9UXVhdE1hdHJpeChxdWF0KS5yZXNpemU0eDQoKQ0KCQkJCWJvbmUucm90S2V5TGlzdC5hcHBlbmQobWF0cml4KQ0KCQkJY291bnQ9Zy5pKDEpWzBdDQoJCQkjcHJpbnQgY291bnQNCgkJCWZvciBtIGluIHNhZmUoY291bnQpOg0KCQkJCWZyYW1lPWludChnLmYoMSlbMF0qMzMpDQoJCQkJYm9uZS5yb3RGcmFtZUxpc3QuYXBwZW5kKGZyYW1lKQ0KCWFjdGlvbi5kcmF3KCkNCglhY3Rpb24uc2V0Q29udGV4dCgpCQ0KCQ0KCQ0KCQ0KZGVmIGdldENhbm9uaWNhbChmaWxlbmFtZSk6DQoJZmlsZT1vcGVuKGZpbGVuYW1lLCdyJykNCglkYXRhPWZpbGUucmVhZCgpDQoJI3ByaW50IGRhdGENCgljYW5vbmljYWw9Tm9uZQ0KCWlmICciY2Fub25pY2FsIicgaW4gZGF0YToNCgkJY2Fub25pY2FsPWRhdGEuc3BsaXQoJyJjYW5vbmljYWwiJylbMV0uc3BsaXQoJyInKVsxXS5zcGxpdCgnLycpWzRdDQoJCSMoJzxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3NrZXRjaGZhYi5jb20vM2QtbW9kZWxzLycpWzFdLnNwbGl0KCciPicpWzBdDQoJCWlmICItIiBpbiBjYW5vbmljYWw6DQoJCQljYW5vbmljYWw9Y2Fub25pY2FsLnNwbGl0KCItIilbLTFdDQoJI2lmIAkJDQoJZmlsZS5jbG9zZSgpCQ0KCXJldHVybiBjYW5vbmljYWwNCgkJCQkJCQkJCQkNCmRlZiBQYXJzZXIocGF0aCk6DQoJZ2xvYmFsIHN5cyxNQVRFUklBTFMsSU1BR0VTLExBU1ROT0RFTkFNRSxsb2csc2tpcGRlY29kZSxmaWxlbmFtZQ0KCWxvZz1vcGVuKCdsb2cudHh0JywndycpDQoJTEFTVE5PREVOQU1FPU5vbmUNCglNQVRFUklBTFM9e30NCglJTUFHRVM9e30NCgkNCgkNCglmaWxlbmFtZT1wYXRoDQoJc3lzPVN5cyhmaWxlbmFtZSkNCglleHQ9ZmlsZW5hbWUuc3BsaXQoJy4nKVstMV0ubG93ZXIoKQ0KCWlmIGV4dD09J2d6JzoNCgkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzJw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2cpPT1GYWxzZToNCgkJCWNtZD1DbWQoKQ0KCQkJY21kLmlucHV0PWZpbGVuYW1lDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluLmd6Jw0KCQkJaWYgb3MucGF0aC5leGlzdHMobW9kZWwpPT1UcnVlOg0KCQkJCWNtZD1DbWQoKQ0KCQkJCWNtZC5pbnB1dD1tb2RlbA0KCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCWNtZC5ydW4oKQ0KCQkJb3NnUGFyc2VyKGZpbGVuYW1lLnNwbGl0KCcuZ3onKVswXSkNCgkJDQoJaWYgZXh0PT0nb3NnanMnOg0KCQlvc2dQYXJzZXIoZmlsZW5hbWUpDQoJaWYgZXh0PT0ndHh0JzoNCgkJb3NnUGFyc2VyKGZpbGVuYW1lKQ0KCWlmIGV4dCBpbiBbJ2h0bScsJ2h0bWwnXToNCgkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzLmd6Jw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2cpPT1UcnVlOg0KCQkJY21kPUNtZCgpDQoJCQljbWQuaW5wdXQ9b3NnDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluLmd6Jw0KCQllbHNlOg0KCQkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzJw0KCQltb2RlbD1zeXMuZGlyK29zLnNlcCsnbW9kZWxfZmlsZS5iaW4uZ3onDQoJCWlmIG9zLnBhdGguZXhpc3RzKG1vZGVsKT09VHJ1ZToNCgkJCWNtZD1DbWQoKQ0KCQkJY21kLmlucHV0PW1vZGVsDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQllbHNlOg0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluJw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhtb2RlbCk6DQoJCQ0KCQkJcmVzdWx0PTANCgkJCSNyZXN1bHQ9QmxlbmRlci5EcmF3LlB1cE1lbnUoIlNrZXRjaGZhYiBWaWV3ZXIgPyV0fFllc3xObyIpCQ0KCQkJaWYgcmVzdWx0PT0xOg0KCQkJCWNhbm9uaWNhbD1nZXRDYW5vbmljYWwoZmlsZW5hbWUpDQoJCQkJY2hyb21lRXhlPSJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSINCgkJCQkjb3Muc3lzdGVtKGNocm9tZUV4ZSkNCgkJCQkjc3VicHJvY2Vzcy5Qb3BlbihbY2hyb21lRXhlLGZpbGVuYW1lXSkud2FpdCgpDQoJCQkJI3R4dD1odG0xK2h0bTIraHRtMw0KCQkJCXR4dD1vcGVuKCJza2V0Y2hmYWIuaHRtbCIsInciKQ0KCQkJCXR4dC53cml0ZShodG0xLnJlcGxhY2UoIiMiLCIiKSkNCgkJCQlpZiBjYW5vbmljYWwgaXMgbm90IE5vbmU6DQoJCQkJDQoJCQkJCXR4dC53cml0ZShjYW5vbmljYWwpDQoJCQkJZWxzZToJDQoJCQkJCSN0eHQud3JpdGUoaHRtMikNCgkJCQkJdHh0LndyaXRlKG9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkuc3BsaXQob3Muc2VwKVstMV0pDQoJCQkJdHh0LndyaXRlKGh0bTMpDQoJCQkJdHh0LmNsb3NlKCkNCgkJCQlzdWJwcm9jZXNzLlBvcGVuKFtjaHJvbWVFeGUsYmxlbmREaXIrb3Muc2VwKyJza2V0Y2hmYWIuaHRtbCJdKSMud2FpdCgpDQoJCQllbHNlOgkNCgkJCQ0KCQkJDQoJCQkJcmVzdWx0PTENCgkJCQlmaWxlU2l6ZT1vcy5wYXRoLmdldHNpemUobW9kZWwpDQoJCQkJI3Jlc3VsdD1CbGVuZGVyLkRyYXcuUHVwTWVudSgiaW1wb3J0ICIrc3RyKHJvdW5kKGZpbGVTaXplLzEwMDAwMDAuMCwxKSkrIiBNYiA/JXR8WWVzfE5vIikNCgkJCQkNCgkJCQlodG1QYXJzZXIoZmlsZW5hbWUpDQoJCQkJaWYgcmVzdWx0PT0xOgkNCgkJCQkJc2tpcGRlY29kZT0wDQoJCQkJCQ0KCQkJCQlpbmRleFJlc3VsdD0wDQoJCQkJCSNyZXN1bHQ9QmxlbmRlci5EcmF3LlB1cE1lbnUoImluZGljZSBwcm9ibGVtIisiID8ldHxZZXN8Tm8iKQ0KCQkJCQlpZiBpbmRleFJlc3VsdD09MToNCgkJCQkJCXNraXBkZWNvZGU9MQ0KCQkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJb3NnUGF0aD1zeXMuZGlyK29zLnNlcCsnZmlsZS5vc2dqcycNCgkJCQkJaWYgb3MucGF0aC5leGlzdHMob3NnUGF0aCk9PVRydWU6DQoJCQkJCQlvc2dQYXJzZXIob3NnUGF0aCkNCgkJCQkJCXBhc3MNCgkJCQkJZWxzZToNCgkJCQkJCW9zZ1BhdGg9c3lzLmRpcitvcy5zZXArJ2ZpbGUub3NnanMnDQoJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2dQYXRoKT09VHJ1ZToNCgkJCQkJCQlvc2dQYXJzZXIob3NnUGF0aCkNCgkJCQkJCQlwYXNzCQ0KCQkJCQ0KCWlmIGV4dD09J2FjdGlvbic6DQoJCWZpbGU9b3BlbihmaWxlbmFtZSwncmInKQ0KCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQlhY3Rpb25QYXJzZXIoZmlsZW5hbWUsZykNCgkJZmlsZS5jbG9zZSgpDQoJbG9nLmNsb3NlKCkJDQoJCQ0KbW9kZWxJRCA9IDANClBhcnNlcignLi97dGVtcFBhdGh9L2R1bW15Lmh0bWwnKQ=="));
			blenderScript = blenderScript.Replace("{tempPath}", tempDir);
			if (indexFix)
			{
				blenderScript = blenderScript.Replace("indexResult=0", "indexResult=1");
			}
			if (bindPose == 0)
			{
				blenderScript = blenderScript.Replace("bindPose(bindskeleton.object,skeleton.object,mesh.object)", "print ' '");
			}
			return blenderScript;
		}

		public static string Animated(bool indexFix = false, string tempDir = "_sfTemp")
		{
			string blenderScript = Encoding.UTF8.GetString(Convert.FromBase64String("aW1wb3J0IG5ld0dhbWVMaWINCmZyb20gbmV3R2FtZUxpYiBpbXBvcnQgKg0KaW1wb3J0IEJsZW5kZXINCg0KaW1wb3J0IGFycmF5DQppbXBvcnQgc3VicHJvY2Vzcw0KDQppbXBvcnQgc3lzIGFzIHN5czINCg0KaHRtMT0iIiINCjxoZWFkPg0KICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9zdGF0aWMuc2tldGNoZmFiLmNvbS9hcGkvc2tldGNoZmFiLXZpZXdlci0xLjMuMC5qcyI+PC9zY3JpcHQ+DQogIA0KICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3NoYWRlcmJ5dGVzL1NrZXRjaGZhYi1WaWV3ZXItQVBJLVV0aWxpdHlAdjIuMC4wLjcvU2tldGNoZmFiQVBJVXRpbGl0eS5qcyI+PC9zY3JpcHQ+DQogICANCjwvaGVhZD4NCg0KPGJvZHk+DQogIDxkaXYgY2xhc3M9ImNlbnRlci1kaXYiPg0KCTxpZnJhbWUgaWQ9ImFwaS1mcmFtZSIgd2lkdGg9IjEwMDAiIGhlaWdodD0iNTUwIgkgYWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbj0idHJ1ZSIgd2Via2l0YWxsb3dmdWxsc2NyZWVuPSJ0cnVlIj48L2lmcmFtZT4NCiAgPC9kaXY+DQogIA0KICA8c2NyaXB0Pg0KCSAgZnVuY3Rpb24gb25Ta2V0Y2hmYWJVdGlsaXR5UmVhZHkoKXsNCgkJIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5yZW1vdmVFdmVudExpc3RlbmVyKHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5FVkVOVF9JTklUSUFMSVpFRCwgb25Ta2V0Y2hmYWJVdGlsaXR5UmVhZHkpOw0KCQkgLy9zb21lIGNvZGUgaGVyZS4uDQoJICB9Ow0KCSAgdmFyIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZSA9IG5ldyBTa2V0Y2hmYWJBUElVdGlsaXR5KCIjIyMiIiINCmh0bTI9IiIiYWY1MjhlM2RmNWY3NjZjYTAxMmY1ZTA2NWM3Y2I4MTIiIiINCmh0bTM9IiIiIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwaS1mcmFtZSIpLCB7ImF1dG9zdGFydCI6IDEgfSk7DQoJICBza2V0Y2hmYWJBUElVdGlsaXR5SW5zdGFuY2UuYWRkRXZlbnRMaXN0ZW5lcihza2V0Y2hmYWJBUElVdGlsaXR5SW5zdGFuY2UuRVZFTlRfSU5JVElBTElaRUQsIG9uU2tldGNoZmFiVXRpbGl0eVJlYWR5KTsNCgkgIHNrZXRjaGZhYkFQSVV0aWxpdHlJbnN0YW5jZS5jcmVhdGUoKTsNCiAgIDwvc2NyaXB0Pg0KICANCjwvYm9keT4NCiIiIg0KDQoNCgkNCmNsYXNzIEJpbmFyeVJlYWRlcihmaWxlKToNCgkiIiJnZW5lcmFsIEJpbmFyeVJlYWRlcg0KCSIiIg0KCWRlZiBfX2luaXRfXyhzZWxmLCBpbnB1dEZpbGUpOg0KCQlzZWxmLmlucHV0RmlsZT1pbnB1dEZpbGUNCgkJc2VsZi5lbmRpYW49JzwnDQoJCXNlbGYuZGVidWc9RmFsc2UNCgkJc2VsZi5zdHJlYW09e30NCgkJc2VsZi5sb2dmaWxlPU5vbmUNCgkJc2VsZi5sb2c9RmFsc2UNCgkJc2VsZi5kaXJuYW1lPUJsZW5kZXIuc3lzLmRpcm5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkNCgkJc2VsZi5iYXNlbmFtZT1CbGVuZGVyLnN5cy5iYXNlbmFtZShzZWxmLmlucHV0RmlsZS5uYW1lKS5zcGxpdCgnLicpWzBdDQoJCXNlbGYuZXh0PUJsZW5kZXIuc3lzLmJhc2VuYW1lKHNlbGYuaW5wdXRGaWxlLm5hbWUpLnNwbGl0KCcuJylbLTFdDQoJCXNlbGYueG9yS2V5PU5vbmUNCgkJc2VsZi54b3JPZmZzZXQ9MA0KCQlzZWxmLnhvckRhdGE9JycNCgkJc2VsZi5sb2dza2lwPUZhbHNlDQoJCQ0KCWRlZiBjbG9zZShzZWxmKToNCgkJc2VsZi5pbnB1dEZpbGUuY2xvc2UoKQ0KCQkNCglkZWYgWE9SKHNlbGYsZGF0YSk6DQoJCQlzZWxmLnhvckRhdGE9JycNCgkJCWZvciBtIGluIHJhbmdlKGxlbihkYXRhKSk6DQoJCQkJY2g9b3JkKAljaHIoZGF0YVttXSBeIHNlbGYueG9yS2V5W3NlbGYueG9yT2Zmc2V0XSkJKQ0KCQkJCXNlbGYueG9yRGF0YSs9c3RydWN0LnBhY2soJ0InLGNoKQ0KCQkJCWlmIHNlbGYueG9yT2Zmc2V0PT1sZW4oc2VsZi54b3JLZXkpLTE6DQoJCQkJCXNlbGYueG9yT2Zmc2V0PTANCgkJCQllbHNlOg0KCQkJCQlzZWxmLnhvck9mZnNldCs9MQkNCgkJDQoJCQ0KCWRlZiBsb2dPcGVuKHNlbGYpOgkNCgkJbG9nRGlyPSdsb2cnDQoJCWlmIG9zLnBhdGguZXhpc3RzKGxvZ0Rpcik9PUZhbHNlOm9zLm1ha2VkaXJzKGxvZ0RpcikNCgkJc2VsZi5sb2c9VHJ1ZQ0KCQlzZWxmLmxvZ2ZpbGU9b3Blbihsb2dEaXIrb3Muc2VwK29zLnBhdGguYmFzZW5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkrJy5sb2cnLCd3JykNCglkZWYgbG9nQ2xvc2Uoc2VsZik6DQoJCXNlbGYubG9nPUZhbHNlDQoJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZToNCgkJCXNlbGYubG9nZmlsZS5jbG9zZSgpDQoJZGVmIGxvZ1dyaXRlKHNlbGYsZGF0YSk6DQoJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZToNCgkJCXNlbGYubG9nZmlsZS53cml0ZShzdHIoZGF0YSkrJ1xuJykNCgkJZWxzZToNCgkJCXByaW50ICdXQVJOSU5HOiBubyBsb2cnDQoJCQkNCglkZWYgZGlybmFtZShzZWxmKToNCgkJcmV0dXJuIEJsZW5kZXIuc3lzLmRpcm5hbWUoc2VsZi5pbnB1dEZpbGUubmFtZSkNCglkZWYgYmFzZW5hbWUoc2VsZik6DQoJCXJldHVybiBCbGVuZGVyLnN5cy5iYXNlbmFtZShzZWxmLmlucHV0RmlsZS5uYW1lKS5zcGxpdCgnLicpWzBdDQoJZGVmIGV4dChzZWxmKToNCgkJcmV0dXJuIEJsZW5kZXIuc3lzLmJhc2VuYW1lKHNlbGYuaW5wdXRGaWxlLm5hbWUpLnNwbGl0KCcuJylbLTFdDQoJCQ0KCQkNCglkZWYgcShzZWxmLG4pOg0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidxJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qOCkpDQoJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQlwcmludCAncScsZGF0YQ0KCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQlyZXR1cm4gZGF0YQ0KCQkNCglkZWYgaShzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkjZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2knLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnaScpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionaScsc2VsZi54b3JEYXRhKQkNCgkJCQkJDQoJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCXByaW50ICdpJyxkYXRhDQoJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCQlyZXR1cm4gZGF0YQ0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJZm9yIG0gaW4gcmFuZ2UobGVuKG4pKToNCgkJCQlkYXRhPXN0cnVjdC5wYWNrKHNlbGYuZW5kaWFuKydpJyxuW21dKQ0KCQkJCXNlbGYuaW5wdXRGaWxlLndyaXRlKGRhdGEpDQoJDQoJZGVmIEkoc2VsZixuKToNCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ0knLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJZWxzZToNCgkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKjQqJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQobio0KSkNCgkJCXNlbGYuWE9SKGRhdGEpDQoJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionSScsc2VsZi54b3JEYXRhKQkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50ICdJJyxkYXRhDQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCXJldHVybiBkYXRhDQoJDQoJZGVmIEIoc2VsZixuKToNCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3JiJzoNCgkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4pKQ0KCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnQicpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionQicsc2VsZi5pbnB1dEZpbGUucmVhZChuKSkNCgkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidCJyxzZWxmLnhvckRhdGEpCQ0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnQicsZGF0YQ0KCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQkJcmV0dXJuIGRhdGENCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCWZvciBtIGluIHJhbmdlKGxlbihuKSk6DQoJCQkJZGF0YT1zdHJ1Y3QucGFjayhzZWxmLmVuZGlhbisnQicsblttXSkNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShkYXRhKQ0KCWRlZiBiKHNlbGYsbik6DQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6DQoJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionYicsc2VsZi5pbnB1dEZpbGUucmVhZChuKSkNCgkJCQlkYXRhID0gYXJyYXkuYXJyYXkoJ2InKQ0KCQkJCWRhdGEuZnJvbWZpbGUoc2VsZi5pbnB1dEZpbGUsIG4pDQoJCQkJaWYgc2VsZi5lbmRpYW4gPT0gIj4iOiBkYXRhLmJ5dGVzd2FwKCkNCgkJCWVsc2U6DQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2InLHNlbGYuaW5wdXRGaWxlLnJlYWQobikpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionYicsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2InLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2InLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgaChzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkjZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2gnLHNlbGYuaW5wdXRGaWxlLnJlYWQobioyKSkNCgkJCQkNCgkJCQlkYXRhID0gYXJyYXkuYXJyYXkoJ2gnKQ0KCQkJCWRhdGEuZnJvbWZpbGUoc2VsZi5pbnB1dEZpbGUsIG4pDQoJCQkJaWYgc2VsZi5lbmRpYW4gPT0gIj4iOiBkYXRhLmJ5dGVzd2FwKCkNCgkJCQkNCgkJCQkNCgkJCWVsc2U6DQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qMionQicsc2VsZi5pbnB1dEZpbGUucmVhZChuKjIpKQ0KCQkJCXNlbGYuWE9SKGRhdGEpDQoJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK24qJ2gnLHNlbGYueG9yRGF0YSkJDQoJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCXByaW50ICdoJyxkYXRhDQoJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGRhdGEpKydcbicpDQoJCQlyZXR1cm4gZGF0YQ0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJZm9yIG0gaW4gcmFuZ2UobGVuKG4pKToNCgkJCQlkYXRhPXN0cnVjdC5wYWNrKHNlbGYuZW5kaWFuKydoJyxuW21dKQ0KCQkJCXNlbGYuaW5wdXRGaWxlLndyaXRlKGRhdGEpDQoJZGVmIEgoc2VsZixuKToNCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3JiJzoNCgkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidIJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qMikpDQoJCQkJDQoJCQkJZGF0YSA9IGFycmF5LmFycmF5KCdIJykNCgkJCQlkYXRhLmZyb21maWxlKHNlbGYuaW5wdXRGaWxlLCBuKQ0KCQkJCWlmIHNlbGYuZW5kaWFuID09ICI+IjogZGF0YS5ieXRlc3dhcCgpDQoJCQkJDQoJCQkJDQoJCQllbHNlOg0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKjIqJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQobioyKSkNCgkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCWRhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidIJyxzZWxmLnhvckRhdGEpCQ0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnSCcsZGF0YQ0KCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihkYXRhKSsnXG4nKQ0KCQkJcmV0dXJuIGRhdGENCgkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCWZvciBtIGluIHJhbmdlKGxlbihuKSk6DQoJCQkJZGF0YT1zdHJ1Y3QucGFjayhzZWxmLmVuZGlhbisnSCcsblttXSkNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShkYXRhKQ0KCWRlZiBmKHNlbGYsbik6DQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6DQoJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBzZWxmLnhvcktleSBpcyBOb25lOg0KCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZicsc2VsZi5pbnB1dEZpbGUucmVhZChuKjQpKQ0KCQkJCQ0KCQkJCWRhdGEgPSBhcnJheS5hcnJheSgnZicpDQoJCQkJZGF0YS5mcm9tZmlsZShzZWxmLmlucHV0RmlsZSwgbikNCgkJCQlpZiBzZWxmLmVuZGlhbiA9PSAiPiI6IGRhdGEuYnl0ZXN3YXAoKQ0KCQkJCQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZicsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2YnLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2YnLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgZChzZWxmLG4pOg0KCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOg0KCQkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZCcsc2VsZi5pbnB1dEZpbGUucmVhZChuKjgpKQ0KCQkJZWxzZToNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbio0KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qOCkpDQoJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionZCcsc2VsZi54b3JEYXRhKQkNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ2QnLGRhdGENCgkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihvZmZzZXQpKycJJytzdHIoZGF0YSkrJ1xuJykNCgkJCXJldHVybiBkYXRhDQoJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSd3Yic6DQoJCQlmb3IgbSBpbiByYW5nZShsZW4obikpOg0KCQkJCWRhdGE9c3RydWN0LnBhY2soc2VsZi5lbmRpYW4rJ2QnLG5bbV0pDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUoZGF0YSkNCglkZWYgaGFsZihzZWxmLG4saD0naCcpOg0KCQlhcnJheSA9IFtdIA0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWZvciBpZCBpbiByYW5nZShuKTogDQoJCQkjYXJyYXkuYXBwZW5kKGNvbnZlcnRoYWxmMmZsb2F0KHN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ0gnLHNlbGYuaW5wdXRGaWxlLnJlYWQoMikpWzBdKSkNCgkJCWFycmF5LmFwcGVuZChjb252ZXJ0aGFsZjJmbG9hdChzdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK2gsc2VsZi5pbnB1dEZpbGUucmVhZCgyKSlbMF0pKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ2hhbGYnLGFycmF5DQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGFycmF5KSsnXG4nKQ0KCQlyZXR1cm4gYXJyYXkNCgkJDQoJZGVmIHNob3J0KHNlbGYsbixoPSdoJyxleHA9MTIpOg0KCQlhcnJheSA9IFtdIA0KCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCWZvciBpZCBpbiByYW5nZShuKTogDQoJCQlhcnJheS5hcHBlbmQoc3RydWN0LnVucGFjayhzZWxmLmVuZGlhbitoLHNlbGYuaW5wdXRGaWxlLnJlYWQoMikpWzBdKjIqKi1leHApDQoJCQkjYXJyYXkuYXBwZW5kKHNlbGYuSCgxKVswXSoyKiotZXhwKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ3Nob3J0JyxhcnJheQ0KCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3N0cihhcnJheSkrJ1xuJykNCgkJcmV0dXJuIGFycmF5DQoJCQ0KCWRlZiBpMTIoc2VsZixuKToNCgkJYXJyYXkgPSBbXSANCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlmb3IgaWQgaW4gcmFuZ2Uobik6IA0KCQkJaWYgc2VsZi5lbmRpYW49PSc+JzoNCgkJCQl2YXI9J1x4MDAnK3NlbGYuaW5wdXRGaWxlLnJlYWQoMykNCgkJCWlmIHNlbGYuZW5kaWFuPT0nPCc6DQoJCQkJdmFyPXNlbGYuaW5wdXRGaWxlLnJlYWQoMykrJ1x4MDAnDQoJCQlhcnJheS5hcHBlbmQoc3RydWN0LnVucGFjayhzZWxmLmVuZGlhbisnaScsdmFyKVswXSkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50IGFycmF5DQoJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrc3RyKGFycmF5KSsnXG4nKQ0KCQlyZXR1cm4gYXJyYXkNCgkJDQoJCQ0KCQkNCglkZWYgZmluZChzZWxmLHZhcik6IA0KCQlzdGFydD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJcz0nJw0KCQl3aGlsZShUcnVlKToNCgkJCWM9c2VsZi5pbnB1dEZpbGUucmVhZCgxKQ0KCQkJI3ByaW50IGMNCgkJCWlmIGM9PXZhclswXToNCgkJCQlpZiBsZW4odmFyKT4xOg0KCQkJCQlmb3IgbSBpbiByYW5nZSgxLGxlbih2YXIpKToNCgkJCQkJCWM9c2VsZi5pbnB1dEZpbGUucmVhZCgxKQ0KCQkJCQkJaWYgYyE9dmFyW21dOg0KCQkJCQkJCWJyZWFrDQoJCQkJCWlmIG09PWxlbih2YXIpLTE6DQoJCQkJCQlicmVhaw0KCQkJCWVsc2U6DQoJCQkJCWJyZWFrDQoJCQllbHNlOgkNCgkJCQlzKz1jCQ0KCQkJCQkJDQoJCQ0KCQkNCgkJDQoJCQ0KCQkjaWYgc2VsZi5sb2c9PVRydWU6DQoJCSMJaWYgc2VsZi5sb2dmaWxlIGlzIG5vdCBOb25lIGFuZCBzZWxmLmxvZ3NraXAgaXMgbm90IFRydWU6DQoJCSMJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKHN0YXJ0KSsnCScrcysnXG4nKQ0KCQlyZXR1cm4gcwkNCgkNCglkZWYgZmluZDEoc2VsZix2YXIsc2l6ZT05OTkpOiANCgkJDQoJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlzPScnDQoJCXdoaWxlKFRydWUpOg0KCQkJZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKHNpemUpDQoJCQlvZmY9ZGF0YS5maW5kKHZhcikNCgkJCSNwcmludCBvZmYNCgkJCWlmIG9mZj49MDoNCgkJCQlzKz1kYXRhWzpvZmZdDQoJCQkJc2VsZi5pbnB1dEZpbGUuc2VlayhzdGFydCtvZmYrbGVuKHZhcikpDQoJCQkJI3ByaW50ICd6bmFsZXppb25vJyx2YXIsJ29mZnNldD0nLHNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJCWJyZWFrDQoJCQllbHNlOg0KCQkJCXMrPWRhdGENCgkJCQlzdGFydCs9c2l6ZQ0KCQkJI3ByaW50IHNlbGYuaW5wdXRGaWxlLnRlbGwoKQksc2VsZi5maWxlU2l6ZSgpDQoJCQlpZiBzZWxmLmlucHV0RmlsZS50ZWxsKCk+PXNlbGYuZmlsZVNpemUoKTpicmVhawkNCgkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCXByaW50IHMNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihzdGFydCkrJwknK3MrJ1xuJykNCgkJcmV0dXJuIHMJDQoJCQ0KCWRlZiBmaW5kMTAoc2VsZix2YXIpOiANCgkJDQoJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlzPScnDQoJCWRhdGE9c2VsZi5pbnB1dEZpbGUucmVhZCgpDQoJCW9mZj1kYXRhLmZpbmQodmFyKQ0KCQlpZiBvZmY+PTA6DQoJCQlzKz1kYXRhWzpvZmZdDQoJCQlzZWxmLmlucHV0RmlsZS5zZWVrKHN0YXJ0K29mZitsZW4odmFyKSkNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUoJ29mZnNldCAnK3N0cihzdGFydCkrJwknK3MrJ1xuJykNCgkJcmV0dXJuIHMJDQoJDQoJZGVmIGZpbmRBbGwoc2VsZix2YXIsc2l6ZT0xMDApOiANCgkJbGlzdD1bXQ0KCQl3aGlsZShUcnVlKToNCgkJCXN0YXJ0PXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkJZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKHNpemUpDQoJCQlvZmY9ZGF0YS5maW5kKHZhcikNCgkJCSNwcmludCBvZmYsc2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQlpZiBvZmY+PTA6DQoJCQkJbGlzdC5hcHBlbmQoc3RhcnQrb2ZmKQ0KCQkJCSNwcmludCBzdGFydCtvZmYNCgkJCQlzZWxmLmlucHV0RmlsZS5zZWVrKHN0YXJ0K29mZitsZW4odmFyKSkNCgkJCQkjaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQkjCXByaW50IHN0YXJ0K29mZg0KCQkJZWxzZToNCgkJCQlzdGFydCs9c2l6ZQ0KCQkJCXNlbGYuaW5wdXRGaWxlLnNlZWsoc3RhcnQpDQoJCQlpZglzZWxmLmlucHV0RmlsZS50ZWxsKCk+c2VsZi5maWxlU2l6ZSgpOg0KCQkJCWJyZWFrDQoJCXJldHVybiBsaXN0CQ0KCQkNCgkJDQoJZGVmIGZpbmRjaGFyKHNlbGYsdmFyKToNCgkJb2Zmc2V0PXNlbGYuaW5wdXRGaWxlLmZpbmQodmFyKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgdmFyLCd6bmFsZXppb25vJyxvZmZzZXQNCgkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQlzZWxmLmxvZ2ZpbGUud3JpdGUodmFyKycgem5hbGV6aW9ubyAnK3N0cihvZmZzZXQpKydcbicpDQoJCXJldHVybiBvZmZzZXQJDQoJCQ0KCQkNCglkZWYgZmlsZVNpemUoc2VsZik6DQoJCWJhY2s9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsoMCwyKQ0KCQl0ZWxsPXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQkjc2VsZi5pbnB1dEZpbGUuc2VlaygwKQ0KCQlzZWxmLmlucHV0RmlsZS5zZWVrKGJhY2spDQoJCXJldHVybiB0ZWxsDQoJCQ0KCWRlZiBzZWVrKHNlbGYsb2ZmLGE9MCk6DQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsob2ZmLGEpDQoJDQoJZGVmIHNlZWtwYWQoc2VsZixwYWQsdHlwZT0wKToNCgkJJycnIDE2LWJ5dGUgY2h1bmsgYWxpZ25tZW50JycnDQoJCXNpemU9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCXNlZWsgPSAocGFkIC0gKHNpemUgJSBwYWQpKSAlIHBhZA0KCQlpZiB0eXBlPT0xOg0KCQkJaWYgc2Vlaz09MDoNCgkJCQlzZWVrKz1wYWQNCgkJc2VsZi5pbnB1dEZpbGUuc2VlayhzZWVrLCAxKQ0KCQkNCglkZWYgcmVhZChzZWxmLGNvdW50KToNCgkJYmFjaz1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCXJldHVybiBzZWxmLmlucHV0RmlsZS5yZWFkKGNvdW50KQ0KCQllbHNlOg0KCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuK2NvdW50KidCJyxzZWxmLmlucHV0RmlsZS5yZWFkKGNvdW50KSkNCgkJCXNlbGYuWE9SKGRhdGEpDQoJCQlyZXR1cm4gc2VsZi54b3JEYXRhDQoJCQkNCgkNCgkJDQoJZGVmIHdyaXRlKHNlbGYsc3RyaW5nKToNCgkJc2VsZi5pbnB1dEZpbGUud3JpdGUoc3RyaW5nKQ0KCQkNCglkZWYgdGVsbChzZWxmKToNCgkJdmFsPXNlbGYuaW5wdXRGaWxlLnRlbGwoKQ0KCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJcHJpbnQgJ2N1cnJlbnQgb2Zmc2V0IGlzJyx2YWwNCgkJcmV0dXJuIHZhbAkNCgkJDQoJZGVmIHdvcmQoc2VsZixsb25nKToNCgkJaWYgbG9uZzwxMDAwMDoNCgkJCWlmIHNlbGYuaW5wdXRGaWxlLm1vZGU9PSdyYic6IA0KCQkJCW9mZnNldD1zZWxmLmlucHV0RmlsZS50ZWxsKCkNCgkJCQlzPScnDQoJCQkJZm9yIGogaW4gcmFuZ2UoMCxsb25nKTogDQoJCQkJCQ0KCQkJCQkNCgkJCQkJaWYgc2VsZi54b3JLZXkgaXMgTm9uZToNCgkJCQkJCWxpdCA9ICBzdHJ1Y3QudW5wYWNrKCdjJyxzZWxmLmlucHV0RmlsZS5yZWFkKDEpKVswXQ0KCQkJCQkJI2RhdGE9c3RydWN0LnVucGFjayhzZWxmLmVuZGlhbituKidpJyxzZWxmLmlucHV0RmlsZS5yZWFkKG4qNCkpDQoJCQkJCWVsc2U6DQoJCQkJCQlkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ0InLHNlbGYuaW5wdXRGaWxlLnJlYWQoMSkpDQoJCQkJCQlzZWxmLlhPUihkYXRhKQ0KCQkJCQkJbGl0PXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rJ2MnLHNlbGYueG9yRGF0YSlbMF0NCgkJCQkJDQoJCQkJCQkjbGl0ID0Jc3RydWN0LnVucGFjaygnYycsc2VsZi5pbnB1dEZpbGUucmVhZCgxKSlbMF0NCgkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJaWYgb3JkKGxpdCkhPTA6DQoJCQkJCQlzKz1saXQNCgkJCQlpZiBzZWxmLmRlYnVnPT1UcnVlOg0KCQkJCQlwcmludCBzDQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCWlmIHNlbGYubG9nZmlsZSBpcyBub3QgTm9uZSBhbmQgc2VsZi5sb2dza2lwIGlzIG5vdCBUcnVlOg0KCQkJCQkJc2VsZi5sb2dmaWxlLndyaXRlKCdvZmZzZXQgJytzdHIob2Zmc2V0KSsnCScrcysnXG4nKQ0KCQkJCXJldHVybiBzDQoJCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0nd2InOg0KCQkJCSNkYXRhPXNlbGYuaW5wdXRGaWxlLnJlYWQobG9uZykNCgkJCQlzZWxmLmlucHV0RmlsZS53cml0ZShsb25nKQ0KCQkJI3JldHVybiAwCQ0KCQllbHNlOg0KCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQlwcmludCAnV0FSTklORzp0b28gbG9uZycNCgkJCSNyZXR1cm4gMQ0KCQkNCgkJDQoJCQ0KCWRlZiBzKHNlbGYsbG9uZyk6DQoJCWlmIGxvbmc8MTAwMDA6DQoJCQlpZiBzZWxmLmlucHV0RmlsZS5tb2RlPT0ncmInOiANCgkJCQlvZmZzZXQ9c2VsZi5pbnB1dEZpbGUudGVsbCgpDQoJCQkJcz0nJw0KCQkJCWZvciBqIGluIHJhbmdlKDAsbG9uZyk6IA0KCQkJCQkNCgkJCQkJDQoJCQkJCWlmIHNlbGYueG9yS2V5IGlzIE5vbmU6DQoJCQkJCQlsaXQgPSAgc3RydWN0LnVucGFjaygnYycsc2VsZi5pbnB1dEZpbGUucmVhZCgxKSlbMF0NCgkJCQkJCSNkYXRhPXN0cnVjdC51bnBhY2soc2VsZi5lbmRpYW4rbionaScsc2VsZi5pbnB1dEZpbGUucmVhZChuKjQpKQ0KCQkJCQllbHNlOg0KCQkJCQkJZGF0YT1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuKydCJyxzZWxmLmlucHV0RmlsZS5yZWFkKDEpKQ0KCQkJCQkJc2VsZi5YT1IoZGF0YSkNCgkJCQkJCWxpdD1zdHJ1Y3QudW5wYWNrKHNlbGYuZW5kaWFuKydjJyxzZWxmLnhvckRhdGEpWzBdDQoJCQkJCQ0KCQkJCQkJI2xpdCA9CXN0cnVjdC51bnBhY2soJ2MnLHNlbGYuaW5wdXRGaWxlLnJlYWQoMSkpWzBdDQoJCQkJCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCWlmIG9yZChsaXQpIT0wOg0KCQkJCQkJcys9bGl0DQoJCQkJaWYgc2VsZi5kZWJ1Zz09VHJ1ZToNCgkJCQkJcHJpbnQgcw0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQlpZiBzZWxmLmxvZ2ZpbGUgaXMgbm90IE5vbmUgYW5kIHNlbGYubG9nc2tpcCBpcyBub3QgVHJ1ZToNCgkJCQkJCXNlbGYubG9nZmlsZS53cml0ZSgnb2Zmc2V0ICcrc3RyKG9mZnNldCkrJwknK3MrJ1xuJykNCgkJCQlyZXR1cm4gcw0KCQkJaWYgc2VsZi5pbnB1dEZpbGUubW9kZT09J3diJzoNCgkJCQkjZGF0YT1zZWxmLmlucHV0RmlsZS5yZWFkKGxvbmcpDQoJCQkJc2VsZi5pbnB1dEZpbGUud3JpdGUobG9uZykNCgkJCSNyZXR1cm4gMAkNCgkJZWxzZToNCgkJCWlmIHNlbGYuZGVidWc9PVRydWU6DQoJCQkJcHJpbnQgJ1dBUk5JTkc6dG9vIGxvbmcnDQoJCQkjcmV0dXJuIDENCgkJDQoJCQ0KCWRlZiBTdHJlYW0oc2VsZixzdHJlYW1fbmFtZSxlbGVtZW50X2NvdW50LGVsZW1lbnRfc2l6ZSk6DQoJCXNlbGYuaW5wdXRGaWxlLnNlZWsoZWxlbWVudF9jb3VudCplbGVtZW50X3NpemUsMSkNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydvZmZzZXQnXT1vZmZzZXQNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydlbGVtZW50X2NvdW50J109ZWxlbWVudF9jb3VudAkNCgkJc2VsZi5zdHJlYW1bc3RyZWFtX25hbWVdWydlbGVtZW50X3NpemUnXT1lbGVtZW50X3NpemUJDQoJCQ0KDQoNCg0KZGVmIGdldE1hdE5hbWUoeXMscGFyZW50KToNCgkjcHJpbnQgJ2dldE1hdE5hbWUnDQoJbWF0TmFtZT1Ob25lDQoJaWYJbWF0TmFtZSBub3QgaW4gTUFURVJJQUxTLmtleXMoKToNCgkJVW5pcXVlSUQ9eXMuZ2V0KHBhcmVudCwnIlVuaXF1ZUlEIicpDQoJCWlmIFVuaXF1ZUlEOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhVbmlxdWVJRFswXS5oZWFkZXIsJ3MnKQ0KCQkJaWYgbGVuKHZhbHVlcyk+MToNCgkJCQlpZiAnIicgaW4gdmFsdWVzWzFdIGFuZCAnXycgaW4gdmFsdWVzWzFdOg0KCQkJCQltYXROYW1lPXZhbHVlc1sxXS5zcGxpdCgnIicpWzNdLnNwbGl0KCdfJylbLTJdDQoJDQoJcmdiYT1Ob25lCQ0KCUF0dHJpYnV0ZUxpc3Q9eXMuZ2V0KHBhcmVudCwnIkF0dHJpYnV0ZUxpc3QiJykJDQoJaWYgQXR0cmlidXRlTGlzdDoJCQkNCgkJdmFsdWVzPXlzLnZhbHVlcyhBdHRyaWJ1dGVMaXN0WzBdLmhlYWRlciwnOicpDQoJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQlEaWZmdXNlPXlzLmdldChwYXJlbnQsJyJEaWZmdXNlIicpDQoJCWlmIERpZmZ1c2U6DQoJCQlyZ2JhPXlzLnZhbHVlcyhEaWZmdXNlWzBdLmRhdGEsJ2YnKQkJCQkNCgkJaWYJbWF0TmFtZSBub3QgaW4gTUFURVJJQUxTLmtleXMoKToNCgkJCU1hdGVyaWFsPXlzLmdldChBdHRyaWJ1dGVMaXN0WzBdLCcib3NnLk1hdGVyaWFsIicpDQoJCQlpZiBNYXRlcmlhbDoJDQoJCQkJZm9yIGEgaW4gTWF0ZXJpYWxbMF0uY2hpbGRyZW46DQoJCQkJCWlmICciTmFtZSInIGluIGEuaGVhZGVyOgkJCQkJCQkJDQoJCQkJCQlzcGxpdHM9YS5oZWFkZXIuc3BsaXQoJyInKQ0KCQkJCQkJaWYgbGVuKHNwbGl0cyk+NDoNCgkJCQkJCQltYXROYW1lPXNwbGl0c1s1XQ0KCQkJCQkJCWlmICc6JyBpbiBtYXROYW1lOg0KCQkJCQkJCQltYXROYW1lPW1hdE5hbWUucmVwbGFjZSgnOicsJycpDQoJCQkJCQkJbW9kZWwubWF0TGlzdFtVbmlxdWVJRF09bWF0TmFtZQkNCgkJCQkNCglpZgltYXROYW1lIG5vdCBpbiBNQVRFUklBTFMua2V5cygpOgkNCgkJU3RhdGVTZXQ9eXMuZ2V0KHBhcmVudCwnIlN0YXRlU2V0IicpDQoJCWlmIFN0YXRlU2V0Og0KCQkJb3NnU3RhdGVTZXQ9eXMuZ2V0KFN0YXRlU2V0WzBdLCcib3NnLlN0YXRlU2V0IicpDQoJCQlpZiBvc2dTdGF0ZVNldDoJDQoJCQkJaWYgbGVuKG9zZ1N0YXRlU2V0WzBdLmNoaWxkcmVuKT4wOg0KCQkJCQlmb3IgY2hpbGQgaW4gb3NnU3RhdGVTZXRbMF0uY2hpbGRyZW46CQkJCQ0KCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5oZWFkZXIsJzonKQ0KCQkJCQkJaWYgJyJVbmlxdWVJRCInIGluIHZhbHVlcyBhbmQgJyJOYW1lIicgaW4gdmFsdWVzOg0KCQkJCQkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJCQkJCW1hdE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkJCQkJbW9kZWwubWF0TGlzdFtVbmlxdWVJRF09bWF0TmFtZQ0KCQkJCWVsc2U6CQkJCQ0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKG9zZ1N0YXRlU2V0WzBdLmRhdGEsJzonKQ0KCQkJCQlpZiAnIkF0dHJpYnV0ZUxpc3QiJyBub3QgaW4gdmFsdWVzOg0KCQkJCQkJVW5pcXVlSUQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciVW5pcXVlSUQiJywnaScpDQoJCQkJCQlpZiBVbmlxdWVJRCBpbiBtb2RlbC5tYXRMaXN0Og0KCQkJCQkJCW1hdE5hbWU9bW9kZWwubWF0TGlzdFtVbmlxdWVJRF0NCgkJCQ0KCWlmCW1hdE5hbWU6CQ0KCQlpZglsZW4obWF0TmFtZSk9PTA6DQoJCQltYXROYW1lPSdSb290Tm9kZScNCgkJaWYgJ1x4ZWYnIGluIG1hdE5hbWU6DQoJCQltYXROYW1lPW1hdE5hbWUuc3BsaXQoJ1x4ZWYnKVswXQ0KCWRpZmZ1c2U9Tm9uZQkJDQoJbm9ybWFsPU5vbmUJDQoJc3BlY3VsYXI9Tm9uZQ0KCXRyYW5zPU5vbmUJDQoJYW89Tm9uZQ0KCXJnYkNvbD1Ob25lDQoJcmdiU3BlYz1Ob25lDQoJDQoJDQoJDQoJDQoJDQoJaWYgbGVuKE1BVEVSSUFMUy5rZXlzKCkpPT0xOg0KCQkJa2V5PU1BVEVSSUFMUy5rZXlzKClbMF0NCgkJCWZvciBpbWFnZVR5cGUgaW4gTUFURVJJQUxTW2tleV06DQoJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J3RleHR1cmUnOg0KCQkJCQloYXNoPU1BVEVSSUFMU1trZXldW2ltYWdlVHlwZV1bMV0JCQkJCQ0KCQkJCQlpZiBoYXNoIGluIElNQUdFUy5rZXlzKCk6DQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCXBhdGgsZXhpc3RzLHF1YWxpdHk9SU1BR0VTW2hhc2hdWydSR0InXQ0KCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nT3BhY2l0eSc6dHJhbnM9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdBbGJlZG9QQlInOmRpZmZ1c2U9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlQ29sb3InOmRpZmZ1c2U9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyQ29sb3InOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZVBCUic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ0EnXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnQSddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQl0cmFucz1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ04nXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnTiddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1InXToNCgkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUiddDQoJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdPcGFjaXR5Jzp0cmFucz1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQU9QQlInOmFvPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nUm91Z2huZXNzUEJSJzpzcGVjdWxhcj1wYXRoDQoJCQkJCQkJCWlmIGltYWdlVHlwZT09J0dsb3NzaW5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQnVtcE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J2NvbG9yJzoNCgkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZUNvbG9yJzoNCgkJCQkJCXJnYkNvbD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdDQoJCQkJCQkJCQ0KCWVsc2U6CQkJCQkJCQ0KCQlmb3Iga2V5IGluIE1BVEVSSUFMUy5rZXlzKCk6DQoJCQlpZiBrZXk9PW1hdE5hbWU6DQoJCQkJZm9yIGltYWdlVHlwZSBpbiBNQVRFUklBTFNba2V5XToNCgkJCQkJaWYgTUFURVJJQUxTW2tleV1baW1hZ2VUeXBlXVswXT09J3RleHR1cmUnOg0KCQkJCQkJaGFzaD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdCQkJCQkNCgkJCQkJCWlmIGhhc2ggaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUkdCJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nQWxiZWRvUEJSJzpkaWZmdXNlPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0RpZmZ1c2VDb2xvcic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlUEJSJzpkaWZmdXNlPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J05vcm1hbE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0VtaXRDb2xvcic6ZGlmZnVzZT1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdTcGVjdWxhclBCUic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nT3BhY2l0eSc6dHJhbnM9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJGMCc6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nU3BlY3VsYXJDb2xvcic6c3BlY3VsYXI9cGF0aA0KCQkJCQkJCQkJaWYgaW1hZ2VUeXBlPT0nRGlmZnVzZUludGVuc2l0eSc6YW89cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnQSddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnQSddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCXRyYW5zPXBhdGgNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ04nXToNCgkJCQkJCQkJcGF0aCxleGlzdHMscXVhbGl0eT1JTUFHRVNbaGFzaF1bJ04nXQ0KCQkJCQkJCQlpZiBleGlzdHM9PTE6DQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdOb3JtYWxNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdCdW1wTWFwJzpub3JtYWw9cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnUiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUiddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J09wYWNpdHknOnRyYW5zPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J1NwZWN1bGFyRjAnOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0FPUEJSJzphbz1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdSb3VnaG5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0dsb3NzaW5lc3NQQlInOnNwZWN1bGFyPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdTcGVjdWxhckNvbG9yJzpzcGVjdWxhcj1wYXRoDQoJCQkJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlSW50ZW5zaXR5Jzphbz1wYXRoDQoJCQkJCWlmIE1BVEVSSUFMU1trZXldW2ltYWdlVHlwZV1bMF09PSdjb2xvcic6DQoJCQkJCQlpZiBpbWFnZVR5cGU9PSdEaWZmdXNlQ29sb3InOg0KCQkJCQkJCXJnYkNvbD1NQVRFUklBTFNba2V5XVtpbWFnZVR5cGVdWzFdDQoJCQkJDQoJVGV4dHVyZUF0dHJpYnV0ZUxpc3Q9eXMuZ2V0KHBhcmVudCwnIlRleHR1cmVBdHRyaWJ1dGVMaXN0IicpDQoJaWYgVGV4dHVyZUF0dHJpYnV0ZUxpc3Q6DQoJCQkjcHJpbnQgJ2hlcmUnDQoJCQlvc2dfVGV4dHVyZT15cy5nZXQocGFyZW50LCcib3NnLlRleHR1cmUiJykNCgkJCWlmIG9zZ19UZXh0dXJlOg0KCQkJCXZhbHVlcz15cy52YWx1ZXMob3NnX1RleHR1cmVbMF0uZGF0YSwnOicpCQkJCQ0KCQkJCWhhc2g9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCQkJaWYgaGFzaDoNCgkJCQkJaWYgJy8nIGluIGhhc2g6DQoJCQkJCQloYXNoPWhhc2guc3BsaXQoJy8nKVsxXQ0KCQkJCQkJI3ByaW50IGhhc2gNCgkJCQkJCWlmIGhhc2ggaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQlpZiBJTUFHRVNbaGFzaF1bJ1JHQiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnUkdCJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJZGlmZnVzZT1wYXRoDQoJCQkJCQkJaWYgSU1BR0VTW2hhc2hdWydBJ106DQoJCQkJCQkJCXBhdGgsZXhpc3RzLHF1YWxpdHk9SU1BR0VTW2hhc2hdWydBJ10NCgkJCQkJCQkJaWYgZXhpc3RzPT0xOg0KCQkJCQkJCQkJdHJhbnM9cGF0aA0KCQkJCQkJCWlmIElNQUdFU1toYXNoXVsnTiddOg0KCQkJCQkJCQlwYXRoLGV4aXN0cyxxdWFsaXR5PUlNQUdFU1toYXNoXVsnTiddDQoJCQkJCQkJCWlmIGV4aXN0cz09MToNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J05vcm1hbE1hcCc6bm9ybWFsPXBhdGgNCgkJCQkJCQkJCWlmIGltYWdlVHlwZT09J0J1bXBNYXAnOm5vcm1hbD1wYXRoDQoJCQ0KCXJldHVybiBtYXROYW1lLGRpZmZ1c2Usc3BlY3VsYXIsbm9ybWFsLGFvLHRyYW5zLHJnYkNvbCxyZ2JTcGVjLHJnYmENCgkNCg0KZGVmIGdldFNwbGl0TmFtZShuYW1lLHdoYXQsd2hpY2gpOg0KCWE9Tm9uZQ0KCWlmIHdoYXQgaW4gbmFtZToNCgkJYT0nJw0KCQlzcGxpdHM9bmFtZS5zcGxpdCh3aGF0KQ0KCQlpZiB3aGljaDwwOg0KCQkJbnVtPWxlbihzcGxpdHMpK3doaWNoLTENCgkJZWxzZToNCgkJCW51bT13aGljaA0KCQlpZiBudW08MDoNCgkJCWE9bmFtZQ0KCQllbHNlOgkJDQoJCQlpZiB3aGljaDxsZW4oc3BsaXRzKToJCQkNCgkJCQlmb3IgbSBpbiByYW5nZShudW0pOg0KCQkJCQlhKz1zcGxpdHNbbV0rd2hhdA0KCQkJCWErPXNwbGl0c1tudW1dDQoJCQllbHNlOg0KCQkJCWE9bmFtZQkJDQoJcmV0dXJuIGEJDQoJCQ0KDQpkZWYgZXRhcDEoaW5wdXQsSXRlbVNpemUpOg0KCW49bGVuKGlucHV0KS9JdGVtU2l6ZQ0KCXI9MA0KCW91dHB1dD1bMF0qbGVuKGlucHV0KQ0KCXdoaWxlKHI8bik6DQoJCWE9cipJdGVtU2l6ZQ0KCQlzPTANCgkJd2hpbGUoczxJdGVtU2l6ZSk6DQoJCQlvdXRwdXRbYStzXT1pbnB1dFtyK24qc10NCgkJCXMrPTEJDQoJCXIrPTENCglyZXR1cm4gb3V0cHV0CQ0KCQ0KZGVmIGV0YXAyKGlucHV0LEl0ZW1TaXplLGF0cmlidXRlcyk6DQoJaT1bYXRyaWJ1dGVzWyciYngiJ10sYXRyaWJ1dGVzWyciYnkiJ10sYXRyaWJ1dGVzWyciYnoiJ11dDQoJbj1bYXRyaWJ1dGVzWyciaHgiJ10sYXRyaWJ1dGVzWyciaHkiJ10sYXRyaWJ1dGVzWyciaHoiJ11dDQoJYT1sZW4oaW5wdXQpL0l0ZW1TaXplDQoJcz0wDQoJb3V0cHV0PVswXSpsZW4oaW5wdXQpDQoJd2hpbGUoczxhKToNCgkJbz1zKkl0ZW1TaXplDQoJCXU9MA0KCQl3aGlsZSh1PEl0ZW1TaXplKToNCgkJCW91dHB1dFtvK3VdPWlbdV0raW5wdXRbbyt1XSpuW3VdOw0KCQkJdSs9MQkNCgkJcys9MQ0KCXJldHVybiBvdXRwdXQJDQoJDQoJDQoJDQoJDQpkZWYgZXRhcDMoaW5wdXQsSXRlbVNpemUpOg0KCWk9SXRlbVNpemV8MQ0KCW49MQ0KCXI9bGVuKGlucHV0KS9pDQoJd2hpbGUobjxyKToNCgkJYT0obi0xKSppDQoJCXM9bippDQoJCW89MA0KCQl3aGlsZShvPGkpOgkJCQ0KCQkJaW5wdXRbcytvXSs9aW5wdXRbYStvXQ0KCQkJbys9MQkNCgkJbis9MQ0KCXJldHVybiBpbnB1dA0KCQ0KZGVmIGV0YXA0KGlucHV0KToNCgllPTENCglpPWxlbihpbnB1dCkvNA0KCXdoaWxlKGU8aSk6DQoJCW49NCooZS0xKQ0KCQlyPTQqZQ0KCQlhPWlucHV0W25dDQoJCXM9aW5wdXRbbisxXQ0KCQlvPWlucHV0W24rMl0NCgkJdT1pbnB1dFtuKzNdDQoJCWw9aW5wdXRbcl0NCgkJaD1pbnB1dFtyKzFdDQoJCWM9aW5wdXRbcisyXQ0KCQlkPWlucHV0W3IrM10NCgkJaW5wdXRbcl09YSpkK3MqYy1vKmgrdSpsDQoJCWlucHV0W3IrMV09LWEqYytzKmQrbypsK3UqaA0KCQlpbnB1dFtyKzJdPWEqaC1zKmwrbypkK3UqYw0KCQlpbnB1dFtyKzNdPS1hKmwtcypoLW8qYyt1KmQNCgkJZSs9MQ0KCXJldHVybglpbnB1dA0KCQ0KDQoNCmRlZiBpbnQzZmxvYXQ0KGlucHV0LGF0cmlidXRlcyxJdGVtU2l6ZSk6DQoJYz00DQoJZD1hdHJpYnV0ZXNbJyJlcHNpbG9uIiddDQoJcD1pbnQoYXRyaWJ1dGVzWycibnBoaSInXSkNCgllPVswXSpsZW4oaW5wdXQpKjQNCglpPTEuNTcwNzk2MzI2NzkNCgluPTYuMjgzMTg1MzA3MTgNCglyPTMuMTQxNTkyNjUzNTkNCglhPTAuMDE3NDUzMjkyNTENCglzPTAuMjUNCglvPTcyMA0KCXU9ODMyDQoJbD00NzkzODM2MjU4NDE1MTYzNWUtMjENCgloPXt9DQoJZj1UcnVlDQoJDQoJZD1kIG9yIHMNCglwPXAgb3Igbw0KCWc9bWF0aC5jb3MoZCphKQ0KCW09MA0KCXY9MA0KCV89W10NCgkNCgl2PShwKzEpKih1KzEpKjMNCglfPVtOb25lXSp2DQoJDQoJYj1yL2Zsb2F0KHAtMSkNCgl4PWkvZmxvYXQocC0xKQ0KCQ0KCWlmIGY6eT0zDQoJZWxzZTp5PTINCgkJDQoJCQ0KCW09MA0KCXY9bGVuKGlucHV0KS95DQoJd2hpbGUobTx2KToNCgkJQT1tKmMNCgkJUz1tKnkNCgkJQz1pbnB1dFtTXQ0KCQl3PWlucHV0W1MrMV0NCgkJaWYgYz09MDoNCgkJCWlmIGY9PTA6DQoJCQkJaWYgKEMmLTEwMjUpIT00OgkJDQoJCQkJCWVbQSszXT0tMQ0KCQkJCWVsc2U6DQoJCQkJCWVbQSszXT0xDQoJCU09Tm9uZQ0KCQlUPU5vbmUNCgkJRT1Ob25lDQoJCUk9MyooQytwKncpCQkNCgkJTT1fW0ldDQoJCWlmCU09PU5vbmU6CQkJCQ0KCQkJTj1DKmINCgkJCWs9Y29zKE4pDQoJCQlGPXNpbihOKQ0KCQkJTis9eA0KCQkJRD0oZy1rKmNvcyhOKSkvZmxvYXQobWF4KDFlLTUsRipzaW4oTikpKQ0KCQkJaWYgRD4xOkQ9MQ0KCQkJZWxzZToNCgkJCQlpZiBEPC0xOkQ9LTENCgkJCVA9dypuL2Zsb2F0KG1hdGguY2VpbChyL2Zsb2F0KG1heCgxZS01LG1hdGguYWNvcyhEKSkpKSkNCgkJCU09X1tJXT1GKm1hdGguY29zKFApDQoJCQlUPV9bSSsxXT1GKm1hdGguc2luKFApDQoJCQlFPV9bSSsyXT1rDQoJCWVsc2U6IA0KCQkJVD1fW0krMV0NCgkJCUU9X1tJKzJdDQoJCWlmIGY6DQoJCQlSPWlucHV0W1MrMl0qbA0KCQkJTz1tYXRoLnNpbihSKQ0KCQkJZVtBXT1PKk0NCgkJCWVbQSsxXT1PKlQNCgkJCWVbQSsyXT1PKkUNCgkJCWVbQSszXT1tYXRoLmNvcyhSKQ0KCQkJI3dyaXRlKGxvZyxbQSxlW0FdLGVbQSsxXSxlW0ErMl0sZVtBKzNdXSwwKQ0KCQllbHNlOiANCgkJCWVbQV09TQ0KCQkJZVtBKzFdPVQNCgkJCWVbQSsyXT1FDQoJCW0rPTENCgkNCglyZXR1cm4gZQkNCgkNCg0KZGVmIGdldEFuaW1hdGlvbih5cyxBLG4pOg0KCWFjdGlvbj1BY3Rpb24oKQ0KCWFjdGlvbi5CT05FU1BBQ0U9VHJ1ZQ0KCSNhY3Rpb24uQVJNQVRVUkVTUEFDRT1UcnVlDQoJYWN0aW9uLkZSQU1FU09SVD1UcnVlDQoJYWN0aW9uLnNrZWxldG9uPXNrZWxldG9uLm5hbWUNCgluKz00DQoJQ2hhbm5lbHM9eXMuZ2V0KEEsJyJDaGFubmVscyInKQ0KCWJvbmVMaXN0PXt9DQoJaWYgQ2hhbm5lbHM6DQoJCXZhbHVlcz15cy52YWx1ZXMoQ2hhbm5lbHNbMF0uaGVhZGVyLCc6JykNCgkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCWFjdGlvbi5uYW1lPU5hbWUNCgkJbmV3PU5ldyhOYW1lLnJlcGxhY2UoJyInLCcnKS5yZXBsYWNlKCd8JywnJykrJy5hY3Rpb24nLCd3Yicsc3lzKS5vcGVuKCkNCgkJZm9yIGEgaW4gIENoYW5uZWxzWzBdLmNoaWxkcmVuOg0KCQkJVmVjM0xlcnBDaGFubmVsPXlzLmdldChhLCcib3NnQW5pbWF0aW9uLlZlYzNMZXJwQ2hhbm5lbCInKQ0KCQkJaWYgVmVjM0xlcnBDaGFubmVsOg0KCQkJCUtleUZyYW1lcz15cy5nZXQoYSwnIktleUZyYW1lcyInKQ0KCQkJCWlmIEtleUZyYW1lczoNCgkJCQkJdmFsdWVzPXlzLnZhbHVlcyhLZXlGcmFtZXNbMF0uaGVhZGVyLCc6JykNCgkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCQkJCVRhcmdldE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVGFyZ2V0TmFtZSInLCciIicpDQoJCQkJCW5hbWU9Z2V0U3BsaXROYW1lKFRhcmdldE5hbWUsJ18nLC0xKQ0KCQkJCQlpZiBOYW1lPT0nInRyYW5zbGF0ZSInOg0KCQkJCQkJYm9uZT1Ob25lDQoJCQkJCQlpZiBUYXJnZXROYW1lIGluIGJvbmVJbmRla3NMaXN0Og0KCQkJCQkJCW5hbWU9Ym9uZUluZGVrc0xpc3RbVGFyZ2V0TmFtZV0NCgkJCQkJCQlpZiBuYW1lIG5vdCBpbiBib25lTGlzdC5rZXlzKCk6DQoJCQkJCQkJCWJvbmU9QWN0aW9uQm9uZSgpDQoJCQkJCQkJCWFjdGlvbi5ib25lTGlzdC5hcHBlbmQoYm9uZSkNCgkJCQkJCQkJYm9uZS5uYW1lPW5hbWUNCgkJCQkJCQkJYm9uZUxpc3RbbmFtZV09Ym9uZQ0KCQkJCQkJCWJvbmU9Ym9uZUxpc3RbbmFtZV0NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHJpbnQgJ3NraXBlZCB0cmFuc2xhdGUgYm9uZTonLFRhcmdldE5hbWUNCgkJCQkJCQ0KCQkJCQkJDQoJCQkJCQlLZXk9eXMuZ2V0KGEsJyJLZXkiJykNCgkJCQkJCWlmIEtleToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KEtleVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCQl3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQkJDQoJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCW5ldy53cml0ZShib25lLm5hbWUrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy53cml0ZSgndHJhbnNsYXRlJysnXHgwMCcpDQoJCQkJCQkJCQkJbmV3LmkoW2ludChTaXplKV0pDQoJCQkJCQkJCQlmb3IgbSBpbiByYW5nZShpbnQoU2l6ZSkpOg0KCQkJCQkJCQkJCXZhbHVlPWcuZihJdGVtU2l6ZSkNCgkJCQkJCQkJCQkjd3JpdGUobG9nLHZhbHVlLG4rOCkNCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcuZih2YWx1ZSkNCgkJCQkJCQkJCQkJYm9uZU1hdHJpeD1za2VsZXRvbi5vYmplY3QuZ2V0RGF0YSgpLmJvbmVzW2JvbmUubmFtZV0ubWF0cml4WydBUk1BVFVSRVNQQUNFJ10NCgkJCQkJCQkJCQkJbWF0cml4PVZlY3Rvck1hdHJpeCh2YWx1ZSkjKmJvbmVNYXRyaXgNCgkJCQkJCQkJCQkJYm9uZS5wb3NLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJCQllbHNlOnByaW50ICd1bmtub3cgYXJyYXkgdHlwZScNCgkJCQkJCWVsc2U6cHJpbnQgJ25vIGtleScJCQkJDQoJCQkJCQkNCgkJCQkJCVRpbWU9eXMuZ2V0KGEsJyJUaW1lIicpDQoJCQkJCQlpZiBUaW1lOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVGltZVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KFRpbWVbMF0sJyJGbG9hdDMyQXJyYXkiJykNCgkJCQkJCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJykNCgkJCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicpDQoJCQkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZTpuZXcuaShbaW50KFNpemUpXSkNCgkJCQkJCQkJCWZvciBtIGluIHJhbmdlKGludChTaXplKSk6DQoJCQkJCQkJCQkJdmFsdWU9Zy5mKEl0ZW1TaXplKQ0KCQkJCQkJCQkJCWlmIEl0ZW1TaXplPT0xOnZhbHVlPXZhbHVlWzBdDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyxbdmFsdWVdLG4rOCkNCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcuZihbdmFsdWVdKQ0KCQkJCQkJCQkJCQlib25lLnBvc0ZyYW1lTGlzdC5hcHBlbmQoaW50KHZhbHVlKjMzKSkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJCWVsc2U6cHJpbnQgJ3Vua25vdyBhcnJheSB0eXBlJw0KCQkJCQkJZWxzZTpwcmludCAnbm8gdGltZScJCQ0KCQkJCQkNCgkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJaWYgTmFtZT09JyJzY2FsZSInOg0KCQkJCQkJYm9uZT1Ob25lDQoJCQkJCQlpZiBUYXJnZXROYW1lIGluIGJvbmVJbmRla3NMaXN0Og0KCQkJCQkJCW5hbWU9Ym9uZUluZGVrc0xpc3RbVGFyZ2V0TmFtZV0NCgkJCQkJCQlpZiBuYW1lIG5vdCBpbiBib25lTGlzdC5rZXlzKCk6DQoJCQkJCQkJCWJvbmU9QWN0aW9uQm9uZSgpDQoJCQkJCQkJCWFjdGlvbi5ib25lTGlzdC5hcHBlbmQoYm9uZSkNCgkJCQkJCQkJYm9uZS5uYW1lPW5hbWUNCgkJCQkJCQkJYm9uZUxpc3RbbmFtZV09Ym9uZQ0KCQkJCQkJCWJvbmU9Ym9uZUxpc3RbbmFtZV0NCgkJCQkJCWVsc2U6DQoJCQkJCQkJcHJpbnQgJ3NraXBlZCBzY2FsZSBib25lOicsVGFyZ2V0TmFtZQ0KCQkJCQkJDQoJCQkJCQkNCgkJCQkJCUtleT15cy5nZXQoYSwnIktleSInKQ0KCQkJCQkJaWYgS2V5Og0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQkJCQkJCQ0KCQkJCQkJCUZsb2F0MzJBcnJheT15cy5nZXQoS2V5WzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQkJaWYgRmxvYXQzMkFycmF5Og0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInKQ0KCQkJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicpDQoJCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQkJDQoJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCW5ldy53cml0ZShib25lLm5hbWUrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy53cml0ZSgnc2l6ZScrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy5pKFtpbnQoU2l6ZSldKQ0KCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoaW50KFNpemUpKToNCgkJCQkJCQkJCQl2YWx1ZT1nLmYoSXRlbVNpemUpDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyx2YWx1ZSxuKzgpDQoJCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQkJbmV3LmYodmFsdWUpDQoJCQkJCQkJCQkJCWJvbmVNYXRyaXg9c2tlbGV0b24ub2JqZWN0LmdldERhdGEoKS5ib25lc1tib25lLm5hbWVdLm1hdHJpeFsnQVJNQVRVUkVTUEFDRSddDQoJCQkJCQkJCQkJCW1hdHJpeD1WZWN0b3JNYXRyaXgodmFsdWUpIypib25lTWF0cml4DQoJCQkJCQkJCQkJCWJvbmUuc2l6ZUtleUxpc3QuYXBwZW5kKG1hdHJpeCkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJCWVsc2U6cHJpbnQgJ3Vua25vdyBhcnJheSB0eXBlJw0KCQkJCQkJZWxzZTpwcmludCAnbm8ga2V5JwkJCQkNCgkJCQkJCQ0KCQkJCQkJVGltZT15cy5nZXQoYSwnIlRpbWUiJykNCgkJCQkJCWlmIFRpbWU6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhUaW1lWzBdLmRhdGEsJzonKQ0KCQkJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQkJCQkJCQ0KCQkJCQkJCUZsb2F0MzJBcnJheT15cy5nZXQoVGltZVswXSwnIkZsb2F0MzJBcnJheSInKQ0KCQkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInKQ0KCQkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlIGFuZCBvcy5wYXRoLmV4aXN0cyhwYXRoLnNwbGl0KCcuZ3onKVswXSk9PUZhbHNlOg0KCQkJCQkJCQkJY21kPUNtZCgpDQoJCQkJCQkJCQljbWQuaW5wdXQ9cGF0aA0KCQkJCQkJCQkJY21kLlpJUD1UcnVlDQoJCQkJCQkJCQljbWQucnVuKCkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0uc3BsaXQoJy5neicpWzBdDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZToNCgkJCQkJCQkJCXBhdGgrPScnDQoJCQkJCQkJCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk6DQoJCQkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJCQkJCWcuc2VlayhpbnQoT2Zmc2V0KSkJCQkJCQkJDQoJCQkJCQkJCQlpZiBib25lOm5ldy5pKFtpbnQoU2l6ZSldKQ0KCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoaW50KFNpemUpKToNCgkJCQkJCQkJCQl2YWx1ZT1nLmYoSXRlbVNpemUpDQoJCQkJCQkJCQkJaWYgSXRlbVNpemU9PTE6dmFsdWU9dmFsdWVbMF0NCgkJCQkJCQkJCQkjd3JpdGUobG9nLFt2YWx1ZV0sbis4KQ0KCQkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJCW5ldy5mKFt2YWx1ZV0pDQoJCQkJCQkJCQkJCWJvbmUuc2l6ZUZyYW1lTGlzdC5hcHBlbmQoaW50KHZhbHVlKjMzKSkNCgkJCQkJCQkJCWZpbGUuY2xvc2UoKQ0KCQkJCQkJCWVsc2U6cHJpbnQgJ3Vua25vdyBhcnJheSB0eXBlJw0KCQkJCQkJZWxzZTpwcmludCAnbm8gdGltZScJCQ0KCQkJCQkJCQkJDQoJCQlWZWMzTGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkPXlzLmdldChhLCcib3NnQW5pbWF0aW9uLlZlYzNMZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWQiJykNCgkJCWlmIFZlYzNMZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWQ6DQoJCQkNCgkJCQlhdHJpYnV0ZXM9e30NCgkJCQlVc2VyRGF0YUNvbnRhaW5lcj15cy5nZXQoVmVjM0xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZFswXSwnIlVzZXJEYXRhQ29udGFpbmVyIicpDQoJCQkJaWYgVXNlckRhdGFDb250YWluZXI6DQoJCQkJCVZhbHVlcz15cy5nZXQoVXNlckRhdGFDb250YWluZXJbMF0sJyJWYWx1ZXMiJykNCgkJCQkJaWYgVmFsdWVzOg0KCQkJCQkJZm9yIGNoaWxkIGluIFZhbHVlc1swXS5jaGlsZHJlbjoNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLmRhdGEsJzonKQ0KCQkJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInKQ0KCQkJCQkJCVZhbHVlPXlzLmdldFZhbHVlKHZhbHVlcywnIlZhbHVlIicsJyJmIicpDQoJCQkJCQkJI3dyaXRlKGxvZyxbTmFtZSxWYWx1ZV0sbis0KQ0KCQkJCQkJCWF0cmlidXRlc1tOYW1lXT1WYWx1ZQ0KCQkJCQ0KCQkJCUtleUZyYW1lcz15cy5nZXQoYSwnIktleUZyYW1lcyInKQ0KCQkJCWlmIEtleUZyYW1lczoNCgkJCQkJdmFsdWVzPXlzLnZhbHVlcyhLZXlGcmFtZXNbMF0uaGVhZGVyLCc6JykNCgkJCQkJTmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJOYW1lIicpDQoJCQkJCVRhcmdldE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVGFyZ2V0TmFtZSInLCciIicpDQoJCQkJCSN3cml0ZShsb2csWydWZWMzTGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkOicsTmFtZSwnVGFyZ2V0TmFtZTonLFRhcmdldE5hbWVdLG4rNCkNCgkJCQkJbmFtZT1nZXRTcGxpdE5hbWUoVGFyZ2V0TmFtZSwnXycsLTEpDQoJCQkJCWlmIE5hbWU9PScidHJhbnNsYXRlIic6DQoJCQkJCQlib25lPU5vbmUNCgkJCQkJCWlmIFRhcmdldE5hbWUgaW4gYm9uZUluZGVrc0xpc3Q6DQoJCQkJCQkJI25ldy53cml0ZShUYXJnZXROYW1lKydceDAwJykNCgkJCQkJCQkjbmV3LndyaXRlKCd0cmFuc2xhdGUnKydceDAwJykNCgkJCQkJCQluYW1lPWJvbmVJbmRla3NMaXN0W1RhcmdldE5hbWVdDQoJCQkJCQkJaWYgbmFtZSBub3QgaW4gYm9uZUxpc3Qua2V5cygpOg0KCQkJCQkJCQlib25lPUFjdGlvbkJvbmUoKQ0KCQkJCQkJCQlhY3Rpb24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpDQoJCQkJCQkJCWJvbmUubmFtZT1uYW1lDQoJCQkJCQkJCWJvbmVMaXN0W25hbWVdPWJvbmUNCgkJCQkJCQlib25lPWJvbmVMaXN0W25hbWVdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXByaW50ICdza2lwZWQgdHJhbnNsYXRlIGJvbmU6JyxUYXJnZXROYW1lDQoJCQkJCQkNCgkJCQkJCUtleT15cy5nZXQoYSwnIktleSInKQ0KCQkJCQkJaWYgS2V5Og0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCUl0ZW1TaXplPWludCh5cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInKSkJCQkJCQkNCgkJCQkJCQlVaW50MTZBcnJheT15cy5nZXQoS2V5WzBdLCciVWludDE2QXJyYXkiJykNCgkJCQkJCQl0eXBlPSJVaW50MTZBcnJheSINCgkJCQkJCQlpZiBVaW50MTZBcnJheToNCgkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MTZBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9aW50KHlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykpDQoJCQkJCQkJCU9mZnNldD1pbnQoeXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicpKQ0KCQkJCQkJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdFbmNvZGluZzonLEVuY29kaW5nLCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQlsaXN0PWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJCQkJCQlsaXN0MT1ldGFwMShsaXN0LEl0ZW1TaXplKQ0KCQkJCQkJCQkJb3V0PWV0YXAyKGxpc3QxLEl0ZW1TaXplLGF0cmlidXRlcykNCgkJCQkJCQkJCWxpc3QyPVthdHJpYnV0ZXNbJyJveCInXSxhdHJpYnV0ZXNbJyJveSInXSxhdHJpYnV0ZXNbJyJveiInXV0NCgkJCQkJCQkJCWxpc3QyLmV4dGVuZChvdXQpDQoJCQkJCQkJCQlsaXN0Mz1ldGFwMyhsaXN0MixJdGVtU2l6ZSkJCQkJCQkJDQoJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCW5ldy53cml0ZShib25lLm5hbWUrJ1x4MDAnKQ0KCQkJCQkJCQkJCW5ldy53cml0ZSgndHJhbnNsYXRlJysnXHgwMCcpDQoJCQkJCQkJCQkJbmV3LmkoW1NpemVdKQ0KCQkJCQkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQkJCQkJdmFsdWU9bGlzdDNbbSozOm0qMyszXQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csdmFsdWUsbis4KQ0KCQkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJCW5ldy5mKHZhbHVlKQ0KCQkJCQkJCQkJCQlpZiBib25lLm5hbWUgaW4gc2tlbGV0b24ub2JqZWN0LmdldERhdGEoKS5ib25lcy5rZXlzKCk6DQoJCQkJCQkJCQkJCQlib25lTWF0cml4PXNrZWxldG9uLm9iamVjdC5nZXREYXRhKCkuYm9uZXNbYm9uZS5uYW1lXS5tYXRyaXhbJ0FSTUFUVVJFU1BBQ0UnXQ0KCQkJCQkJCQkJCQkJI2JvbmVNYXRyaXgqPVZlY3Rvck1hdHJpeCh2YWx1ZSkNCgkJCQkJCQkJCQkJCW1hdHJpeD1WZWN0b3JNYXRyaXgodmFsdWUpIypib25lTWF0cml4DQoJCQkJCQkJCQkJCQlib25lLnBvc0tleUxpc3QuYXBwZW5kKG1hdHJpeCkNCgkJCQkJCQkJCQkJCQ0KCQkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQkJZWxzZTpwcmludCAndW5rbm93IGFycmF5IHR5cGUnDQoJCQkJCQllbHNlOnByaW50ICdubyBrZXknCQ0KCQkJCQkJDQoJCQkJCQlUaW1lPXlzLmdldChhLCciVGltZSInKQ0KCQkJCQkJaWYgVGltZToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFRpbWVbMF0uZGF0YSwnOicpDQoJCQkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpCQkJCQkJDQoJCQkJCQkJRmxvYXQzMkFycmF5PXlzLmdldChUaW1lWzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQkJaWYgRmxvYXQzMkFycmF5Og0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJCQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpDQoJCQkJCQkJCQlsaXN0PWcuZihTaXplKkl0ZW1TaXplKQ0KCQkJCQkJCQkJbGlzdDE9ZXRhcDEobGlzdCxJdGVtU2l6ZSkNCgkJCQkJCQkJCSNvdXQ9ZXRhcDIobGlzdDEsSXRlbVNpemUsYXRyaWJ1dGVzKQ0KCQkJCQkJCQkJbGlzdDI9W2F0cmlidXRlc1snIm90IiddXQ0KCQkJCQkJCQkJbGlzdDIuZXh0ZW5kKGxpc3QxKQ0KCQkJCQkJCQkJbGlzdDM9ZXRhcDMobGlzdDIsSXRlbVNpemUpDQoJCQkJCQkJCQkjd3JpdGUobG9nLGxpc3QzLDApCQkJCQkJCQ0KCQkJCQkJCQkJaWYgYm9uZTpuZXcuaShbU2l6ZV0pDQoJCQkJCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCQkJCQl2YWx1ZT1saXN0M1ttXQ0KCQkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJCW5ldy5mKFt2YWx1ZV0pDQoJCQkJCQkJCQkJCWJvbmUucG9zRnJhbWVMaXN0LmFwcGVuZChpbnQodmFsdWUqMzMpKQ0KCQkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQkJZWxzZTpwcmludCAndW5rbm93IGFycmF5IHR5cGUnCQ0KCQkJCQkJZWxzZTpwcmludCAnbm8gdGltZScJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJDQoJCQlRdWF0U2xlcnBDaGFubmVsPXlzLmdldChhLCcib3NnQW5pbWF0aW9uLlF1YXRTbGVycENoYW5uZWwiJykNCgkJCWlmIFF1YXRTbGVycENoYW5uZWw6DQoJCQkJS2V5RnJhbWVzPXlzLmdldChhLCciS2V5RnJhbWVzIicpDQoJCQkJaWYgS2V5RnJhbWVzOg0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEtleUZyYW1lc1swXS5oZWFkZXIsJzonKQ0KCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJykNCgkJCQkJVGFyZ2V0TmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJUYXJnZXROYW1lIicsJyIiJykNCgkJCQkJI3dyaXRlKGxvZyxbJ1F1YXRTbGVycENoYW5uZWw6JyxOYW1lLCdUYXJnZXROYW1lOicsVGFyZ2V0TmFtZV0sbis0KQ0KCQkJCQluYW1lPWdldFNwbGl0TmFtZShUYXJnZXROYW1lLCdfJywtMSkNCgkJCQkJYm9uZT1Ob25lDQoJCQkJCWlmIFRhcmdldE5hbWUgaW4gYm9uZUluZGVrc0xpc3Q6DQoJCQkJCQluYW1lPWJvbmVJbmRla3NMaXN0W1RhcmdldE5hbWVdDQoJCQkJCQlpZiBuYW1lIG5vdCBpbiBib25lTGlzdC5rZXlzKCk6DQoJCQkJCQkJYm9uZT1BY3Rpb25Cb25lKCkNCgkJCQkJCQlhY3Rpb24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpDQoJCQkJCQkJYm9uZS5uYW1lPW5hbWUNCgkJCQkJCQlib25lTGlzdFtuYW1lXT1ib25lDQoJCQkJCQlib25lPWJvbmVMaXN0W25hbWVdDQoJCQkJCWVsc2U6DQoJCQkJCQlwcmludCAnc2tpcGVkIHF1YXRlcm5pb24gYm9uZTonLFRhcmdldE5hbWUNCgkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJS2V5PXlzLmdldChhLCciS2V5IicpDQoJCQkJCWlmIEtleToNCgkJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5WzBdLmRhdGEsJzonKQ0KCQkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJykJCQkJCQkNCgkJCQkJCUZsb2F0MzJBcnJheT15cy5nZXQoS2V5WzBdLCciRmxvYXQzMkFycmF5IicpDQoJCQkJCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicpDQoJCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicpDQoJCQkJCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInKQ0KCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkNCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJY21kPUNtZCgpDQoJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQljbWQucnVuKCkNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCXBhdGgrPScnDQoJCQkJCQkJCQ0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpCQkJCQkJCQ0KCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJbmV3LndyaXRlKGJvbmUubmFtZSsnXHgwMCcpDQoJCQkJCQkJCQluZXcud3JpdGUoJ3F1YXRlcm5pb24nKydceDAwJykNCgkJCQkJCQkJCW5ldy5pKFtpbnQoU2l6ZSldKQ0KCQkJCQkJCQlmb3IgbSBpbiByYW5nZShpbnQoU2l6ZSkpOg0KCQkJCQkJCQkJdmFsdWU9Zy5mKDQpDQoJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCW5ldy5mKHZhbHVlKQ0KCQkJCQkJCQkJdmFsdWU9UXVhdGVybmlvbih2YWx1ZSkNCgkJCQkJCQkJCWlmIGJvbmU6DQoJCQkJCQkJCQkJI25ldy5mKHZhbHVlKQ0KCQkJCQkJCQkJCWJvbmVNYXRyaXg9c2tlbGV0b24ub2JqZWN0LmdldERhdGEoKS5ib25lc1tib25lLm5hbWVdLm1hdHJpeFsnQVJNQVRVUkVTUEFDRSddDQoJCQkJCQkJCQkJI2JvbmUucm90S2V5TGlzdC5hcHBlbmQoYm9uZU1hdHJpeCpRdWF0TWF0cml4KHZhbHVlKS5yZXNpemU0eDQoKSkNCgkJCQkJCQkJCQltYXRyaXg9UXVhdE1hdHJpeCh2YWx1ZSkucmVzaXplNHg0KCkjKmJvbmVNYXRyaXgNCgkJCQkJCQkJCQlib25lLnJvdEtleUxpc3QuYXBwZW5kKG1hdHJpeCkNCgkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQ0KCQkJCQlUaW1lPXlzLmdldChhLCciVGltZSInKQ0KCQkJCQlpZiBUaW1lOg0KCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhUaW1lWzBdLmRhdGEsJzonKQ0KCQkJCQkJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpCQkJCQkJDQoJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KFRpbWVbMF0sJyJGbG9hdDMyQXJyYXkiJykNCgkJCQkJCWlmIEZsb2F0MzJBcnJheToNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJykNCgkJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJykNCgkJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicpDQoJCQkJCQkJI3dyaXRlKGxvZyxbRmlsZSwnU2l6ZTonLFNpemUsJ09mZnNldDonLE9mZnNldCwnSXRlbVNpemU6JyxJdGVtU2l6ZV0sbis0KQ0KCQkJCQkJCQ0KCQkJCQkJCQkNCgkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXQkJCQ0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1UcnVlIGFuZCBvcy5wYXRoLmV4aXN0cyhwYXRoLnNwbGl0KCcuZ3onKVswXSk9PUZhbHNlOg0KCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJY21kLlpJUD1UcnVlDQoJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZToNCgkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk6DQoJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCWcuc2VlayhpbnQoT2Zmc2V0KSkJCQkJCQkJDQoJCQkJCQkJCWlmIGJvbmU6bmV3LmkoW2ludChTaXplKV0pDQoJCQkJCQkJCWZvciBtIGluIHJhbmdlKGludChTaXplKSk6DQoJCQkJCQkJCQl2YWx1ZT1nLmYoSXRlbVNpemUpDQoJCQkJCQkJCQlpZiBJdGVtU2l6ZT09MTp2YWx1ZT12YWx1ZVswXQ0KCQkJCQkJCQkJaWYgYm9uZToNCgkJCQkJCQkJCQluZXcuZihbdmFsdWVdKQ0KCQkJCQkJCQkJCWJvbmUucm90RnJhbWVMaXN0LmFwcGVuZChpbnQodmFsdWUqMzMpKQ0KCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJDQoJCQkJCQkJCQkNCgkJCVF1YXRTbGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkPXlzLmdldChhLCcib3NnQW5pbWF0aW9uLlF1YXRTbGVycENoYW5uZWxDb21wcmVzc2VkUGFja2VkIicpDQoJCQlpZiBRdWF0U2xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZDoNCgkJCQlUYXJnZXROYW1lPU5vbmUNCgkJCQl0cnk6DQoJCQkNCgkJCQkJYXRyaWJ1dGVzPXt9DQoJCQkJCVVzZXJEYXRhQ29udGFpbmVyPXlzLmdldChRdWF0U2xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZFswXSwnIlVzZXJEYXRhQ29udGFpbmVyIicpDQoJCQkJCWlmIFVzZXJEYXRhQ29udGFpbmVyOg0KCQkJCQkJVmFsdWVzPXlzLmdldChVc2VyRGF0YUNvbnRhaW5lclswXSwnIlZhbHVlcyInKQ0KCQkJCQkJaWYgVmFsdWVzOg0KCQkJCQkJCWZvciBjaGlsZCBpbiBWYWx1ZXNbMF0uY2hpbGRyZW46DQoJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQuZGF0YSwnOicpDQoJCQkJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInKQ0KCQkJCQkJCQlWYWx1ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJWYWx1ZSInLCciZiInKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtOYW1lLFZhbHVlXSxuKzQpDQoJCQkJCQkJCWF0cmlidXRlc1tOYW1lXT1WYWx1ZQ0KCQkJCQ0KCQkJCQlLZXlGcmFtZXM9eXMuZ2V0KGEsJyJLZXlGcmFtZXMiJykNCgkJCQkJaWYgS2V5RnJhbWVzOgkJCQkNCgkJCQkJCXZhbHVlcz15cy52YWx1ZXMoS2V5RnJhbWVzWzBdLmhlYWRlciwnOicpDQoJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJykNCgkJCQkJCVRhcmdldE5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVGFyZ2V0TmFtZSInLCciIicpDQoJCQkJCQkjd3JpdGUobG9nLFsnUXVhdFNsZXJwQ2hhbm5lbENvbXByZXNzZWRQYWNrZWQ6JyxOYW1lLCdUYXJnZXROYW1lOicsVGFyZ2V0TmFtZV0sbis0KQ0KCQkJCQkJbmFtZT1nZXRTcGxpdE5hbWUoVGFyZ2V0TmFtZSwnXycsLTEpDQoJCQkJCQkjcHJpbnQgVGFyZ2V0TmFtZQ0KCQkJCQkJYm9uZT1Ob25lDQoJCQkJCQkjcHJpbnQgVGFyZ2V0TmFtZQ0KCQkJCQkJI3ByaW50IGF0cmlidXRlcw0KCQkJCQkJaWYgVGFyZ2V0TmFtZSBpbiBib25lSW5kZWtzTGlzdDoNCgkJCQkJCQluYW1lPWJvbmVJbmRla3NMaXN0W1RhcmdldE5hbWVdDQoJCQkJCQkJaWYgbmFtZSBub3QgaW4gYm9uZUxpc3Qua2V5cygpOg0KCQkJCQkJCQlib25lPUFjdGlvbkJvbmUoKQ0KCQkJCQkJCQlhY3Rpb24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpDQoJCQkJCQkJCWJvbmUubmFtZT1uYW1lDQoJCQkJCQkJCWJvbmVMaXN0W25hbWVdPWJvbmUNCgkJCQkJCQlib25lPWJvbmVMaXN0W25hbWVdDQoJCQkJCQllbHNlOg0KCQkJCQkJCXByaW50ICdza2lwZWQgcXVhdGVybmlvbiBib25lOicsVGFyZ2V0TmFtZQ0KCQkJCQkJCQ0KCQkJCQkJS2V5PXlzLmdldChhLCciS2V5IicpDQoJCQkJCQlpZiBLZXk6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhLZXlbMF0uZGF0YSwnOicpDQoJCQkJCQkJSXRlbVNpemU9aW50KHlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicpKQkJCQkJCQ0KCQkJCQkJCVVpbnQxNkFycmF5PXlzLmdldChLZXlbMF0sJyJVaW50MTZBcnJheSInKQ0KCQkJCQkJCXR5cGU9IlVpbnQxNkFycmF5Ig0KCQkJCQkJCWlmIFVpbnQxNkFycmF5Og0KCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFVpbnQxNkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJykNCgkJCQkJCQkJU2l6ZT1pbnQoeXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInKSkNCgkJCQkJCQkJT2Zmc2V0PWludCh5cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJykpDQoJCQkJCQkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicpDQoJCQkJCQkJCSN3cml0ZShsb2csW0ZpbGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmcsJ0l0ZW1TaXplOicsSXRlbVNpemVdLG4rNCkNCgkJCQkJCQkJDQoJCQkJCQkJCQkNCgkJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlLnNwbGl0KCciJylbMV0JCQkNCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWUgYW5kIG9zLnBhdGguZXhpc3RzKHBhdGguc3BsaXQoJy5neicpWzBdKT09RmFsc2U6DQoJCQkJCQkJCQljbWQ9Q21kKCkNCgkJCQkJCQkJCWNtZC5pbnB1dD1wYXRoDQoJCQkJCQkJCQljbWQuWklQPVRydWUNCgkJCQkJCQkJCWNtZC5ydW4oKQ0KCQkJCQkJCQlwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJyInKVsxXS5zcGxpdCgnLmd6JylbMF0NCgkJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOg0KCQkJCQkJCQkJcGF0aCs9JycNCgkJCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKToNCgkJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQlsaXN0PWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJCQkJCQkjd3JpdGUobG9nLGxpc3QsMCkNCgkJCQkJCQkJCWxpc3QxPWV0YXAxKGxpc3QsSXRlbVNpemUpDQoJCQkJCQkJCQkjd3JpdGUobG9nLGxpc3QxLDApDQoJCQkJCQkJCQlpZiAnIm94IicgaW4gYXRyaWJ1dGVzOg0KCQkJCQkJCQkJCWxpc3QyPWludDNmbG9hdDQobGlzdDEsYXRyaWJ1dGVzLEl0ZW1TaXplKQkJCQkJCQkJDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyxsaXN0MiwwKQ0KCQkJCQkJCQkJCWxpc3QzPVthdHJpYnV0ZXNbJyJveCInXSxhdHJpYnV0ZXNbJyJveSInXSxhdHJpYnV0ZXNbJyJveiInXSxhdHJpYnV0ZXNbJyJvdyInXV0NCgkJCQkJCQkJCQlsaXN0My5leHRlbmQobGlzdDIpDQoJCQkJCQkJCQkJbGlzdDQ9ZXRhcDQobGlzdDMpDQoJCQkJCQkJCQkJI3dyaXRlKGxvZyxsaXN0NCwwKQ0KCQkJCQkJCQkJCQkJCQkJCQkNCgkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQluZXcud3JpdGUoYm9uZS5uYW1lKydceDAwJykNCgkJCQkJCQkJCQkJbmV3LndyaXRlKCdxdWF0ZXJuaW9uJysnXHgwMCcpDQoJCQkJCQkJCQkJCW5ldy5pKFtTaXplXSkNCgkJCQkJCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCQkJCQkJdmFsdWU9bGlzdDRbbSo0Om0qNCs0XQ0KCQkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQkJbmV3LmYodmFsdWUpCQkJCQkJCQkJDQoJCQkJCQkJCQkJCXZhbHVlPVF1YXRlcm5pb24odmFsdWUpDQoJCQkJCQkJCQkJCSN3cml0ZShsb2csdmFsdWUsbis4KQ0KCQkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQkJI25ldy5mKHZhbHVlKQ0KCQkJCQkJCQkJCQkJYm9uZU1hdHJpeD1za2VsZXRvbi5vYmplY3QuZ2V0RGF0YSgpLmJvbmVzW2JvbmUubmFtZV0ubWF0cml4WydBUk1BVFVSRVNQQUNFJ10NCgkJCQkJCQkJCQkJCSMjYm9uZS5yb3RLZXlMaXN0LmFwcGVuZCgoYm9uZU1hdHJpeC5yb3RhdGlvblBhcnQoKSpRdWF0TWF0cml4KHZhbHVlKSkucmVzaXplNHg0KCkpDQoJCQkJCQkJCQkJCQltYXRyaXg9UXVhdE1hdHJpeCh2YWx1ZSkucmVzaXplNHg0KCkjKmJvbmVNYXRyaXgNCgkJCQkJCQkJCQkJCWJvbmUucm90S2V5TGlzdC5hcHBlbmQobWF0cml4KQ0KCQkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQkNCgkJCQkJCVRpbWU9eXMuZ2V0KGEsJyJUaW1lIicpDQoJCQkJCQlpZiBUaW1lOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVGltZVswXS5kYXRhLCc6JykNCgkJCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykJCQkJCQkNCgkJCQkJCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KFRpbWVbMF0sJyJGbG9hdDMyQXJyYXkiJykNCgkJCQkJCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJCQkJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJykNCgkJCQkJCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJCQkJCQkjd3JpdGUobG9nLFtGaWxlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdJdGVtU2l6ZTonLEl0ZW1TaXplXSxuKzQpDQoJCQkJCQkJCQ0KCQkJCQkJCQkJDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdCQkJCQkJCQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09VHJ1ZSBhbmQgb3MucGF0aC5leGlzdHMocGF0aC5zcGxpdCgnLmd6JylbMF0pPT1GYWxzZToNCgkJCQkJCQkJCWNtZD1DbWQoKQ0KCQkJCQkJCQkJY21kLmlucHV0PXBhdGgNCgkJCQkJCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCQkJCQkJY21kLnJ1bigpDQoJCQkJCQkJCXBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZS5zcGxpdCgnIicpWzFdLnNwbGl0KCcuZ3onKVswXQ0KCQkJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6DQoJCQkJCQkJCQlwYXRoKz0nJw0KCQkJCQkJCQkJDQoJCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpOg0KCQkJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCQlnLnNlZWsoaW50KE9mZnNldCkpDQoJCQkJCQkJCQlsaXN0PWcuZihTaXplKkl0ZW1TaXplKQ0KCQkJCQkJCQkJbGlzdDE9ZXRhcDEobGlzdCxJdGVtU2l6ZSkNCgkJCQkJCQkJCSNvdXQ9ZXRhcDIobGlzdDEsSXRlbVNpemUsYXRyaWJ1dGVzKQ0KCQkJCQkJCQkJaWYgJyJvdCInIGluIGF0cmlidXRlczoNCgkJCQkJCQkJCQlsaXN0Mj1bYXRyaWJ1dGVzWycib3QiJ11dDQoJCQkJCQkJCQkJbGlzdDIuZXh0ZW5kKGxpc3QxKQ0KCQkJCQkJCQkJCWxpc3QzPWV0YXAzKGxpc3QyLEl0ZW1TaXplKQ0KCQkJCQkJCQkJCSN3cml0ZShsb2csbGlzdDMsMCkJCQ0KCQkJCQkJCQkJCWlmIGJvbmU6bmV3LmkoW1NpemVdKQ0KCQkJCQkJCQkJCWZvciBtIGluIHJhbmdlKFNpemUpOg0KCQkJCQkJCQkJCQl2YWx1ZT1saXN0MlttXQ0KCQkJCQkJCQkJCQlpZiBib25lOg0KCQkJCQkJCQkJCQkJbmV3LmYoW3ZhbHVlXSkNCgkJCQkJCQkJCQkJCWJvbmUucm90RnJhbWVMaXN0LmFwcGVuZChpbnQodmFsdWUqMzMpKQ0KCQkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJZXhjZXB0Og0KCQkJCQlwcmludCAnbmllcG93b2R6ZW5pZTpRdWF0U2xlcnBDaGFubmVsQ29tcHJlc3NlZFBhY2tlZDonLFRhcmdldE5hbWUNCgkJCQkJDQoJCQkjaWYgYm9uZToJDQoJCQkjCXByaW50IG5hbWUsYm9uZS5uYW1lDQoJCW5ldy5jbG9zZSgpCQkNCgkjYWN0aW9uLmRyYXcoKQ0KCSNhY3Rpb24uc2V0Q29udGV4dCgpCQ0KCQkNCg0KZGVmIGRlY29kZVZhcmludChnLG9mZnNldCxzaXplLHR5cGUpOg0KCWcuc2VlayhvZmZzZXQpDQoJbj1bMF0qc2l6ZQ0KCWE9MA0KCXM9MAkNCgl3aGlsZShhIT1zaXplKToNCgkJc2hpZnQgPSAwDQoJCXJlc3VsdCA9IDANCgkJd2hpbGUgVHJ1ZToNCgkJCWJ5dGUgPSBnLkIoMSlbMF0NCgkJCXJlc3VsdCB8PSAoYnl0ZSAmIDEyNykgPDwgc2hpZnQNCgkJCXNoaWZ0ICs9IDcNCgkJCWlmIG5vdCAoYnl0ZSAmIDB4ODApOmJyZWFrCQkJDQoJCW5bYV09cmVzdWx0CQkNCgkJYSs9MQ0KCWlmIHR5cGVbMF0hPSdVJzoNCgkJbD0wDQoJCXdoaWxlKGw8c2l6ZSk6DQoJCQloPW5bbF0NCgkJCW5bbF09aD4+MV4tKDEmaCkNCgkJCWwrPTENCglyZXR1cm4gbg0KCQkNCgkNCgkJDQpkZWYgZGVjb2RlRGVsdGEodCxlKToNCglpPWV8MA0KCW49bGVuKHQpDQoJaWYgaT49bGVuKHQpOnI9Tm9uZQ0KCWVsc2U6cj10W2ldDQoJYT1pKzENCgl3aGlsZShhPG4pOg0KCQlzPXRbYV0NCgkJcj10W2FdPXIrKHM+PjFeLSgxJnMpKQ0KCQlhKz0xDQoJcmV0dXJuIHQJDQoNCg0KZGVmIGRlY29kZUltcGxpY2l0KGlucHV0LG4pOg0KCUlNUExJQ0lUX0hFQURFUl9MRU5HVEg9Mw0KCUlNUExJQ0lUX0hFQURFUl9NQVNLX0xFTkdUSD0xDQoJSU1QTElDSVRfSEVBREVSX1BSSU1JVElWRV9MRU5HVEg9MA0KCUlNUExJQ0lUX0hFQURFUl9FWFBFQ1RFRF9JTkRFWD0yDQoJaGlnaFdhdGVybWFyaz0yDQoJDQoJdD1pbnB1dA0KCWU9WzBdKnRbSU1QTElDSVRfSEVBREVSX1BSSU1JVElWRV9MRU5HVEhdDQoJYT10W0lNUExJQ0lUX0hFQURFUl9FWFBFQ1RFRF9JTkRFWF0NCglzPXRbSU1QTElDSVRfSEVBREVSX01BU0tfTEVOR1RIXQ0KCW89dFtJTVBMSUNJVF9IRUFERVJfTEVOR1RIOnMrSU1QTElDSVRfSEVBREVSX0xFTkdUSF0NCglyPWhpZ2hXYXRlcm1hcmsNCgl1PTMyKnMtbGVuKGUpDQoJbD0xPDwzMQ0KCWg9MAkNCgl3aGlsZShoPHMpOg0KCQljPW9baF0NCgkJZD0zMg0KCQlwPWgqZA0KCQlpZiBoPT1zLTE6Zj11DQoJCWVsc2U6Zj0wDQoJCWcxPWYNCgkJd2hpbGUoZzE8ZCk6DQoJCQlpZiBjJmw+PmcxOg0KCQkJCWVbcF09dFtuXQ0KCQkJCW4rPTEJDQoJCQllbHNlOg0KCQkJCWlmIHI6DQoJCQkJCWVbcF09YQ0KCQkJCWVsc2U6DQoJCQkJCWVbcF09YQ0KCQkJCQlhKz0xCQkJDQoJCQlnMSs9MQ0KCQkJcCs9MQ0KCQloKz0xDQoJcmV0dXJuIGUJCQ0KCQ0KCQ0KZGVmIGRlY29kZVdhdGVybWFyayh0LGUsaSk6DQoJbj1pWzBdDQoJcj1sZW4odCkNCglhPTANCgl3aGlsZShhPHIpOg0KCQlzPW4tdFthXQ0KCQllW2FdPXMNCgkJaWYgbjw9czpuPXMrMQ0KCQlhKz0xDQoJcmV0dXJuIGUsbg0KDQoNCmRlZiBkZWNvZGVRdWFudGl6ZShpbnB1dCxzLGEsaXRlbXNpemUpOg0KCXg9WzBdKmxlbihpbnB1dCkNCglpZD0wDQoJZm9yIHIgaW4gcmFuZ2UobGVuKGlucHV0KS9pdGVtc2l6ZSk6DQoJCWZvciBsIGluIHJhbmdlKGl0ZW1zaXplKToNCgkJCXhbaWRdPXNbbF0raW5wdXRbaWRdKmFbbF0NCgkJCWlkKz0xDQoJcmV0dXJuIHgJCQ0KCQkNCg0KZGVmIGRlY29kZVByZWRpY3QoaW5kaWNlcyxpbnB1dCxpdGVtc2l6ZSk6CQ0KCXQ9aW5wdXQJDQoJaWYgbGVuKGluZGljZXMpPjA6DQoJCXQ9aW5wdXQJDQoJCWU9aXRlbXNpemUNCgkJaT1pbmRpY2VzCQ0KCQluPWxlbih0KS9lDQoJCXI9WzBdKm4NCgkJYT1sZW4oaSktMQ0KCQlyW2lbMF1dPTENCgkJcltpWzFdXT0xDQoJCXJbaVsyXV09MQkNCgkJcz0yDQoJCXdoaWxlKHM8YSk6DQoJCQlvPXMtMg0KCQkJdT1pW29dDQoJCQlsPWlbbysxXQ0KCQkJaD1pW28rMl0NCgkJCWM9aVtvKzNdDQoJCQlpZiAxIT1yW2NdOg0KCQkJCXJbY109MQ0KCQkJCXUqPWUNCgkJCQlsKj1lDQoJCQkJaCo9ZQ0KCQkJCWMqPWUJCQkNCgkJCQlkPTANCgkJCQl3aGlsZShkPGUpOg0KCQkJCQl0W2MrZF09dFtjK2RdK3RbbCtkXSt0W2grZF0tdFt1K2RdDQoJCQkJCWQrPTENCgkJCXMrPTENCglyZXR1cm4gdA0KDQoNCg0KY2xhc3MgTm9kZToNCglkZWYgX19pbml0X18oc2VsZik6DQoJCXNlbGYubmFtZT1Ob25lDQoJCXNlbGYuY2hpbGRyZW49W10NCgkJc2VsZi5vc2dDaGlsZHJlbj1bXQ0KCQlzZWxmLm9mZnNldD1Ob25lDQoJCXNlbGYuc3RhcnQ9Tm9uZQ0KCQlzZWxmLmVuZD1Ob25lDQoJCXNlbGYuaGVhZGVyPScnDQoJCXNlbGYuZGF0YT0nJw0KCQlzZWxmLnBhcmVudD1Ob25lDQoJDQpjbGFzcyBZc29uOg0KCWRlZiBfX2luaXRfXyhzZWxmKToNCgkJc2VsZi5pbnB1dD1Ob25lDQoJCXNlbGYuZmlsZW5hbWU9Tm9uZQ0KCQlzZWxmLnJvb3Q9Tm9kZSgpDQoJCXNlbGYubG9nPUZhbHNlDQoJZGVmIHBhcnNlKHNlbGYpOg0KCQlnbG9iYWwgb2Zmc2V0LHN0cmluZyx0eHQNCgkJaWYgc2VsZi5maWxlbmFtZSBpcyBub3QgTm9uZToNCgkJCWZpbGU9b3BlbihzZWxmLmZpbGVuYW1lLCdyYicpDQoJCQlzZWxmLmlucHV0PWZpbGUucmVhZCgpLnJlcGxhY2UoJ1x4MjAnLCcnKS5yZXBsYWNlKCdceDBBJywnJykucmVwbGFjZSgnJiMzNDsnLCciJykJCQ0KCQkNCgkJCWxpbmU9c2VsZi5pbnB1dA0KCQkJaWYgc2VsZi5sb2c9PVRydWU6dHh0PW9wZW4oc2VsZi5maWxlbmFtZSsnLnlzJywndycpDQoJCQkNCgkJCWlmIGxpbmUgaXMgbm90IE5vbmUgYW5kIGxlbihsaW5lKT4wOg0KCQkJCW9mZnNldD0wDQoJCQkJbj0wDQoJCQkJc3RyaW5nPVtdDQoJCQkJaWYgc2VsZi5pbnB1dFtvZmZzZXRdPT0neyc6DQoJCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQkJdHh0LndyaXRlKCdcbicpDQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2hlYWRlcjonK3N0cihOb25lKSkNCgkJCQkJCXR4dC53cml0ZSgnIHsgJytzdHIob2Zmc2V0KSkNCgkJCQkJCXR4dC53cml0ZSgnICcqKG4rNCkpDQoJCQkJaWYgc2VsZi5pbnB1dFtvZmZzZXRdPT0nWyc6DQoJCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQkJdHh0LndyaXRlKCdcbicpDQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2hlYWRlcjonK3N0cihOb25lKSkNCgkJCQkJCXR4dC53cml0ZSgnIFsgJytzdHIob2Zmc2V0KSkNCgkJCQkJCXR4dC53cml0ZSgnICcqKG4rNCkpDQoJCQkJc2VsZi50cmVlKHNlbGYucm9vdCxuKQ0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJyAnKm4pDQoJCQkJDQoJCQlmaWxlLmNsb3NlKCkJDQoJCQkNCgkJaWYgc2VsZi5sb2c9PVRydWU6dHh0LmNsb3NlKCkNCg0KCWRlZiBnZXRUcmVlMShzZWxmLHBhcmVudCxsaXN0LGtleSk6DQoJCWZvciBjaGlsZCBpbiBwYXJlbnQuY2hpbGRyZW46DQoJCQlpZiBrZXkgaW4gY2hpbGQuaGVhZGVyOg0KCQkJCWxpc3QuYXBwZW5kKGNoaWxkKQ0KCQkJc2VsZi5nZXRUcmVlKGNoaWxkLGxpc3Qsa2V5KQ0KCQkJDQoJCQ0KCWRlZiBnZXRUcmVlKHNlbGYscGFyZW50LGxpc3Qsa2V5KToNCgkJaWYga2V5IGluIHBhcmVudC5oZWFkZXIgb3Iga2V5IGluIHBhcmVudC5kYXRhOg0KCQkJbGlzdC5hcHBlbmQocGFyZW50KQ0KCQlmb3IgY2hpbGQgaW4gcGFyZW50LmNoaWxkcmVuOg0KCQkJc2VsZi5nZXRUcmVlKGNoaWxkLGxpc3Qsa2V5KQkNCg0KCWRlZiB2YWx1ZXMoc2VsZixkYXRhLHR5cGUpOg0KCQlsaXN0PXt9DQoJCUE9ZGF0YS5zcGxpdCgnLCcpDQoJCWlmIHR5cGU9PSc6JzoNCgkJCWZvciBhIGluIEE6DQoJCQkJaWYgJzonIGluIGE6DQoJCQkJCWM9MA0KCQkJCQlhbGlzdD1bXQ0KCQkJCQlzdHJpbmc9JycNCgkJCQkJZm9yIGIgaW4gYToNCgkJCQkJCWlmIGI9PSciJyBhbmQgYz09MDoNCgkJCQkJCQlpZiBsZW4oc3RyaW5nKT4wOmFsaXN0LmFwcGVuZChzdHJpbmcpDQoJCQkJCQkJc3RyaW5nPScnDQoJCQkJCQkJc3RyaW5nKz1iDQoJCQkJCQkJYz0xDQoJCQkJCQllbGlmIGI9PSciJyBhbmQgYz09MToNCgkJCQkJCQlzdHJpbmcrPWINCgkJCQkJCQlpZiBsZW4oc3RyaW5nKT4wOmFsaXN0LmFwcGVuZChzdHJpbmcpDQoJCQkJCQkJc3RyaW5nPScnDQoJCQkJCQkJYz0wDQoJCQkJCQllbGlmIGI9PSc6JzoNCgkJCQkJCQlwYXNzDQoJCQkJCQllbHNlOnN0cmluZys9Yg0KCQkJCQlpZiBsZW4oc3RyaW5nKT4wOmFsaXN0LmFwcGVuZChzdHJpbmcpDQoJCQkJCWlmIGxlbihhbGlzdCk9PTI6CQ0KCQkJCQkJbGlzdFthbGlzdFswXV09YWxpc3RbMV0JCQ0KCQkJCQlpZiBsZW4oYWxpc3QpPT0xOgkNCgkJCQkJCWxpc3RbYWxpc3RbMF1dPSdOb25lJwkJCQkJCQ0KCQkJCQkJCQkJDQoJCQkJCQkNCgkJCQkJCQkNCgkJCQkJI2lmIGEuY291bnQoJzonKT4xOg0KCQlpZiB0eXBlPT0nZic6DQoJCQlsaXN0PW1hcChmbG9hdCxBKQ0KCQlpZiB0eXBlPT0naSc6DQoJCQlsaXN0PW1hcChpbnQsQSkNCgkJaWYgdHlwZT09J3MnOg0KCQkJbGlzdD1BDQoJCXJldHVybiBsaXN0CQ0KDQoJZGVmIGdldFZhbHVlKHNlbGYsdmFsdWVzLG5hbWUsdHlwZT1Ob25lKToNCgkJaWYgbmFtZSBpbiB2YWx1ZXM6DQoJCQlpZiB0eXBlPT0nImYiJzoNCgkJCQlyZXR1cm4gZmxvYXQodmFsdWVzW25hbWVdLnNwbGl0KCciJylbMV0pDQoJCQllbGlmIHR5cGU9PSciaSInOg0KCQkJCXJldHVybiBpbnQodmFsdWVzW25hbWVdLnNwbGl0KCciJylbMV0pDQoJCQllbGlmIHR5cGU9PSdpJzoNCgkJCQkjcHJpbnQgbmFtZSx2YWx1ZXNbbmFtZV0NCgkJCQlpZiB2YWx1ZXNbbmFtZV0hPSdOb25lJzoNCgkJCQkJcmV0dXJuIGludCh2YWx1ZXNbbmFtZV0ucmVwbGFjZSgnXCInLCAnJykpDQoJCQkJZWxzZToNCgkJCQkJcmV0dXJuIE5vbmUNCgkJCWVsaWYgdHlwZT09JyIiJzoNCgkJCQlyZXR1cm4gdmFsdWVzW25hbWVdLnNwbGl0KCciJylbMV0NCgkJCWVsc2U6DQoJCQkJcmV0dXJuIHZhbHVlc1tuYW1lXQ0KCQllbHNlOg0KCQkJcmV0dXJuIE5vbmUNCgkJDQoJZGVmIGdldChzZWxmLG5vZGUsa2V5KToJCQ0KCQlsaXN0PVtdDQoJCXNlbGYuZ2V0VHJlZShub2RlLGxpc3Qsa2V5KQ0KCQlpZiBsZW4obGlzdCk+MDoNCgkJCXJldHVybiBsaXN0CQ0KCQllbHNlOg0KCQkJcmV0dXJuIE5vbmUNCgkJCQ0KCWRlZiB0cmVlKHNlbGYscGFyZW50Tm9kZSxuKToNCgkJZ2xvYmFsIG9mZnNldCxzdHJpbmcNCgkJbis9NA0KCQlvZmZzZXQrPTENCgkJd2hpbGUoVHJ1ZSk6CQ0KCQkJaWYJb2Zmc2V0Pj1sZW4oc2VsZi5pbnB1dCk6YnJlYWsNCgkJCXZhbHVlPXNlbGYuaW5wdXRbb2Zmc2V0XQ0KCQkJaWYgdmFsdWU9PSd9JzoNCgkJCQlpZiBzZWxmLmxvZz09VHJ1ZToNCgkJCQkJdHh0LndyaXRlKCdcbicpDQoJCQkJCWlmIGxlbihzdHJpbmcpPjA6DQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2RhdGE6JytzZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdKQkNCgkJCQkJZWxzZToJDQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2RhdGE6Tm9uZScpCQkJCQ0KCQkJCQl0eHQud3JpdGUoJ1xuJysnICcqbisnIH0gJytzdHIob2Zmc2V0KSkNCgkJCQlpZiBsZW4oc3RyaW5nKT4wOgkNCgkJCQkJcGFyZW50Tm9kZS5kYXRhPXNlbGYuaW5wdXRbc3RyaW5nWzBdOm9mZnNldF0NCgkJCQlzdHJpbmc9W10NCgkJCQlvZmZzZXQrPTEJCQkNCgkJCQlicmVhaw0KCQkJDQoJCQllbGlmIHZhbHVlPT0neyc6DQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCXR4dC53cml0ZSgnXG4nKQ0KCQkJCQlpZiBsZW4oc3RyaW5nKT4wOg0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydoZWFkZXI6JytzZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdKQkNCgkJCQkJZWxzZToJDQoJCQkJCQl0eHQud3JpdGUoJyAnKm4rJ2hlYWRlcjpOb25lJykJCQkJDQoJCQkJCXR4dC53cml0ZSgnIHsgJytzdHIob2Zmc2V0KSkNCgkJCQkJdHh0LndyaXRlKCcgJyoobis0KSkNCgkJCQkjcHJpbnQgcm91bmQoMTAwKm9mZnNldC9mbG9hdChsZW4oc2VsZi5pbnB1dCkpLDMpLCdwcm9jZW50Jw0KCQkJCW5vZGU9Tm9kZSgpDQoJCQkJbm9kZS5wYXJlbnQ9cGFyZW50Tm9kZQ0KCQkJCXBhcmVudE5vZGUuY2hpbGRyZW4uYXBwZW5kKG5vZGUpDQoJCQkJbm9kZS5vZmZzZXQ9b2Zmc2V0DQoJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJbm9kZS5oZWFkZXI9c2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XQ0KCQkJCXN0cmluZz1bXQ0KCQkJCXNlbGYudHJlZShub2RlLG4pDQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCXR4dC53cml0ZSgnICcqbikNCgkJCQkNCgkJCWVsaWYgdmFsdWU9PSddJzoNCgkJCQlpZiBsZW4oc3RyaW5nKT4wOg0KCQkJCQlwYXJlbnROb2RlLmRhdGE9c2VsZi5pbnB1dFtzdHJpbmdbMF06b2Zmc2V0XQ0KCQkJCQ0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJ1xuJykNCgkJCQkJaWYgbGVuKHN0cmluZyk+MDoNCgkJCQkJCXR4dC53cml0ZSgnICcqbisnZGF0YTonK3NlbGYuaW5wdXRbc3RyaW5nWzBdOm9mZnNldF0rJ1xuJykJDQoJCQkJCWVsc2U6CQ0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydkYXRhOk5vbmUnKQkJCQkJCQkNCgkJCQkJdHh0LndyaXRlKCcgJypuKycgXSAnK3N0cihvZmZzZXQpKQ0KCQkJCQkNCgkJCQlvZmZzZXQrPTENCgkJCQlzdHJpbmc9W10NCgkJCQlicmVhaw0KCQkJDQoJCQllbGlmIHZhbHVlPT0nWyc6DQoJCQkJaWYgc2VsZi5sb2c9PVRydWU6DQoJCQkJCXR4dC53cml0ZSgnXG4nKQ0KCQkJCQlpZiBsZW4oc3RyaW5nKT4wOg0KCQkJCQkJdHh0LndyaXRlKCcgJypuKydoZWFkZXI6JytzZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdKQ0KCQkJCQllbHNlOgkNCgkJCQkJCXR4dC53cml0ZSgnICcqbisnaGVhZGVyOk5vbmUnKQ0KCQkJCQl0eHQud3JpdGUoJyBbICcrc3RyKG9mZnNldCkpDQoJCQkJCXR4dC53cml0ZSgnICcqKG4rNCkpDQoJCQkJI3ByaW50IHJvdW5kKDEwMCpvZmZzZXQvZmxvYXQobGVuKHNlbGYuaW5wdXQpKSwzKSwncHJvY2VudCcNCgkJCQlub2RlPU5vZGUoKQ0KCQkJCW5vZGUucGFyZW50PXBhcmVudE5vZGUNCgkJCQlwYXJlbnROb2RlLmNoaWxkcmVuLmFwcGVuZChub2RlKQ0KCQkJCW5vZGUub2Zmc2V0PW9mZnNldA0KCQkJCW5vZGUubmFtZT1zdHJpbmcNCgkJCQlpZiBsZW4oc3RyaW5nKT4wOg0KCQkJCQlub2RlLmhlYWRlcj1zZWxmLmlucHV0W3N0cmluZ1swXTpvZmZzZXRdDQoJCQkJZWxzZToNCgkJCQkJbm9kZS5oZWFkZXI9JycNCgkJCQlzdHJpbmc9W10NCgkJCQlzZWxmLnRyZWUobm9kZSxuKQ0KCQkJCWlmIHNlbGYubG9nPT1UcnVlOg0KCQkJCQl0eHQud3JpdGUoJyAnKm4pDQoJCQllbHNlOgkJCQ0KCQkJCSNzdHJpbmcrPXZhbHVlDQoJCQkJaWYgbGVuKHN0cmluZyk9PTA6DQoJCQkJCXN0cmluZy5hcHBlbmQob2Zmc2V0KQ0KCQkJCW9mZnNldCs9MQ0KCQkNCmRlZiBnZXRVbmlxdWVJRCh5cyxkYXRhKToNCglVbmlxdWVJRD1Ob25lDQoJdmFsdWVzPXlzLnZhbHVlcyhkYXRhLCc6JykNCglpZiAnIlVuaXF1ZUlEIicgaW4gdmFsdWVzOg0KCQlVbmlxdWVJRD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJVbmlxdWVJRCInLCdpJykNCglyZXR1cm4gVW5pcXVlSUQJDQoJDQoNCmNsYXNzIE5ld05vZGU6DQoJZGVmIF9faW5pdF9fKHNlbGYpOg0KCQlzZWxmLm5vZGU9Tm9uZQ0KCQlzZWxmLnBhcmVudD1Ob25lDQoJCXNlbGYuY2hpbGRyZW49W10NCgkJc2VsZi5VbmlxdWVJRD1Ob25lDQoJDQpkZWYgZ2V0SURUcmVlKHlzLHBhcmVudE5vZGUsbixwYXJlbnROZXdOb2RlKToNCglpZiBsZW4ocGFyZW50Tm9kZS5oZWFkZXIpIT0wIGFuZCBwYXJlbnROb2RlLmhlYWRlciE9JywnOg0KCQluKz00DQoJVW5pcXVlSUQ9Z2V0VW5pcXVlSUQoeXMscGFyZW50Tm9kZS5kYXRhKQ0KCWlmIFVuaXF1ZUlEOg0KCQlwYXJlbnROZXdOb2RlLlVuaXF1ZUlEPVVuaXF1ZUlEDQoJZm9yIGNoaWxkIGluIHBhcmVudE5vZGUuY2hpbGRyZW46DQoJCWlmIGxlbihjaGlsZC5oZWFkZXIpIT0wIGFuZCBjaGlsZC5oZWFkZXIhPScsJzoNCgkJCW5ld05vZGU9TmV3Tm9kZSgpDQoJCQlVbmlxdWVJRD1nZXRVbmlxdWVJRCh5cyxjaGlsZC5oZWFkZXIpDQoJCQlpZiBVbmlxdWVJRDoNCgkJCQlwYXJlbnROZXdOb2RlLlVuaXF1ZUlEPVVuaXF1ZUlEDQoJCQluZXdOb2RlLm5vZGU9Y2hpbGQNCgkJCXBhcmVudE5ld05vZGUuY2hpbGRyZW4uYXBwZW5kKG5ld05vZGUpDQoJCQluZXdOb2RlTGlzdC5hcHBlbmQobmV3Tm9kZSkNCgkJCW5ld05vZGUucGFyZW50PXBhcmVudE5vZGUNCgkJCXBhcmVudE5ld05vZGUxPW5ld05vZGUNCgkJCWdldElEVHJlZSh5cyxjaGlsZCxuLHBhcmVudE5ld05vZGUxKQ0KCQllbHNlOgkNCgkJCWdldElEVHJlZSh5cyxjaGlsZCxuLHBhcmVudE5ld05vZGUpDQoJCQkNCgkJCQkJCQkJDQpkZWYgZ2V0UGF0aChGaWxlKToNCglwYXRoPW9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkrb3Muc2VwK0ZpbGUuc3BsaXQoJy5neicpWzBdDQoJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKGZpbGVuYW1lKStvcy5zZXArRmlsZSsnLnR4dCcNCglpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoZmlsZW5hbWUpK29zLnNlcCtGaWxlDQoJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWU6cmV0dXJuIHBhdGgNCgllbHNlOnJldHVybiBOb25lDQoJCQkNCmRlZiByZWFkRmxvYXRzKGJyLG9mZnNldCxzaXplLGl0ZW1TaXplKToNCglpZiBici5pbnB1dEZpbGUubW9kZT09J3JiJzoNCgkJYnIuc2VlayhvZmZzZXQpDQoJCWkgPSAwDQoJCW51bWJlcnMgPSBbXQ0KCQl3aGlsZSBpIDwgc2l6ZSAqIGl0ZW1TaXplOg0KCQkJbnVtYmVycy5hcHBlbmQoZmxvYXQoc3RydWN0LnVucGFjaygnPGYnLGJyLmlucHV0RmlsZS5yZWFkKDQpKVswXSkpDQoJCQlpICs9IDENCgkJcmV0dXJuIG51bWJlcnMJCQkNCg0KZGVmIFZlcnRleE5vcm1hbCh5cyxiKToNCgluPTIwDQoJU2l6ZT1Ob25lDQoJT2Zmc2V0PU5vbmUNCglFbmNvZGluZz1Ob25lDQoJSXRlbVNpemU9Tm9uZQ0KCXR5cGU9Tm9uZQ0KCW5vcm1hbEFycmF5PVtdCQ0KCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCglpZiAnIkl0ZW1TaXplIicgaW4gdmFsdWVzOg0KCQlJdGVtU2l6ZT1pbnQodmFsdWVzWyciSXRlbVNpemUiJ10pCQkJCQkNCgkJVWludDMyQXJyYXk9eXMuZ2V0KGIsJyJVaW50MzJBcnJheSInKQ0KCQlpZiBVaW50MzJBcnJheToNCgkJCXR5cGU9J1VpbnQzMkFycmF5Jw0KCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCWlmIEVuY29kaW5nPT0nInZhcmludCInOgkJCQkJCQ0KCQkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJCWlmIHBhdGg6DQoJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWJ5dGVzPWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJCW5vcm1hbEFycmF5LmFwcGVuZChbYnl0ZXMsRW5jb2RpbmcsSXRlbVNpemVdKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCgkJRmxvYXQzMkFycmF5ID0geXMuZ2V0KGIsICciRmxvYXQzMkFycmF5IicpDQoJCWlmIEZsb2F0MzJBcnJheToNCgkJCXR5cGU9J0Zsb2F0MzJBcnJheScNCgkJCXZhbHVlcz15cy52YWx1ZXMoRmxvYXQzMkFycmF5WzBdLmRhdGEsJzonKQ0KCQkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInKQ0KCQkJaWYgRW5jb2RpbmcgIT0gJyJ2YXJpbnQiJzoNCgkJCQlwYXRoID0gZ2V0UGF0aChGaWxlKQ0KCQkJCWlmIHBhdGg6DQoJCQkJCWdsb2JhbCBtb2RlbElEDQoJCQkJCWZpbGUgPSBvcGVuKHBhdGgsICJyYiIpDQoJCQkJCWcgPSBCaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJYnl0ZXMgPSByZWFkRmxvYXRzKGcsIE9mZnNldCwgU2l6ZSwgSXRlbVNpemUpDQoJCQkJCXdpdGggb3BlbigiLi97dGVtcFBhdGh9L3ZlcnRleE5vcm1hbERhdGEvIiArIHN0cihtb2RlbElEKSArICIuZGF0IiwgImEiKSBhcyBtb2RlbERhdGE6DQoJCQkJCQltb2RlbElEICs9IDENCgkJCQkJCWZvciBsaW5lIGluIGJ5dGVzOg0KCQkJCQkJCW1vZGVsRGF0YS53cml0ZShzdHIobGluZSkgKyAiXG4iKQ0KCQkJCQlub3JtYWxBcnJheS5hcHBlbmQoW2J5dGVzLCBFbmNvZGluZywgSXRlbVNpemVdKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCglyZXR1cm4gbm9ybWFsQXJyYXkJDQoJDQpkZWYgVmVydGV4KHlzLGIpOg0KCW49MjANCglTaXplPU5vbmUNCglPZmZzZXQ9Tm9uZQ0KCUVuY29kaW5nPU5vbmUNCglJdGVtU2l6ZT1Ob25lDQoJdHlwZT1Ob25lDQoJdmVydGV4QXJyYXk9W10JDQoJdmFsdWVzPXlzLnZhbHVlcyhiLmRhdGEsJzonKQ0KCWlmICciSXRlbVNpemUiJyBpbiB2YWx1ZXM6DQoJCUl0ZW1TaXplPWludCh2YWx1ZXNbJyJJdGVtU2l6ZSInXSkJCQkJCQ0KCQlJbnQzMkFycmF5PXlzLmdldChiLCciSW50MzJBcnJheSInKQ0KCQlpZiBJbnQzMkFycmF5Og0KCQkJdHlwZT0nSW50MzJBcnJheScNCgkJCXZhbHVlcz15cy52YWx1ZXMoSW50MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCSN3cml0ZShsb2csW3R5cGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmddLG4pDQoJCQlpZiBFbmNvZGluZz09JyJ2YXJpbnQiJzoJCQkJCQkNCgkJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCQlpZiBwYXRoOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlieXRlcz1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCQl2ZXJ0ZXhBcnJheS5hcHBlbmQoW2J5dGVzLEVuY29kaW5nLEl0ZW1TaXplXSkNCgkJCQkJZmlsZS5jbG9zZSgpDQoJCQkJCQ0KCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KGIsJyJGbG9hdDMyQXJyYXkiJykNCgkJaWYgRmxvYXQzMkFycmF5Og0KCQkJdHlwZT0nRmxvYXQzMkFycmF5Jw0KCQkJI3ByaW50IG1vZGUsdHlwZQ0KCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykNCgkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicpDQoJCQkjd3JpdGUobG9nLFt0eXBlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdFbmNvZGluZzonLEVuY29kaW5nXSxuKQ0KCQkJaWYgRW5jb2RpbmchPScidmFyaW50Iic6CQkJCQkJDQoJCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQkJaWYgcGF0aDoNCgkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJZy5zZWVrKE9mZnNldCkNCgkJCQkJYnl0ZXM9Zy5mKFNpemUqSXRlbVNpemUpDQoJCQkJCWxpc3Q9W10NCgkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQlsaXN0LmFwcGVuZChieXRlc1ttKkl0ZW1TaXplOm0qSXRlbVNpemUrSXRlbVNpemVdKQ0KCQkJCQl2ZXJ0ZXhBcnJheS5hcHBlbmQoW2xpc3QsRW5jb2RpbmddKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCglyZXR1cm4gdmVydGV4QXJyYXkJCQkJDQoJDQpkZWYgVGV4Q29vcmQoeXMsYik6DQoJbj0yMA0KCVNpemU9Tm9uZQ0KCU9mZnNldD1Ob25lDQoJRW5jb2Rpbmc9Tm9uZQ0KCUl0ZW1TaXplPU5vbmUNCgl0eXBlPU5vbmUJDQoJVGV4Q29vcmRBcnJheT1bXQ0KCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCglpZiAnIkl0ZW1TaXplIicgaW4gdmFsdWVzOg0KCQlJdGVtU2l6ZT1pbnQodmFsdWVzWyciSXRlbVNpemUiJ10pCQkJCQkNCgkJSW50MzJBcnJheT15cy5nZXQoYiwnIkludDMyQXJyYXkiJykNCgkJaWYgSW50MzJBcnJheToNCgkJCXR5cGU9J0ludDMyQXJyYXknDQoJCQl2YWx1ZXM9eXMudmFsdWVzKEludDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykNCgkJCUVuY29kaW5nPXlzLmdldFZhbHVlKHZhbHVlcywnIkVuY29kaW5nIicpDQoJCQlpZiBFbmNvZGluZz09JyJ2YXJpbnQiJzoJCQkJCQkNCgkJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCQlpZiBwYXRoOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlieXRlcz1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCQlUZXhDb29yZEFycmF5LmFwcGVuZChbYnl0ZXMsRW5jb2RpbmcsSXRlbVNpemVdKQ0KCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJDQoJCUZsb2F0MzJBcnJheT15cy5nZXQoYiwnIkZsb2F0MzJBcnJheSInKQ0KCQlpZiBGbG9hdDMyQXJyYXk6DQoJCQl0eXBlPSdGbG9hdDMyQXJyYXknDQoJCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlGaWxlPXlzLmdldFZhbHVlKHZhbHVlcywnIkZpbGUiJywnIiInKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJykNCgkJCWlmIEVuY29kaW5nIT0nInZhcmludCInOgkJCQkJCQ0KCQkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJCWlmIHBhdGg6DQoJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCWcuc2VlayhPZmZzZXQpDQoJCQkJCWJ5dGVzPWcuZihTaXplKkl0ZW1TaXplKQ0KCQkJCQlsaXN0PVtdDQoJCQkJCWZvciBtIGluIHJhbmdlKFNpemUpOg0KCQkJCQkJdSx2PWJ5dGVzW20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0NCgkJCQkJCWxpc3QuYXBwZW5kKFt1LDEtdl0pDQoJCQkJCVRleENvb3JkQXJyYXkuYXBwZW5kKFtsaXN0LEVuY29kaW5nXSkNCgkJCQkJZmlsZS5jbG9zZSgpDQoJcmV0dXJuIFRleENvb3JkQXJyYXkNCgkNCmRlZiBDb2xvcih5cyxiKToNCgluPTIwDQoJU2l6ZT1Ob25lDQoJT2Zmc2V0PU5vbmUNCglFbmNvZGluZz1Ob25lDQoJSXRlbVNpemU9Tm9uZQ0KCXR5cGU9Tm9uZQkJCQkNCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJY29sb3JBcnJheT1bXQ0KCWlmICciSXRlbVNpemUiJyBpbiB2YWx1ZXM6DQoJCUl0ZW1TaXplPWludCh2YWx1ZXNbJyJJdGVtU2l6ZSInXSkJCQkJCQ0KCQlVaW50OEFycmF5PXlzLmdldChiLCciVWludDhBcnJheSInKQ0KCQlpZiBVaW50OEFycmF5Og0KCQkJdHlwZT0iVWludDhBcnJheSINCgkJCXZhbHVlcz15cy52YWx1ZXMoVWludDhBcnJheVswXS5kYXRhLCc6JykNCgkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpCQ0KCQkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykJCQkJCQ0KCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQlpZiBwYXRoOg0KCQkJCWlmIEVuY29kaW5nIT0nInZhcmludCInOg0KCQkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQlnLnNlZWsoT2Zmc2V0KQ0KCQkJCQlieXRlcz1nLkIoU2l6ZSpJdGVtU2l6ZSkNCgkJCQkJbGlzdD1bXQ0KCQkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJCWxpc3QuYXBwZW5kKGJ5dGVzW20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0pDQoJCQkJCWNvbG9yQXJyYXk9bGlzdA0KCQkJCQlmaWxlLmNsb3NlKCkJCQkJCQ0KCQlGbG9hdDMyQXJyYXk9eXMuZ2V0KGIsJyJGbG9hdDMyQXJyYXkiJykNCgkJaWYgRmxvYXQzMkFycmF5Og0KCQkJdHlwZT0iRmxvYXQzMkFycmF5Ig0KCQkJdmFsdWVzPXlzLnZhbHVlcyhGbG9hdDMyQXJyYXlbMF0uZGF0YSwnOicpDQoJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJywnIiInKQkNCgkJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpCQkJCQkNCgkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJaWYgcGF0aDoNCgkJCQlpZiBFbmNvZGluZyE9JyJ2YXJpbnQiJzoNCgkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQkJZy5zZWVrKE9mZnNldCkNCgkJCQkJYnl0ZXM9Zy5mKFNpemUqSXRlbVNpemUpDQoJCQkJCWxpc3Q9W10NCgkJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCQlpdGVtcz1ieXRlc1ttKkl0ZW1TaXplOm0qSXRlbVNpemUrSXRlbVNpemVdDQoJCQkJCQlBPVtdDQoJCQkJCQlmb3IgaXRlbSBpbiBpdGVtczoNCgkJCQkJCQlBLmFwcGVuZChpbnQoaXRlbSoyNTYpKQ0KCQkJCQkJbGlzdC5hcHBlbmQoQSkNCgkJCQkJY29sb3JBcnJheT1saXN0DQoJCQkJCWZpbGUuY2xvc2UoKQ0KCXJldHVybiBjb2xvckFycmF5CQkJCQkJCQ0KCQ0KCQ0KCQ0KZGVmIGdldEluZGljZXMoaXRlbXNpemUsc2l6ZSxvZmZzZXQsdHlwZSxnLG1vZGUsbWFnaWMpOg0KCWlmIHR5cGUhPSJVaW50OEFycmF5IjpieXRlcz1kZWNvZGVWYXJpbnQoZyxvZmZzZXQsc2l6ZSppdGVtc2l6ZSx0eXBlKQ0KCWVsc2U6DQoJCWcuc2VlayhvZmZzZXQpDQoJCWJ5dGVzPWxpc3QoZy5CKHNpemUqaXRlbXNpemUpKQkJDQoJd3JpdGUobG9nLFttYWdpYyxtb2RlLHR5cGVdLDApDQoJd3JpdGUobG9nLGJ5dGVzLDApCQkNCgkNCglJTVBMSUNJVF9IRUFERVJfTEVOR1RIPTMNCglJTVBMSUNJVF9IRUFERVJfTUFTS19MRU5HVEg9MQ0KCUlNUExJQ0lUX0hFQURFUl9QUklNSVRJVkVfTEVOR1RIPTANCglJTVBMSUNJVF9IRUFERVJfRVhQRUNURURfSU5ERVg9Mg0KCWhpZ2hXYXRlcm1hcms9Mg0KCQ0KCU1pc3NpbmdDb25kaXRpb249c2tpcGRlY29kZQ0KCWlmIE1pc3NpbmdDb25kaXRpb24hPTE6DQoJCQ0KCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWs9SU1QTElDSVRfSEVBREVSX0xFTkdUSCtieXRlc1tJTVBMSUNJVF9IRUFERVJfTUFTS19MRU5HVEhdDQoJCQkJCWJ5dGVzPWRlY29kZURlbHRhKGJ5dGVzLGspCQ0KCQkJCQkjd3JpdGUobG9nLFttYWdpYyxrXSwwKQkNCgkJCQkJI3dyaXRlKGxvZyxieXRlcywwKQkJDQoJCQkJCWJ5dGVzPWRlY29kZUltcGxpY2l0KGJ5dGVzLGspDQoJCQkJCSN3cml0ZShsb2csW21hZ2ljLGtdLDApCQ0KCQkJCQkjd3JpdGUobG9nLGJ5dGVzLDApCQkJDQoJCQkJCWk9W21hZ2ljXQkNCgkJCQkJYnl0ZXMsbWFnaWM9ZGVjb2RlV2F0ZXJtYXJrKGJ5dGVzLGJ5dGVzLGkpDQoJCQkJCSN3cml0ZShsb2csW21hZ2ljXSwwKQkNCgkJCQkJI3dyaXRlKGxvZyxieXRlcywwKQkNCgkJCQkNCgkJZWxpZiBtb2RlPT0nIlRSSUFOR0xFUyInOg0KCQkJCQlrPTANCgkJCQkJYnl0ZXM9ZGVjb2RlRGVsdGEoYnl0ZXMsaykNCgkJCQkJI3dyaXRlKGxvZyxbbWFnaWNdLDApCQ0KCQkJCQkjd3JpdGUobG9nLGJ5dGVzLDApCQkJDQoJCQkJCWk9W21hZ2ljXQkNCgkJCQkJYnl0ZXMsbWFnaWM9ZGVjb2RlV2F0ZXJtYXJrKGJ5dGVzLGJ5dGVzLGkpDQoJCQkJCSN3cml0ZShsb2csW21hZ2ljXSwwKQkNCgkJCQkJI3dyaXRlKGxvZyxieXRlcywwKQkNCgkJDQoJCQ0KCQkNCgkJDQoJcmV0dXJuIG1hZ2ljLGJ5dGVzDQoJDQoJCQkJDQpkZWYgUHJpbWl0aXZlU2V0TGlzdCh5cyxjaGlsZCk6DQoJZ2xvYmFsIG1hZ2ljDQoJbW9kZT1Ob25lDQoJbWFnaWM9MA0KCW49MTYNCglpbmRpY2VBcnJheT1bXQ0KCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoJCQkJCQ0KCQliPWNoaWxkLm5vZGUNCgkJaWYgJyJEcmF3RWxlbWVudHNVSW50IicgaW4gYi5oZWFkZXI6CQkJDQoJCQl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJCQltb2RlPXZhbHVlc1snIk1vZGUiJ10JCQkNCgkJCVNpemU9Tm9uZQ0KCQkJT2Zmc2V0PU5vbmUNCgkJCUVuY29kaW5nPU5vbmUNCgkJCUl0ZW1TaXplPU5vbmUNCgkJCXR5cGU9Tm9uZQ0KCQkJaWYgbW9kZSE9JyJMSU5FUyInOg0KCQkJCUluZGljZXM9eXMuZ2V0KGIsJyJJbmRpY2VzIicpDQoJCQkJaWYgSW5kaWNlczoNCgkJCQkJdmFsdWVzPXlzLnZhbHVlcyhJbmRpY2VzWzBdLmRhdGEsJzonKQ0KCQkJCQlJdGVtU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJJdGVtU2l6ZSInLCdpJykNCgkJCQkJVWludDMyQXJyYXk9eXMuZ2V0KEluZGljZXNbMF0sJyJVaW50MzJBcnJheSInKQ0KCQkJCQl0eXBlPSJVaW50MzJBcnJheSINCgkJCQkJI3ByaW50ICJEcmF3RWxlbWVudHNVSW50Iix0eXBlDQoJCQkJCWlmIFVpbnQzMkFycmF5Og0KCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhVaW50MzJBcnJheVswXS5kYXRhLCc6JykNCgkJCQkJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJCQkJCU9mZnNldD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJPZmZzZXQiJywnaScpDQoJCQkJCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpDQoJCQkJCQkjd3JpdGUobG9nLFsnSW5kaWNlOicsJ21vZGU6Jyxtb2RlLHR5cGUsJ1NpemU6JyxTaXplLCdPZmZzZXQ6JyxPZmZzZXQsJ0VuY29kaW5nOicsRW5jb2RpbmcsJ21hZ2ljOicsbWFnaWNdLG4pDQoJCQkJCQlpZiBFbmNvZGluZz09J3ZhcmludCc6DQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArIm1vZGVsX2ZpbGUuYmluIg0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwK3ZhbHVlc1snIkZpbGUiJ10uc3BsaXQoJyInKVsxXSMrJy50eHQnDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWU6DQoJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCW1hZ2ljLGluZGljZUxpc3Q9Z2V0SW5kaWNlcyhJdGVtU2l6ZSxTaXplLE9mZnNldCx0eXBlLGcsbW9kZSxtYWdpYykNCgkJCQkJCQkJaW5kaWNlQXJyYXkuYXBwZW5kKFtpbmRpY2VMaXN0LG1vZGVdKQ0KCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCSNlbHNlOg0KCQkJIwlwcmludCAnTElORVMnDQoJCQkJDQoJCWlmICciRHJhd0VsZW1lbnRzVVNob3J0IicgaW4gYi5oZWFkZXI6CQkNCgkJCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCgkJCW1vZGU9dmFsdWVzWyciTW9kZSInXQkJCQ0KCQkJU2l6ZT1Ob25lDQoJCQlPZmZzZXQ9Tm9uZQ0KCQkJRW5jb2Rpbmc9Tm9uZQ0KCQkJSXRlbVNpemU9Tm9uZQ0KCQkJdHlwZT1Ob25lDQoJCQlpZiBtb2RlIT0nIkxJTkVTIic6DQoJCQkJSW5kaWNlcz15cy5nZXQoYiwnIkluZGljZXMiJykNCgkJCQlpZiBJbmRpY2VzOg0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEluZGljZXNbMF0uZGF0YSwnOicpDQoJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQ0KCQkJCQlVaW50MTZBcnJheT15cy5nZXQoSW5kaWNlc1swXSwnIlVpbnQxNkFycmF5IicpDQoJCQkJCXR5cGU9IlVpbnQxNkFycmF5Ig0KCQkJCQkjcHJpbnQgIkRyYXdFbGVtZW50c1VTaG9ydCIsdHlwZQ0KCQkJCQlpZiBVaW50MTZBcnJheToNCgkJCQkJCXZhbHVlcz15cy52YWx1ZXMoVWludDE2QXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJywnIiInKQ0KCQkJCQkJI3dyaXRlKGxvZyxbJ0luZGljZTonLCdtb2RlOicsbW9kZSx0eXBlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdFbmNvZGluZzonLEVuY29kaW5nLCdtYWdpYzonLG1hZ2ljXSxuKQ0KCQkJCQkJI3ByaW50IEVuY29kaW5nDQoJCQkJCQlpZiBFbmNvZGluZz09J3ZhcmludCc6DQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArIm1vZGVsX2ZpbGUuYmluIg0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwK3ZhbHVlc1snIkZpbGUiJ10uc3BsaXQoJyInKVsxXSMrJy50eHQnDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWU6DQoJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCW1hZ2ljLGluZGljZUxpc3Q9Z2V0SW5kaWNlcyhJdGVtU2l6ZSxTaXplLE9mZnNldCx0eXBlLGcsbW9kZSxtYWdpYykNCgkJCQkJCQkJaW5kaWNlQXJyYXkuYXBwZW5kKFtpbmRpY2VMaXN0LG1vZGVdKQ0KCQkJCQkJCQlmaWxlLmNsb3NlKCkNCgkJCQkJCWVsc2U6DQoJCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PUZhbHNlOnBhdGg9b3MucGF0aC5kaXJuYW1lKHlzLmZpbGVuYW1lKStvcy5zZXArIm1vZGVsX2ZpbGUuYmluIg0KCQkJCQkJCWlmIG9zLnBhdGguZXhpc3RzKHBhdGgpPT1GYWxzZTpwYXRoPW9zLnBhdGguZGlybmFtZSh5cy5maWxlbmFtZSkrb3Muc2VwK3ZhbHVlc1snIkZpbGUiJ10uc3BsaXQoJyInKVsxXSMrJy50eHQnDQoJCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWU6DQoJCQkJCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJCQkJCWcuc2VlayhPZmZzZXQpDQoJCQkJCQkJCWluZGljZUxpc3Q9Zy5IKEl0ZW1TaXplKlNpemUpDQoJCQkJCQkJCWluZGljZUFycmF5LmFwcGVuZChbaW5kaWNlTGlzdCxtb2RlXSkNCgkJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkjZWxzZToNCgkJCSMJcHJpbnQgJ0xJTkVTJw0KCQkJDQoJCWlmICciRHJhd0VsZW1lbnRzVUJ5dGUiJyBpbiBiLmhlYWRlcjoJCQkNCgkJCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCgkJCW1vZGU9dmFsdWVzWyciTW9kZSInXQkJCQ0KCQkJU2l6ZT1Ob25lDQoJCQlPZmZzZXQ9Tm9uZQ0KCQkJRW5jb2Rpbmc9Tm9uZQ0KCQkJSXRlbVNpemU9Tm9uZQ0KCQkJdHlwZT1Ob25lDQoJCQlpZiBtb2RlIT0nIkxJTkVTIic6DQoJCQkJSW5kaWNlcz15cy5nZXQoYiwnIkluZGljZXMiJykNCgkJCQlpZiBJbmRpY2VzOg0KCQkJCQl2YWx1ZXM9eXMudmFsdWVzKEluZGljZXNbMF0uZGF0YSwnOicpDQoJCQkJCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQ0KCQkJCQlVaW50OEFycmF5PXlzLmdldChJbmRpY2VzWzBdLCciVWludDhBcnJheSInKQ0KCQkJCQl0eXBlPSJVaW50OEFycmF5Ig0KCQkJCQkjcHJpbnQgIkRyYXdFbGVtZW50c1VCeXRlIix0eXBlDQoJCQkJCWlmIFVpbnQ4QXJyYXk6DQoJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKFVpbnQ4QXJyYXlbMF0uZGF0YSwnOicpDQoJCQkJCQlTaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIlNpemUiJywnaScpDQoJCQkJCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQkJCQkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJywnIiInKQ0KCQkJCQkJI3dyaXRlKGxvZyxbJ0luZGljZTonLCdtb2RlOicsbW9kZSx0eXBlLCdTaXplOicsU2l6ZSwnT2Zmc2V0OicsT2Zmc2V0LCdFbmNvZGluZzonLEVuY29kaW5nLCdtYWdpYzonLG1hZ2ljXSxuKQ0KCQkJCQkJcGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCsibW9kZWxfZmlsZS5iaW4iDQoJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhwYXRoKT09RmFsc2U6cGF0aD1vcy5wYXRoLmRpcm5hbWUoeXMuZmlsZW5hbWUpK29zLnNlcCt2YWx1ZXNbJyJGaWxlIiddLnNwbGl0KCciJylbMV0jKycudHh0Jw0KCQkJCQkJaWYgb3MucGF0aC5leGlzdHMocGF0aCk9PVRydWU6DQoJCQkJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCQkJCW1hZ2ljLGluZGljZUxpc3Q9Z2V0SW5kaWNlcyhJdGVtU2l6ZSxTaXplLE9mZnNldCx0eXBlLGcsbW9kZSxtYWdpYykNCgkJCQkJCQlpbmRpY2VBcnJheS5hcHBlbmQoW2luZGljZUxpc3QsbW9kZV0pDQoJCQkJCQkJZmlsZS5jbG9zZSgpDQoJCQkjZWxzZToNCgkJCSMJcHJpbnQgJ0xJTkVTJw0KCQkJCQ0KCXJldHVybiBpbmRpY2VBcnJheQ0KCQ0KCQ0KCQkJDQpkZWYgQm9uZXMoeXMsYik6DQoJbj0yMA0KCWJvbmVzPVtdDQoJdmFsdWVzPXlzLnZhbHVlcyhiLmRhdGEsJzonKQ0KCUl0ZW1TaXplPXlzLmdldFZhbHVlKHZhbHVlcywnIkl0ZW1TaXplIicsJ2knKQ0KCVVpbnQxNkFycmF5PXlzLmdldChiLCciVWludDE2QXJyYXkiJykNCglpZiBVaW50MTZBcnJheToNCgkJdHlwZT0iVWludDE2QXJyYXkiDQoJCXZhbHVlcz15cy52YWx1ZXMoVWludDE2QXJyYXlbMF0uZGF0YSwnOicpDQoJCUZpbGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciRmlsZSInLCciIicpDQoJCVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciU2l6ZSInLCdpJykNCgkJT2Zmc2V0PXlzLmdldFZhbHVlKHZhbHVlcywnIk9mZnNldCInLCdpJykNCgkJRW5jb2Rpbmc9eXMuZ2V0VmFsdWUodmFsdWVzLCciRW5jb2RpbmciJywnIiInKQ0KCQkNCgkJaWYgRW5jb2Rpbmc9PSd2YXJpbnQnOgkJCQkJCQ0KCQkJcGF0aD1nZXRQYXRoKEZpbGUpDQoJCQlpZiBwYXRoOg0KCQkJCWZpbGU9b3BlbihwYXRoLCdyYicpDQoJCQkJZz1CaW5hcnlSZWFkZXIoZmlsZSkNCgkJCQlsaXN0PWRlY29kZVZhcmludChnLE9mZnNldCxTaXplKkl0ZW1TaXplLHR5cGUpDQoJCQkJZm9yIG0gaW4gcmFuZ2UoU2l6ZSk6DQoJCQkJCWJvbmVzLmFwcGVuZChsaXN0W20qSXRlbVNpemU6bSpJdGVtU2l6ZStJdGVtU2l6ZV0pDQoJCQkJZmlsZS5jbG9zZSgpDQoJcmV0dXJuIGJvbmVzCQkNCgkJCQ0KZGVmIFdlaWdodHMoeXMsYik6DQoJbj0yMA0KCXdlaWdodHM9W10NCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJSXRlbVNpemU9eXMuZ2V0VmFsdWUodmFsdWVzLCciSXRlbVNpemUiJywnaScpDQoJRmxvYXQzMkFycmF5PXlzLmdldChiLCciRmxvYXQzMkFycmF5IicpDQoJaWYgRmxvYXQzMkFycmF5Og0KCQl2YWx1ZXM9eXMudmFsdWVzKEZsb2F0MzJBcnJheVswXS5kYXRhLCc6JykNCgkJRmlsZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJGaWxlIicsJyIiJykNCgkJU2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJTaXplIicsJ2knKQ0KCQlPZmZzZXQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciT2Zmc2V0IicsJ2knKQ0KCQlFbmNvZGluZz15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJFbmNvZGluZyInLCciIicpDQoJCQ0KCQlpZiBFbmNvZGluZz09J3ZhcmludCc6CQkJCQkNCgkJCXBhdGg9Z2V0UGF0aChGaWxlKQ0KCQkJaWYgcGF0aDoNCgkJCQlmaWxlPW9wZW4ocGF0aCwncmInKQ0KCQkJCWc9QmluYXJ5UmVhZGVyKGZpbGUpDQoJCQkJbGlzdD1kZWNvZGVWYXJpbnQoZyxPZmZzZXQsU2l6ZSpJdGVtU2l6ZSx0eXBlKQ0KCQkJCWZpbGUuY2xvc2UoKQ0KCQllbHNlOgkJCQkJDQoJCQlwYXRoPWdldFBhdGgoRmlsZSkNCgkJCWlmIHBhdGg6DQoJCQkJZmlsZT1vcGVuKHBhdGgsJ3JiJykNCgkJCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQkJCWcuc2VlayhPZmZzZXQpDQoJCQkJbGlzdD1nLmYoU2l6ZSpJdGVtU2l6ZSkNCgkJCQlmb3IgbSBpbiByYW5nZShTaXplKToNCgkJCQkJd2VpZ2h0cy5hcHBlbmQobGlzdFttKkl0ZW1TaXplOm0qSXRlbVNpemUrSXRlbVNpemVdKQ0KCQkJCWZpbGUuY2xvc2UoKQ0KCXJldHVybiB3ZWlnaHRzCQ0KCQ0KZGVmIEJvbmVNYXAoeXMsYik6CQ0KCUJvbmVNYXA9e30NCgl2YWx1ZXM9eXMudmFsdWVzKGIuZGF0YSwnOicpDQoJZm9yIHZhbHVlIGluIHZhbHVlczoNCgkJaWQ9eXMuZ2V0VmFsdWUodmFsdWVzLHZhbHVlLCdpJykNCgkJbmFtZT12YWx1ZS5yZXBsYWNlKCciJywgJycpDQoJCUJvbmVNYXBbbmFtZV09aWQNCglyZXR1cm4gQm9uZU1hcAkNCgkJDQoJCQ0KZGVmIG9zZ0FuaW1hdGlvblJpZ0dlb21ldHJ5KHlzLHBhcmVudE5ld05vZGUpOg0KDQoJbWVzaD1NZXNoKCkNCgltZXNoLnZlcnRleEFycmF5PVtdDQoJbWVzaC5pbmRpY2VBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQwQXJyYXk9W10NCgltZXNoLlRleENvb3JkMUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDNBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQ1QXJyYXk9W10NCgltZXNoLlRleENvb3JkNkFycmF5PVtdDQoJbWVzaC5jb2xvckFycmF5PVtdDQoJbWVzaC5ub3JtYWxBcnJheT1bXQ0KCW1lc2gubW9ycGhBcnJheT17fQ0KCW1lc2guQm9uZXM9W10NCgltZXNoLldlaWdodHM9W10NCgltZXNoLkJvbmVNYXA9e30NCgltZXNoLmF0cmlidXRlcz17fQ0KCW1lc2gucGFyZW50Tm9kZT1wYXJlbnROZXdOb2RlLm5vZGUNCglmb3IgY2hpbGQgaW4gcGFyZW50TmV3Tm9kZS5jaGlsZHJlbjoNCgkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDQpDQoJCWlmICciU291cmNlR2VvbWV0cnkiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkjd3JpdGUobG9nLFtjaGlsZC5ub2RlLmhlYWRlcl0sOCkNCgkJCQlpZiAnIm9zZ0FuaW1hdGlvbi5Nb3JwaEdlb21ldHJ5IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCSN3cml0ZShsb2csW2NoaWxkLm5vZGUuaGVhZGVyXSwxMikNCgkJCQkJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCQkJaWYgJyJWZXJ0ZXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2gudmVydGV4QXJyYXk9VmVydGV4KHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCQlwcmludCAiVHJpYW5nbGVzOiAiICsgc3RyKGxlbihtZXNoLnZlcnRleEFycmF5KSkNCgkJCQkJCQkJCXN5czIuc3Rkb3V0LmZsdXNoKCkNCgkJCQkJCQkJaWYgJyJOb3JtYWwiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2gubm9ybWFsQXJyYXk9VmVydGV4Tm9ybWFsKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQwIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkMEFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQxIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkMUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkM0FycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQ1IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkNUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciVGV4Q29vcmQ2IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLlRleENvb3JkNkFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJCQkJCWlmICciQ29sb3IiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCW1lc2guY29sb3JBcnJheT1Db2xvcih5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJaWYgJyJQcmltaXRpdmVTZXRMaXN0IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJbWVzaC5pbmRpY2VBcnJheT1QcmltaXRpdmVTZXRMaXN0KHlzLGNoaWxkKQ0KCQkJCQkJaWYgJyJVc2VyRGF0YUNvbnRhaW5lciInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCW1lc2guYXRyaWJ1dGVzPVVzZXJEYXRhQ29udGFpbmVyKHlzLGNoaWxkKQ0KCQkJCQkJaWYgJyJNb3JwaFRhcmdldHMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQlwcmludCAiTW9ycGhUYXJnZXRzIg0KCQkJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDE2KQ0KCQkJCQkJCQlpZiAnIm9zZy5HZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJTmFtZT1Ob25lDQoJCQkJCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQkJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDIwKQkJCQkJCQkJCQkNCgkJCQkJCQkJCQlpZiAnIlZlcnRleEF0dHJpYnV0ZUxpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJCQkJCQkJaWYgJyJWZXJ0ZXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCQkJCQlpZiBOYW1lOg0KCQkJCQkJCQkJCQkJCQltZXNoLm1vcnBoQXJyYXlbTmFtZV09VmVydGV4KHlzLGNoaWxkLm5vZGUpCQkJCQkJCQkJCQ0KCQkJCQkJCQkJCWlmICciVW5pcXVlSUQiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmhlYWRlciwnOicpDQoJCQkJCQkJCQkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJCQkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJCQkJCQkJCQkjd3JpdGUobG9nLFtVbmlxdWVJRCxOYW1lXSwyNCkNCgkJCQlpZiAnIm9zZy5HZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQlpZiAnIlZlcnRleEF0dHJpYnV0ZUxpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQkJCWlmICciVmVydGV4IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLnZlcnRleEFycmF5PVZlcnRleCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQkJcHJpbnQgIlRyaWFuZ2xlczogIiArIHN0cihsZW4obWVzaC52ZXJ0ZXhBcnJheSkpDQoJCQkJCQkJCQlzeXMyLnN0ZG91dC5mbHVzaCgpDQoJCQkJCQkJCWlmICciTm9ybWFsIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLm5vcm1hbEFycmF5PVZlcnRleE5vcm1hbCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIlRleENvb3JkMCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5UZXhDb29yZDBBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIlRleENvb3JkMSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5UZXhDb29yZDFBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIlRleENvb3JkMyInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5UZXhDb29yZDNBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIlRleENvb3JkNSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5UZXhDb29yZDVBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIlRleENvb3JkNiInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCQkJbWVzaC5UZXhDb29yZDZBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQkJCQlpZiAnIkNvbG9yIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCQkJCQltZXNoLmNvbG9yQXJyYXk9Q29sb3IoeXMsY2hpbGQubm9kZSkNCgkJCQkJCWlmICciUHJpbWl0aXZlU2V0TGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCW1lc2guaW5kaWNlQXJyYXk9UHJpbWl0aXZlU2V0TGlzdCh5cyxjaGlsZCkNCgkJCQkJCWlmICciVXNlckRhdGFDb250YWluZXIiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQltZXNoLmF0cmlidXRlcz1Vc2VyRGF0YUNvbnRhaW5lcih5cyxjaGlsZCkNCgkJCQkJCQkJDQoJCQkJCQkJCQ0KCQlpZiAnIlZlcnRleEF0dHJpYnV0ZUxpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQlpZiAnIkJvbmVzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guQm9uZXM9Qm9uZXMoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIldlaWdodHMiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5XZWlnaHRzPVdlaWdodHMoeXMsY2hpbGQubm9kZSkNCgkJaWYgJyJCb25lTWFwIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQltZXNoLkJvbmVNYXA9Qm9uZU1hcCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQ0KCXJldHVybiBtZXNoCQ0KCQ0KZGVmIG9zZ0dlb21ldHJ5KHlzLHBhcmVudE5ld05vZGUpOg0KDQoJbWVzaD1NZXNoKCkNCgltZXNoLnZlcnRleEFycmF5PVtdDQoJbWVzaC5pbmRpY2VBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQwQXJyYXk9W10NCgltZXNoLlRleENvb3JkMUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDNBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQ1QXJyYXk9W10NCgltZXNoLlRleENvb3JkNkFycmF5PVtdDQoJbWVzaC5jb2xvckFycmF5PVtdDQoJbWVzaC5ub3JtYWxBcnJheT1bXQ0KCW1lc2gubW9ycGhBcnJheT17fQ0KCW1lc2guQm9uZXM9W10NCgltZXNoLldlaWdodHM9W10NCgltZXNoLkJvbmVNYXA9e30NCgltZXNoLmF0cmlidXRlcz17fQ0KCW1lc2gucGFyZW50Tm9kZT1wYXJlbnROZXdOb2RlLm5vZGUNCglmb3IgY2hpbGQgaW4gcGFyZW50TmV3Tm9kZS5jaGlsZHJlbjoNCgkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDQpDQoJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCSN3cml0ZShsb2csW2NoaWxkLm5vZGUuaGVhZGVyXSw4KQ0KCQkJCWlmICciVmVydGV4IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2gudmVydGV4QXJyYXk9VmVydGV4KHlzLGNoaWxkLm5vZGUpDQoJCQkJCXByaW50ICJUcmlhbmdsZXM6ICIgKyBzdHIobGVuKG1lc2gudmVydGV4QXJyYXkpKQ0KCQkJCQlzeXMyLnN0ZG91dC5mbHVzaCgpDQoJCQkJaWYgJyJOb3JtYWwiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5ub3JtYWxBcnJheT1WZXJ0ZXhOb3JtYWwoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkMCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkMEFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDEiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDFBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQzQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkNSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkNUFycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDYiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDZBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciQ29sb3IiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5jb2xvckFycmF5PUNvbG9yKHlzLGNoaWxkLm5vZGUpDQoJCWlmICciUHJpbWl0aXZlU2V0TGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJbWVzaC5pbmRpY2VBcnJheT1QcmltaXRpdmVTZXRMaXN0KHlzLGNoaWxkKQ0KCQlpZiAnIlVzZXJEYXRhQ29udGFpbmVyIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQltZXNoLmF0cmlidXRlcz1Vc2VyRGF0YUNvbnRhaW5lcih5cyxjaGlsZCkNCglyZXR1cm4gbWVzaAkJDQoJDQoJDQpkZWYgb3NnQW5pbWF0aW9uTW9ycGhHZW9tZXRyeSh5cyxwYXJlbnROZXdOb2RlKToNCg0KCW1lc2g9TWVzaCgpDQoJbWVzaC52ZXJ0ZXhBcnJheT1bXQ0KCW1lc2guaW5kaWNlQXJyYXk9W10NCgltZXNoLlRleENvb3JkMEFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDFBcnJheT1bXQ0KCW1lc2guVGV4Q29vcmQzQXJyYXk9W10NCgltZXNoLlRleENvb3JkNUFycmF5PVtdDQoJbWVzaC5UZXhDb29yZDZBcnJheT1bXQ0KCW1lc2guY29sb3JBcnJheT1bXQ0KCW1lc2gubm9ybWFsQXJyYXk9W10NCgltZXNoLm1vcnBoQXJyYXk9e30NCgltZXNoLkJvbmVzPVtdDQoJbWVzaC5XZWlnaHRzPVtdDQoJbWVzaC5Cb25lTWFwPXt9DQoJbWVzaC5hdHJpYnV0ZXM9e30NCgltZXNoLnBhcmVudE5vZGU9cGFyZW50TmV3Tm9kZS5ub2RlDQoJZm9yIGNoaWxkIGluIHBhcmVudE5ld05vZGUuY2hpbGRyZW46DQoJCWlmICciTW9ycGhUYXJnZXRzIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQlwcmludCAiTW9ycGhUYXJnZXRzIg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCSN3cml0ZShsb2csW2NoaWxkLm5vZGUuaGVhZGVyXSwxNikNCgkJCQlpZiAnIm9zZy5HZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQlOYW1lPU5vbmUNCgkJCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCQkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXJdLDIwKQkJCQkJCQkJCQkNCgkJCQkJCWlmICciVmVydGV4QXR0cmlidXRlTGlzdCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCQkJaWYgJyJWZXJ0ZXgiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQkJCWlmIE5hbWU6DQoJCQkJCQkJCQkJbWVzaC5tb3JwaEFycmF5W05hbWVdPVZlcnRleCh5cyxjaGlsZC5ub2RlKQkJCQkJCQkJCQkNCgkJCQkJCWlmICciVW5pcXVlSUQiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCQkJCQlVbmlxdWVJRD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJVbmlxdWVJRCInLCdpJykNCgkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJCQkJCSN3cml0ZShsb2csW1VuaXF1ZUlELE5hbWVdLDI0KQ0KCQlpZiAnIlZlcnRleEF0dHJpYnV0ZUxpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkjcHJpbnQgY2hpbGQubm9kZS5oZWFkZXINCgkJCQlpZiAnIlZlcnRleCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLnZlcnRleEFycmF5PVZlcnRleCh5cyxjaGlsZC5ub2RlKQ0KCQkJCQlwcmludCAiVHJpYW5nbGVzOiAiICsgc3RyKGxlbihtZXNoLnZlcnRleEFycmF5KSkNCgkJCQkJc3lzMi5zdGRvdXQuZmx1c2goKQ0KCQkJCWlmICciTm9ybWFsIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2gubm9ybWFsQXJyYXk9VmVydGV4Tm9ybWFsKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDAiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDBBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQxIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQxQXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIlRleENvb3JkMyInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQltZXNoLlRleENvb3JkM0FycmF5PVRleENvb3JkKHlzLGNoaWxkLm5vZGUpDQoJCQkJaWYgJyJUZXhDb29yZDUiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJbWVzaC5UZXhDb29yZDVBcnJheT1UZXhDb29yZCh5cyxjaGlsZC5ub2RlKQ0KCQkJCWlmICciVGV4Q29vcmQ2IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guVGV4Q29vcmQ2QXJyYXk9VGV4Q29vcmQoeXMsY2hpbGQubm9kZSkNCgkJCQlpZiAnIkNvbG9yIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCW1lc2guY29sb3JBcnJheT1Db2xvcih5cyxjaGlsZC5ub2RlKQ0KCQlpZiAnIlByaW1pdGl2ZVNldExpc3QiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCW1lc2guaW5kaWNlQXJyYXk9UHJpbWl0aXZlU2V0TGlzdCh5cyxjaGlsZCkNCgkJaWYgJyJVc2VyRGF0YUNvbnRhaW5lciInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJbWVzaC5hdHJpYnV0ZXM9VXNlckRhdGFDb250YWluZXIoeXMsY2hpbGQpDQoJCQkJCQkJCQ0KCQkJCQkJDQoJCQkJDQoJcmV0dXJuIG1lc2gJDQoJCQ0KCQkNCmRlZiBkcmF3TWVzaCh5cyxtZXNoKToJDQoJZGlmZnVzZT1Ob25lCQkNCglub3JtYWw9Tm9uZQkNCglzcGVjdWxhcj1Ob25lDQoJdHJhbnM9Tm9uZQkNCglhbz1Ob25lDQoJcmdiQ29sPU5vbmUNCglyZ2JTcGVjPU5vbmUNCglyZ2JhPU5vbmUJDQoJbW9kZT1Ob25lCQ0KDQoNCg0KCW1hdE5hbWUsZGlmZnVzZSxzcGVjdWxhcixub3JtYWwsYW8sdHJhbnMscmdiQ29sLHJnYlNwZWMscmdiYT1nZXRNYXROYW1lKHlzLG1lc2gucGFyZW50Tm9kZSkNCgkjcHJpbnQgJ21hdE5hbWU6JyxtYXROYW1lLGRpZmZ1c2UNCgl0cnk6DQoJCWlmIGxlbihtZXNoLm5vcm1hbEFycmF5KSA9PSAxOg0KCQkJaWYgbWVzaC5ub3JtYWxBcnJheVswXVsxXSA9PSAnInZhcmludCInOg0KCQkJCWJ5dGVzID0gbWVzaC5ub3JtYWxBcnJheVswXVswXQ0KCQkJCUl0ZW1TaXplID0gbWVzaC5ub3JtYWxBcnJheVswXVsyXQ0KCQkJCWVwcyA9IGZsb2F0KG1lc2guYXRyaWJ1dGVzWyJlcHNpbG9uIl0pDQoJCQkJbnBoaSA9IGZsb2F0KG1lc2guYXRyaWJ1dGVzWyJucGhpIl0pDQoJCQkJc2l6ZSA9IGxlbihieXRlcykgLyBJdGVtU2l6ZQ0KCQkJCWludHMgPSBieXRlcw0KCQkJCWdsb2JhbCBtb2RlbElEDQoJCQkJDQoJCQkJaWYgb3MucGF0aC5leGlzdHMoIm1vZGVsRGF0YS5qcyIpOg0KCQkJCQlvcy5yZW1vdmUoIm1vZGVsRGF0YS5qcyIpDQoJCQkJaWYgb3MucGF0aC5leGlzdHMoIm5vcm1hbHMuZGF0Iik6DQoJCQkJCW9zLnJlbW92ZSgibm9ybWFscy5kYXQiKQ0KCQkJCXdpdGggb3BlbigibW9kZWxEYXRhLmpzIiwgImEiKSBhcyBtb2RlbERhdGE6DQoJCQkJCW1vZGVsSUQgKz0gMQ0KCQkJCQltb2RlbERhdGEud3JpdGUoIm1vZHVsZS5leHBvcnRzLmVwcyA9ICIgKyBzdHIoZXBzKSArICI7XG4iKQ0KCQkJCQltb2RlbERhdGEud3JpdGUoIm1vZHVsZS5leHBvcnRzLm5waGkgPSAiICsgc3RyKG5waGkpICsgIjtcbiIpDQoJCQkJCW1vZGVsRGF0YS53cml0ZSgibW9kdWxlLmV4cG9ydHMuc2l6ZSA9ICIgKyBzdHIoc2l6ZSkgKyAiO1xuIikNCgkJCQkJbW9kZWxEYXRhLndyaXRlKCJtb2R1bGUuZXhwb3J0cy5pZCA9ICIgKyBzdHIobW9kZWxJRCkgKyAiO1xuIikNCgkJCQkJbW9kZWxEYXRhLndyaXRlKCJtb2R1bGUuZXhwb3J0cy5pbnRzID0gIiArIHN0cihieXRlcykgKyAiO1xuIikNCgkJCQkNCgkJCQlzdWJwcm9jZXNzLmNhbGwoKCdub2RlLmV4ZSAuL3t0ZW1wUGF0aH0vY2FsY1ZlcnRleE5vcm1hbHMuanMnKSkNCglleGNlcHQ6DQoJCXBhc3MNCglpZiBsZW4obWVzaC5pbmRpY2VBcnJheSk+MDoNCgkJZm9yIFtpbmRpY2VzLG1vZGVdIGluIG1lc2guaW5kaWNlQXJyYXk6DQoJCQltYXQ9TWF0KCkNCgkJCW1hdC5tYXROYW1lPW1hdE5hbWUNCgkJCW1hdC5yZ2JDb2w9cmdiQ29sDQoJCQltYXQuZGlmZnVzZT1kaWZmdXNlDQoJCQltYXQubm9ybWFsPW5vcm1hbA0KCQkJbWF0LnNwZWN1bGFyPXNwZWN1bGFyDQoJCQltYXQudHJhbnM9dHJhbnMNCgkJCWlmIHRyYW5zOg0KCQkJCW1hdC5aVFJBTlM9VHJ1ZQ0KCQkJI21hdC5hbz1hbw0KCQkJaWYgcmdiYTptYXQucmdiYT1yZ2JhDQoJCQltZXNoLm1hdExpc3QuYXBwZW5kKG1hdCkNCgkJCW1hdC5JRFN0YXJ0PWxlbihtZXNoLmluZGljZUxpc3QpDQoJCQltYXQuSURDb3VudD1sZW4oaW5kaWNlcykNCgkJCW1lc2guaW5kaWNlTGlzdC5leHRlbmQoaW5kaWNlcykNCgkJCWlmIG1vZGU9PSciVFJJQU5HTEVfU1RSSVAiJzptYXQuVFJJU1RSSVA9VHJ1ZQ0KCQkJaWYgbW9kZT09JyJUUklBTkdMRVMiJzptYXQuVFJJQU5HTEU9VHJ1ZQ0KCQkJDQoJCWluZGljZXM9bWVzaC5pbmRpY2VBcnJheVswXVswXQ0KCQltb2RlPW1lc2guaW5kaWNlQXJyYXlbMF1bMV0JCQ0KCWlmIGxlbihtZXNoLnZlcnRleEFycmF5KT09MToNCgkJaWYgbWVzaC52ZXJ0ZXhBcnJheVswXVsxXT09JyJ2YXJpbnQiJzoNCgkJCWlmIG1vZGU6DQoJCQkJYnl0ZXM9bWVzaC52ZXJ0ZXhBcnJheVswXVswXQkJCQkNCgkJCQlJdGVtU2l6ZT1tZXNoLnZlcnRleEFycmF5WzBdWzJdDQoJCQkJaWYgbW9kZT09JyJUUklBTkdMRV9TVFJJUCInOg0KCQkJCQlieXRlcz1kZWNvZGVQcmVkaWN0KGluZGljZXMsYnl0ZXMsSXRlbVNpemUpDQoJCQkJczE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3Z0eF9iYmxfeCddKQ0KCQkJCXMyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd2dHhfYmJsX3knXSkNCgkJCQlzMz1mbG9hdChtZXNoLmF0cmlidXRlc1sndnR4X2JibF96J10pDQoJCQkJcz1bczEsczIsczNdCQkJDQoJCQkJYTE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3Z0eF9oX3gnXSkNCgkJCQlhMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndnR4X2hfeSddKQ0KCQkJCWEzPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd2dHhfaF96J10pDQoJCQkJYT1bYTEsYTIsYTNdDQoJCQkJZmxvYXRzPWRlY29kZVF1YW50aXplKGJ5dGVzLHMsYSxJdGVtU2l6ZSkNCgkJCQltZXNoLnZlcnRQb3NMaXN0PVtmbG9hdHNbbTptK0l0ZW1TaXplXWZvciBtIGluIHJhbmdlKDAsbGVuKGZsb2F0cyksMyldDQoJCQkJI3ByaW50IG1lc2gudmVydFBvc0xpc3QNCgkJCQkjbWVzaC5pbmRpDQoJCQkJI21lc2guZHJhdygpDQoJCWVsc2U6DQoJCQlsaXN0PW1lc2gudmVydGV4QXJyYXlbMF1bMF0NCgkJCW1lc2gudmVydFBvc0xpc3Q9bGlzdA0KCQkJDQoJaWYgbGVuKG1lc2guVGV4Q29vcmQwQXJyYXkpPT0xOg0KCQlpZiBtZXNoLlRleENvb3JkMEFycmF5WzBdWzFdPT0nInZhcmludCInOg0KCQkJaWYgbW9kZToNCgkJCQlieXRlcz1tZXNoLlRleENvb3JkMEFycmF5WzBdWzBdCQkJCQ0KCQkJCUl0ZW1TaXplPW1lc2guVGV4Q29vcmQwQXJyYXlbMF1bMl0NCgkJCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWJ5dGVzPWRlY29kZVByZWRpY3QoaW5kaWNlcyxieXRlcyxJdGVtU2l6ZSkNCgkJCQlzMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfMF9iYmxfeCddKQ0KCQkJCXMyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8wX2JibF95J10pDQoJCQkJcz1bczEsczJdCQkJDQoJCQkJYTE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzBfaF94J10pDQoJCQkJYTI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzBfaF95J10pDQoJCQkJYT1bYTEsYTJdDQoJCQkJZmxvYXRzPWRlY29kZVF1YW50aXplKGJ5dGVzLHMsYSxJdGVtU2l6ZSkNCgkJCQlmb3IgbSBpbiByYW5nZSgwLGxlbihmbG9hdHMpLEl0ZW1TaXplKToNCgkJCQkJdSx2PWZsb2F0c1ttOm0rSXRlbVNpemVdDQoJCQkJCW1lc2gudmVydFVWTGlzdC5hcHBlbmQoW3UsMS12XSkNCgkJZWxzZToNCgkJCWxpc3Q9bWVzaC5UZXhDb29yZDBBcnJheVswXVswXQ0KCQkJbWVzaC52ZXJ0VVZMaXN0PWxpc3QNCgllbGlmIGxlbihtZXNoLlRleENvb3JkMUFycmF5KT09MToNCgkJaWYgbWVzaC5UZXhDb29yZDFBcnJheVswXVsxXT09JyJ2YXJpbnQiJzoNCgkJCWlmIG1vZGU6DQoJCQkJYnl0ZXM9bWVzaC5UZXhDb29yZDFBcnJheVswXVswXQkJCQkNCgkJCQlJdGVtU2l6ZT1tZXNoLlRleENvb3JkMUFycmF5WzBdWzJdDQoJCQkJaWYgbW9kZT09JyJUUklBTkdMRV9TVFJJUCInOg0KCQkJCQlieXRlcz1kZWNvZGVQcmVkaWN0KGluZGljZXMsYnl0ZXMsSXRlbVNpemUpDQoJCQkJczE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzFfYmJsX3gnXSkNCgkJCQlzMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfMV9iYmxfeSddKQ0KCQkJCXM9W3MxLHMyXQkJCQ0KCQkJCWExPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8xX2hfeCddKQ0KCQkJCWEyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8xX2hfeSddKQ0KCQkJCWE9W2ExLGEyXQ0KCQkJCWZsb2F0cz1kZWNvZGVRdWFudGl6ZShieXRlcyxzLGEsSXRlbVNpemUpDQoJCQkJZm9yIG0gaW4gcmFuZ2UoMCxsZW4oZmxvYXRzKSxJdGVtU2l6ZSk6DQoJCQkJCXUsdj1mbG9hdHNbbTptK0l0ZW1TaXplXQ0KCQkJCQltZXNoLnZlcnRVVkxpc3QuYXBwZW5kKFt1LDEtdl0pDQoJCWVsc2U6DQoJCQlsaXN0PW1lc2guVGV4Q29vcmQxQXJyYXlbMF1bMF0NCgkJCW1lc2gudmVydFVWTGlzdD1saXN0DQoJZWxpZiBsZW4obWVzaC5UZXhDb29yZDNBcnJheSk9PTE6DQoJCWlmIG1lc2guVGV4Q29vcmQzQXJyYXlbMF1bMV09PScidmFyaW50Iic6DQoJCQlpZiBtb2RlOg0KCQkJCWJ5dGVzPW1lc2guVGV4Q29vcmQzQXJyYXlbMF1bMF0JCQkJDQoJCQkJSXRlbVNpemU9bWVzaC5UZXhDb29yZDNBcnJheVswXVsyXQ0KCQkJCWlmIG1vZGU9PSciVFJJQU5HTEVfU1RSSVAiJzoNCgkJCQkJYnl0ZXM9ZGVjb2RlUHJlZGljdChpbmRpY2VzLGJ5dGVzLEl0ZW1TaXplKQ0KCQkJCXMxPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl8zX2JibF94J10pDQoJCQkJczI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzNfYmJsX3knXSkNCgkJCQlzPVtzMSxzMl0JCQkNCgkJCQlhMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfM19oX3gnXSkNCgkJCQlhMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfM19oX3knXSkNCgkJCQlhPVthMSxhMl0NCgkJCQlmbG9hdHM9ZGVjb2RlUXVhbnRpemUoYnl0ZXMscyxhLEl0ZW1TaXplKQ0KCQkJCWZvciBtIGluIHJhbmdlKDAsbGVuKGZsb2F0cyksSXRlbVNpemUpOg0KCQkJCQl1LHY9ZmxvYXRzW206bStJdGVtU2l6ZV0NCgkJCQkJbWVzaC52ZXJ0VVZMaXN0LmFwcGVuZChbdSwxLXZdKQ0KCQllbHNlOg0KCQkJbGlzdD1tZXNoLlRleENvb3JkM0FycmF5WzBdWzBdDQoJCQltZXNoLnZlcnRVVkxpc3Q9bGlzdA0KCWVsaWYgbGVuKG1lc2guVGV4Q29vcmQ1QXJyYXkpPT0xOg0KCQlpZiBtZXNoLlRleENvb3JkNUFycmF5WzBdWzFdPT0nInZhcmludCInOg0KCQkJaWYgbW9kZToNCgkJCQlieXRlcz1tZXNoLlRleENvb3JkNUFycmF5WzBdWzBdCQkJCQ0KCQkJCUl0ZW1TaXplPW1lc2guVGV4Q29vcmQ1QXJyYXlbMF1bMl0NCgkJCQlpZiBtb2RlPT0nIlRSSUFOR0xFX1NUUklQIic6DQoJCQkJCWJ5dGVzPWRlY29kZVByZWRpY3QoaW5kaWNlcyxieXRlcyxJdGVtU2l6ZSkNCgkJCQlzMT1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfNV9iYmxfeCddKQ0KCQkJCXMyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl81X2JibF95J10pDQoJCQkJcz1bczEsczJdCQkJDQoJCQkJYTE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzVfaF94J10pDQoJCQkJYTI9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzVfaF95J10pDQoJCQkJYT1bYTEsYTJdDQoJCQkJZmxvYXRzPWRlY29kZVF1YW50aXplKGJ5dGVzLHMsYSxJdGVtU2l6ZSkNCgkJCQlmb3IgbSBpbiByYW5nZSgwLGxlbihmbG9hdHMpLEl0ZW1TaXplKToNCgkJCQkJdSx2PWZsb2F0c1ttOm0rSXRlbVNpemVdDQoJCQkJCW1lc2gudmVydFVWTGlzdC5hcHBlbmQoW3UsMS12XSkNCgkJZWxzZToNCgkJCWxpc3Q9bWVzaC5UZXhDb29yZDVBcnJheVswXVswXQ0KCQkJbWVzaC52ZXJ0VVZMaXN0PWxpc3QNCgllbGlmIGxlbihtZXNoLlRleENvb3JkNkFycmF5KT09MToNCgkJaWYgbWVzaC5UZXhDb29yZDZBcnJheVswXVsxXT09JyJ2YXJpbnQiJzoNCgkJCWlmIG1vZGU6DQoJCQkJYnl0ZXM9bWVzaC5UZXhDb29yZDZBcnJheVswXVswXQkJCQkNCgkJCQlJdGVtU2l6ZT1tZXNoLlRleENvb3JkNkFycmF5WzBdWzJdDQoJCQkJaWYgbW9kZT09JyJUUklBTkdMRV9TVFJJUCInOg0KCQkJCQlieXRlcz1kZWNvZGVQcmVkaWN0KGluZGljZXMsYnl0ZXMsSXRlbVNpemUpDQoJCQkJczE9ZmxvYXQobWVzaC5hdHJpYnV0ZXNbJ3V2XzZfYmJsX3gnXSkNCgkJCQlzMj1mbG9hdChtZXNoLmF0cmlidXRlc1sndXZfNl9iYmxfeSddKQ0KCQkJCXM9W3MxLHMyXQkJCQ0KCQkJCWExPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl82X2hfeCddKQ0KCQkJCWEyPWZsb2F0KG1lc2guYXRyaWJ1dGVzWyd1dl82X2hfeSddKQ0KCQkJCWE9W2ExLGEyXQ0KCQkJCWZsb2F0cz1kZWNvZGVRdWFudGl6ZShieXRlcyxzLGEsSXRlbVNpemUpDQoJCQkJZm9yIG0gaW4gcmFuZ2UoMCxsZW4oZmxvYXRzKSxJdGVtU2l6ZSk6DQoJCQkJCXUsdj1mbG9hdHNbbTptK0l0ZW1TaXplXQ0KCQkJCQltZXNoLnZlcnRVVkxpc3QuYXBwZW5kKFt1LDEtdl0pDQoJCWVsc2U6DQoJCQlsaXN0PW1lc2guVGV4Q29vcmQ2QXJyYXlbMF1bMF0NCgkJCW1lc2gudmVydFVWTGlzdD1saXN0DQoJaWYgbGVuKG1lc2guY29sb3JBcnJheSk+MDoNCgkJbWVzaC52ZXJ0Q29sTGlzdD1tZXNoLmNvbG9yQXJyYXkNCgkJDQoJCQ0KCQkNCg0KZGVmIFVzZXJEYXRhQ29udGFpbmVyKHlzLGIpOg0KCWF0cmlidXRlcz17fQ0KCVZhbHVlcz15cy5nZXQoYi5ub2RlLCciVmFsdWVzIicpDQoJaWYgVmFsdWVzOg0KCQlmb3IgYSBpbiBWYWx1ZXNbMF0uY2hpbGRyZW46DQoJCQl2YWx1ZXM9eXMudmFsdWVzKGEuZGF0YSwnOicpDQoJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJVmFsdWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciVmFsdWUiJywnIiInKQ0KCQkJI2lmIE5hbWU6d3JpdGUobG9nLFtOYW1lLFZhbHVlXSxuKzQpDQoJCQlpZiBOYW1lOmF0cmlidXRlc1tOYW1lXT1WYWx1ZQkNCglyZXR1cm4gYXRyaWJ1dGVzCQkJDQoJCQ0KZGVmIG9zZ05vZGUoeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKToNCglmb3IgY2hpbGQgaW4gcGFyZW50TmV3Tm9kZS5jaGlsZHJlbjoNCgkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJaWYgJyJvc2cuR2VvbWV0cnkiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQltZXNoPW9zZ0dlb21ldHJ5KHlzLGNoaWxkKQ0KCQkJCW1lc2gucGFyZW50Qm9uZT1wYXJlbnRCb25lDQoJCQkJbW9kZWwubWVzaExpc3QuYXBwZW5kKG1lc2gpDQoJCQlpZiAnIm9zZ0FuaW1hdGlvbi5SaWdHZW9tZXRyeSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCW1lc2g9b3NnQW5pbWF0aW9uUmlnR2VvbWV0cnkoeXMsY2hpbGQpDQoJCQkJbWVzaC5wYXJlbnRCb25lPXBhcmVudEJvbmUNCgkJCQltb2RlbC5tZXNoTGlzdC5hcHBlbmQobWVzaCkNCgkJCWlmICcib3NnQW5pbWF0aW9uLk1vcnBoR2VvbWV0cnkiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQltZXNoPW9zZ0FuaW1hdGlvbk1vcnBoR2VvbWV0cnkoeXMsY2hpbGQpDQoJCQkJbWVzaC5wYXJlbnRCb25lPXBhcmVudEJvbmUNCgkJCQltb2RlbC5tZXNoTGlzdC5hcHBlbmQobWVzaCkNCgkJCQkNCgkJCQkNCmRlZiBvc2dNYXRyaXhUcmFuc2Zvcm0oeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKToNCglib25lPUJvbmUoKQkNCglib25lLk5hbWU9Tm9uZQ0KCWJvbmUuVXBkYXRlTmFtZT1Ob25lDQoJYm9uZS5tYXRyaXg9TWF0cml4KCkucmVzaXplNHg0KCkjLmludmVydCgpDQoJaWYgcGFyZW50Qm9uZTpib25lLnBhcmVudE5hbWU9cGFyZW50Qm9uZS5uYW1lDQoJc2tlbGV0b24uYm9uZUxpc3QuYXBwZW5kKGJvbmUpDQoJZm9yIGNoaWxkIGluIHBhcmVudE5ld05vZGUuY2hpbGRyZW46DQoJCWlmICciTWF0cml4IicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuZGF0YSwnZicpCQ0KCQkJYm9uZS5tYXRyaXg9TWF0cml4NHg0KHZhbHVlcykNCgkJCWlmIHBhcmVudEJvbmU6Ym9uZS5tYXRyaXgqPXBhcmVudEJvbmUubWF0cml4CQ0KCQlpZiAnIlVuaXF1ZUlEIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCVVuaXF1ZUlEPXlzLmdldFZhbHVlKHZhbHVlcywnIlVuaXF1ZUlEIicsJ2knKQ0KCQkJYm9uZS5uYW1lPSdVbmlxdWVJRF8nK3N0cihVbmlxdWVJRCkNCgkJaWYgJyJOYW1lIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkjYmluZEJvbmUuTmFtZT1OYW1lDQoJCQlib25lLk5hbWU9TmFtZQ0KCQlpZiAnIlVwZGF0ZUNhbGxiYWNrcyInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJZm9yIGNoaWxkIGluIGNoaWxkLmNoaWxkcmVuOg0KCQkJCWlmICcib3NnQW5pbWF0aW9uLlVwZGF0ZU1hdHJpeFRyYW5zZm9ybSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQlmb3IgY2hpbGQgaW4gY2hpbGQuY2hpbGRyZW46DQoJCQkJCQlpZiAnIk5hbWUiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGNoaWxkLm5vZGUuaGVhZGVyLCc6JykNCgkJCQkJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJCQkJCSNiaW5kQm9uZS5VcGRhdGVOYW1lPU5hbWUNCgkJCQkJCQlib25lLlVwZGF0ZU5hbWU9TmFtZQ0KCXJldHVybiBib25lCQkNCgkJCQ0KCQkNCmRlZiBvc2dBbmltYXRpb25Cb25lKHlzLHBhcmVudE5ld05vZGUscGFyZW50Qm9uZSk6DQoJYm9uZT1Cb25lKCkNCglza2VsZXRvbi5ib25lTGlzdC5hcHBlbmQoYm9uZSkJCQ0KCWJvbmUubWF0cml4PU1hdHJpeCgpLnJlc2l6ZTR4NCgpIy5pbnZlcnQoKQ0KCWJpbmRCb25lPUJvbmUoKQ0KCWJpbmRCb25lLm1hdHJpeD1NYXRyaXgoKS5yZXNpemU0eDQoKSMuaW52ZXJ0KCkNCgliaW5kQm9uZS5OYW1lPU5vbmUNCglib25lLk5hbWU9Tm9uZQ0KCWJvbmUuVXBkYXRlTmFtZT1Ob25lDQoJYmluZEJvbmUuVXBkYXRlTmFtZT1Ob25lDQoJZm9yIGNoaWxkIGluIHBhcmVudE5ld05vZGUuY2hpbGRyZW46DQoJCWlmICciSW52QmluZE1hdHJpeEluU2tlbGV0b25TcGFjZSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmRhdGEsJ2YnKQkNCgkJCW1hdHJpeD1NYXRyaXg0eDQodmFsdWVzKQ0KCQkJYmluZEJvbmUubWF0cml4PW1hdHJpeC5pbnZlcnQoKQkNCgkJCWJpbmRza2VsZXRvbi5ib25lTGlzdC5hcHBlbmQoYmluZEJvbmUpDQoJCWlmICciVW5pcXVlSUQiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5oZWFkZXIsJzonKQ0KCQkJVW5pcXVlSUQ9eXMuZ2V0VmFsdWUodmFsdWVzLCciVW5pcXVlSUQiJywnaScpDQoJCQliaW5kQm9uZS5uYW1lPSdVbmlxdWVJRF8nK3N0cihVbmlxdWVJRCkNCgkJCWJvbmUubmFtZT0nVW5pcXVlSURfJytzdHIoVW5pcXVlSUQpDQoJCWlmICciTmFtZSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmhlYWRlciwnOicpDQoJCQlOYW1lPXlzLmdldFZhbHVlKHZhbHVlcywnIk5hbWUiJywnIiInKQ0KCQkJYmluZEJvbmUuTmFtZT1OYW1lDQoJCQlib25lLk5hbWU9TmFtZQ0KCQkJI2JvbmVJbmRla3NMaXN0W05hbWVdPWJvbmUubmFtZQ0KCQlpZiAnIk1hdHJpeCInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJdmFsdWVzPXlzLnZhbHVlcyhjaGlsZC5ub2RlLmRhdGEsJ2YnKQkNCgkJCWJvbmUubWF0cml4PU1hdHJpeDR4NCh2YWx1ZXMpDQoJCQlpZiBwYXJlbnRCb25lOg0KCQkJCWlmICdNYXRyaXhUcmFuc2Zvcm0nIG5vdCBpbiBwYXJlbnRCb25lLm5hbWU6DQoJCQkJCWJvbmUucGFyZW50TmFtZT1wYXJlbnRCb25lLm5hbWUNCgkJCQlib25lLm1hdHJpeCo9cGFyZW50Qm9uZS5tYXRyaXgNCgkJaWYgJyJVcGRhdGVDYWxsYmFja3MiJyBpbiBjaGlsZC5ub2RlLmhlYWRlcjoNCgkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQlpZiAnIm9zZ0FuaW1hdGlvbi5VcGRhdGVCb25lIicgaW4gY2hpbGQubm9kZS5oZWFkZXI6DQoJCQkJCWZvciBjaGlsZCBpbiBjaGlsZC5jaGlsZHJlbjoNCgkJCQkJCWlmICciTmFtZSInIGluIGNoaWxkLm5vZGUuaGVhZGVyOg0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoY2hpbGQubm9kZS5oZWFkZXIsJzonKQ0KCQkJCQkJCU5hbWU9eXMuZ2V0VmFsdWUodmFsdWVzLCciTmFtZSInLCciIicpDQoJCQkJCQkJYmluZEJvbmUuVXBkYXRlTmFtZT1OYW1lDQoJCQkJCQkJYm9uZS5VcGRhdGVOYW1lPU5hbWUNCglyZXR1cm4gYm9uZQkJCQ0KCQkNCmRlZiBnZXROZXdOb2RlVHJlZSh5cyxwYXJlbnROZXdOb2RlLG4scGFyZW50Qm9uZSxkYXRhKToNCgkNCglpZiAnIm9zZ0FuaW1hdGlvbi5Ta2VsZXRvbiInIGluIHBhcmVudE5ld05vZGUubm9kZS5oZWFkZXI6DQoJCXBhcmVudEJvbmU9b3NnQW5pbWF0aW9uQm9uZSh5cyxwYXJlbnROZXdOb2RlLHBhcmVudEJvbmUpDQoJCWJpbmRza2VsZXRvbi5wYXJlbnRCb25lPXBhcmVudEJvbmUNCglpZiAnIm9zZy5Ob2RlIicgaW4gcGFyZW50TmV3Tm9kZS5ub2RlLmhlYWRlcjoNCgkJb3NnTm9kZSh5cyxwYXJlbnROZXdOb2RlLHBhcmVudEJvbmUpDQoJaWYgJyJvc2cuTWF0cml4VHJhbnNmb3JtIicgaW4gcGFyZW50TmV3Tm9kZS5ub2RlLmhlYWRlcjoNCgkJcGFyZW50Qm9uZT1vc2dNYXRyaXhUcmFuc2Zvcm0oeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKQ0KCWlmICcib3NnQW5pbWF0aW9uLkJvbmUiJyBpbiBwYXJlbnROZXdOb2RlLm5vZGUuaGVhZGVyOg0KCQlwYXJlbnRCb25lPW9zZ0FuaW1hdGlvbkJvbmUoeXMscGFyZW50TmV3Tm9kZSxwYXJlbnRCb25lKQ0KCW4rPTQNCglmb3IgY2hpbGQgaW4gcGFyZW50TmV3Tm9kZS5jaGlsZHJlbjoNCgkJI3dyaXRlKGxvZyxbY2hpbGQubm9kZS5oZWFkZXIsY2hpbGQuVW5pcXVlSURdLG4pDQoJCWdldE5ld05vZGVUcmVlKHlzLGNoaWxkLG4scGFyZW50Qm9uZSxkYXRhKQkJDQoJDQpkZWYgb3NnUGFyc2VyKGZpbGVuYW1lKToNCglnbG9iYWwgc2tlbGV0b24sYmluZHNrZWxldG9uLG1vZGVsLGJvbmVJbmRla3NMaXN0LGZpcnN0bWF0cml4LG5ld05vZGVMaXN0DQoJI1JpZ0dlb21ldHJ5PUZhbHNlDQoJYm9uZUluZGVrc0xpc3Q9e30NCgltb2RlbD1Nb2RlbChmaWxlbmFtZSkNCgltb2RlbC5tYXRMaXN0PXt9DQoJc2tlbGV0b249U2tlbGV0b24oKQ0KCXNrZWxldG9uLkFSTUFUVVJFU1BBQ0U9VHJ1ZQ0KCWJpbmRza2VsZXRvbj1Ta2VsZXRvbigpDQoJYmluZHNrZWxldG9uLnBhcmVudEJvbmU9Tm9uZQ0KCWJpbmRza2VsZXRvbi5BUk1BVFVSRVNQQUNFPVRydWUNCglVbmlxdWVJRExpc3Q9e30NCgl5cz1Zc29uKCkNCgl5cy5sb2c9VHJ1ZQ0KCXlzLmZpbGVuYW1lPWZpbGVuYW1lDQoJeXMucGFyc2UoKQ0KCQ0KCXJvb3Q9eXMucm9vdA0KCW49MA0KCW5ld05vZGVMaXN0PVtdDQoJbmV3Um9vdD1OZXdOb2RlKCkNCgluZXdSb290Lm5vZGU9eXMucm9vdA0KCW5ld05vZGVMaXN0LmFwcGVuZChuZXdSb290KQ0KCWdldElEVHJlZSh5cyx5cy5yb290LG4sbmV3Um9vdCkNCgkNCglyb290PW5ld1Jvb3QNCglnZXROZXdOb2RlVHJlZSh5cyxyb290LG4sTm9uZSxOb25lKQ0KCQ0KI2RlZiBzc3MoKToJDQoJDQoJc2tlbGV0b24uZHJhdygpDQoJCSNmb3IgYm9uZSBpbiBiaW5kc2tlbGV0b24uYm9uZUxpc3Q6DQoJCSMJYm9uZS5tYXRyaXgqPWJpbmRza2VsZXRvbi5wYXJlbnRCb25lLm1hdHJpeA0KCWlmIGxlbihiaW5kc2tlbGV0b24uYm9uZUxpc3QpPjA6CQkNCgkJYmluZHNrZWxldG9uLmRyYXcoKQ0KCWlmIGJpbmRza2VsZXRvbi5wYXJlbnRCb25lIGFuZCBiaW5kc2tlbGV0b24ub2JqZWN0Og0KCQliaW5kc2tlbGV0b24ub2JqZWN0LnNldE1hdHJpeChiaW5kc2tlbGV0b24ucGFyZW50Qm9uZS5tYXRyaXgpDQoJI2JvbmVOYW1lTGlzdD1bXQ0KCQ0KCWZvciBib25lIGluIHNrZWxldG9uLmJvbmVMaXN0Og0KCQlpZiBib25lLlVwZGF0ZU5hbWU6DQoJCQkjTmFtZT1nZXRTcGxpdE5hbWUoYm9uZS5OYW1lLCdfJywtMSkNCgkJCWJvbmVJbmRla3NMaXN0W2JvbmUuVXBkYXRlTmFtZV09Ym9uZS5uYW1lDQoJCQkjcHJpbnQgTmFtZSxib25lLm5hbWUNCgkJCQ0KCW49MAkNCglyZXN1bHQ9MQ0KCUFuaW1hdGlvbnM9eXMuZ2V0KHlzLnJvb3QsJyJvc2dBbmltYXRpb24uQW5pbWF0aW9uIicpCQkNCglpZiBBbmltYXRpb25zOg0KCQkjcmVzdWx0PUJsZW5kZXIuRHJhdy5QdXBNZW51KCJleHBvcnQgYW5pbWF0aW9ucyBhcyAqLmFjdGlvbj8ldHxZZXN8Tm8iKQ0KCQlpZiByZXN1bHQ9PTE6DQoJCQlmb3IgYW5pbWF0aW9uIGluIEFuaW1hdGlvbnM6CQ0KCQkJCWdldEFuaW1hdGlvbih5cyxhbmltYXRpb24sbikNCgkJCQkNCgkJCQkNCgkJDQoJCQ0KCQkNCglmb3IgbWVzaCBpbiBtb2RlbC5tZXNoTGlzdDoNCgkJbWVzaC5CSU5EU0tFTEVUT049c2tlbGV0b24ubmFtZQ0KCQlkcmF3TWVzaCh5cyxtZXNoKQ0KCQkJCQ0KCSNtb2RlbC5nZXRNYXQoKQkNCglyZXN1bHQ9MQ0KCSNyZXN1bHQ9QmxlbmRlci5EcmF3LlB1cE1lbnUoIlNlbmQgbWVzaGVzIHRvIHN0YXJ0cG9zZT8ldHxZZXN8Tm8iKQ0KCQ0KCXJlc3VsdDEwPTEgDQoJCQ0KCWlmIHJlc3VsdDEwPT0xOg0KCQlmb3IgaTEsbWVzaCBpbiBlbnVtZXJhdGUobW9kZWwubWVzaExpc3QpOg0KCQkJcHJpbnQgaTEsJ3ZlcnQ6JyxsZW4obWVzaC52ZXJ0UG9zTGlzdCksJ2NvbDonLGxlbihtZXNoLnZlcnRDb2xMaXN0KSwndXY6JyxsZW4obWVzaC52ZXJ0VVZMaXN0KSwnaW5kaWNlOicsbGVuKG1lc2guaW5kaWNlTGlzdCksJ21hdDonLGxlbihtZXNoLm1hdExpc3QpLCdza2luOicsbGVuKG1lc2guc2tpbkxpc3QpIyxtYXROYW1lDQoJCQlzeXMyLnN0ZG91dC5mbHVzaCgpDQoJCQkjQmxlbmRlci5XaW5kb3cuRHJhd1Byb2dyZXNzQmFyKGZsb2F0KChpMSkvZmxvYXQobGVuKG1vZGVsLm1lc2hMaXN0KSkpLHN0cihsZW4obW9kZWwubWVzaExpc3QpLTEtaTEpKQ0KCQkJDQoJCQltZXNoLkJJTkRTS0VMRVRPTj1za2VsZXRvbi5uYW1lDQoJCQlpZiBsZW4obWVzaC52ZXJ0UG9zTGlzdCk+MDoJDQoJCQkJaWYgbGVuKG1lc2guQm9uZXMpPjAgYW5kIGxlbihtZXNoLldlaWdodHMpPjA6DQoJCQkJCXNraW49U2tpbigpDQoJCQkJCXNraW4uYm9uZU1hcD1bMF0qbGVuKG1lc2guQm9uZU1hcCkNCgkJCQkJbWVzaC5ib25lTmFtZUxpc3Q9WycnXSpsZW4obWVzaC5Cb25lTWFwKQ0KCQkJCQlmb3IgYm9uZU5hbWUgaW4gbWVzaC5Cb25lTWFwOg0KCQkJCQkJZm9yIGJvbmUgaW4gc2tlbGV0b24uYm9uZUxpc3Q6DQoJCQkJCQkJaWYgYm9uZS5OYW1lPT1ib25lTmFtZToNCgkJCQkJCQkJaWQ9bWVzaC5Cb25lTWFwW2JvbmVOYW1lXQ0KCQkJCQkJCQlza2luLmJvbmVNYXBbaWRdPWlkDQoJCQkJCQkJCW1lc2guYm9uZU5hbWVMaXN0W2lkXT1ib25lLm5hbWUJDQoJCQkJCQkJCWJyZWFrCQkJCQ0KCQkJCQltZXNoLnNraW5MaXN0LmFwcGVuZChza2luKQ0KCQkJCQltZXNoLnNraW5JbmRpY2VMaXN0PW1lc2guQm9uZXMNCgkJCQkJbWVzaC5za2luV2VpZ2h0TGlzdD1tZXNoLldlaWdodHMNCgkJCQkNCgkJCQlpZiBiaW5kc2tlbGV0b24ub2JqZWN0IGFuZCBza2VsZXRvbi5vYmplY3Q6DQoJCQkJCWlmIG1lc2gucGFyZW50Qm9uZSBhbmQgbGVuKG1lc2guc2tpbkxpc3QpPjA6DQoJCQkJCQltZXNoLmRyYXcoKQkNCgkJCQkJCW1lc2gub2JqZWN0LmdldERhdGEobWVzaD0xKS50cmFuc2Zvcm0obWVzaC5wYXJlbnRCb25lLm1hdHJpeCkNCgkJCQkJCW1lc2gub2JqZWN0LmdldERhdGEobWVzaD0xKS51cGRhdGUoKQ0KCQkJCQkJI21lc2gub2JqZWN0LnNldE1hdHJpeChtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQkJaWYgcmVzdWx0PT0xOg0KCQkJCQkJCWJpbmRQb3NlKGJpbmRza2VsZXRvbi5vYmplY3Qsc2tlbGV0b24ub2JqZWN0LG1lc2gub2JqZWN0KQ0KCQkJCQkJc2tlbGV0b24ub2JqZWN0Lm1ha2VQYXJlbnREZWZvcm0oW21lc2gub2JqZWN0XSwxLDApDQoJCQkJCWVsaWYgbWVzaC5wYXJlbnRCb25lIGFuZCBsZW4obWVzaC5za2luTGlzdCk9PTA6DQoJCQkJCQltZXNoLnNldFNraW4obWVzaC5wYXJlbnRCb25lLm5hbWUpCQ0KCQkJCQkJbWVzaC5kcmF3KCkJDQoJCQkJCQltZXNoLm9iamVjdC5nZXREYXRhKG1lc2g9MSkudHJhbnNmb3JtKG1lc2gucGFyZW50Qm9uZS5tYXRyaXgpDQoJCQkJCQltZXNoLm9iamVjdC5nZXREYXRhKG1lc2g9MSkudXBkYXRlKCkNCgkJCQkJCXNrZWxldG9uLm9iamVjdC5tYWtlUGFyZW50RGVmb3JtKFttZXNoLm9iamVjdF0sMSwwKQ0KCQkJCWVsc2U6CQ0KCQkJCQlpZiBtZXNoLnBhcmVudEJvbmU6DQoJCQkJCQlpZiBsZW4obWVzaC5za2luTGlzdCk9PTA6DQoJCQkJCQkJbWVzaC5zZXRTa2luKG1lc2gucGFyZW50Qm9uZS5uYW1lKQkNCgkJCQkJCW1lc2guZHJhdygpCQ0KCQkJCQkJbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnRyYW5zZm9ybShtZXNoLnBhcmVudEJvbmUubWF0cml4KQ0KCQkJCQkJbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnVwZGF0ZSgpDQoJCQkJCQkjbWVzaC5vYmplY3Quc2V0TWF0cml4KG1lc2gucGFyZW50Qm9uZS5tYXRyaXgpDQoJCQkJCQkjc2tlbGV0b24ub2JqZWN0Lm1ha2VQYXJlbnRCb25lKFttZXNoLm9iamVjdF0sbWVzaC5wYXJlbnRCb25lLm5hbWUsMCwwKQ0KCQkJCQkJaWYgc2tlbGV0b24ub2JqZWN0IGFuZCBza2VsZXRvbi5vYmplY3Q6DQoJCQkJCQkJc2tlbGV0b24ub2JqZWN0Lm1ha2VQYXJlbnREZWZvcm0oW21lc2gub2JqZWN0XSwxLDApDQoJCQkJCWVsc2U6DQoJCQkJCQkjcHJpbnQgbGVuKG1lc2gudmVydFBvc0xpc3QpDQoJCQkJCQkjcHJpbnQgbWVzaC5pbmRpY2VMaXN0DQoJCQkJCQkjbWVzaC5pbmRpY2VMaXN0PVtdDQoJCQkJCQltZXNoLmRyYXcoKQkNCgkJCQkJCSNtZXNoLm9iamVjdC5nZXREYXRhKG1lc2g9MSkudHJhbnNmb3JtKG1lc2gucGFyZW50Qm9uZS5tYXRyaXgpDQoJCQkJCQkjbWVzaC5vYmplY3QuZ2V0RGF0YShtZXNoPTEpLnVwZGF0ZSgpDQoJCQkJCQkjbWVzaC5vYmplY3Quc2V0TWF0cml4KG1lc2gucGFyZW50Qm9uZS5tYXRyaXgpDQoJCQkJDQoJCQkJIiIiDQoJCQkJaWYgbGVuKG1lc2gubW9ycGhBcnJheSk+MDoJCQ0KCQkJCQluYW1lPW1lc2gub2JqZWN0Lm5hbWUNCgkJCQkJYWN0aW9uPUFjdGlvbigpCQkNCgkJCQkJYWN0aW9uLk1FU0hTUEFDRT1UcnVlDQoJCQkJCWFjdGlvbi5uYW1lPW5hbWUNCgkJCQkJZm9yIGksbW9ycGggaW4gZW51bWVyYXRlKG1lc2gubW9ycGhBcnJheSk6DQoJCQkJCQkjbW9ycGhNZXNoPU1lc2goKQ0KCQkJCQkJI21vcnBoTWVzaC52ZXJ0UG9zTGlzdD1tZXNoLm1vcnBoQXJyYXlbbW9ycGhdWzBdWzBdDQoJCQkJCQkjcHJpbnQgbW9ycGgNCgkJCQkJCSNtb3JwaE1lc2guZHJhdygpDQoJCQkJCQl2ZXJ0TGlzdD1tZXNoLm1vcnBoQXJyYXlbbW9ycGhdWzBdWzBdDQoJCQkJCQlmcmFtZT1pKjUNCgkJCQkJCWFjdGlvbi5zaGFwZUZyYW1lTGlzdC5hcHBlbmQoZnJhbWUpDQoJCQkJCQlhY3Rpb24uc2hhcGVLZXlMaXN0LmFwcGVuZCh2ZXJ0TGlzdCkNCgkJCQkJYWN0aW9uLmRyYXcoKQ0KCQkJCQlhY3Rpb24uc2V0Q29udGV4dCgpDQoJCQkJCSIiIg0KCQkJCQkJDQoJCQkJCQkNCgkJCQkJCQ0KDQoNCgkJbW9kZWwuc2V0KCkJDQoJCQkJCQkNCg0KDQoNCg0KDQoNCg0KDQoNCgkJDQoJCSNmb3IgaSxtZXNoIGluIGVudW1lcmF0ZShtb2RlbC5tZXNoTGlzdCk6DQoJCSMJQmxlbmRlci5XaW5kb3cuRHJhd1Byb2dyZXNzQmFyKGZsb2F0KGkvZmxvYXQobGVuKG1vZGVsLm1lc2hMaXN0KSsxKSksc3RyKC0xK2xlbihtb2RlbC5tZXNoTGlzdCktaSkpDQoJCSNwcmludCAncmVzdWx0OicscmVzdWx0DQoJCWlmIHJlc3VsdCE9MjoNCgkJCWlmCWJpbmRza2VsZXRvbi5vYmplY3Q6DQoJCQkJc2NlbmUgPSBicHkuZGF0YS5zY2VuZXMuYWN0aXZlDQoJCQkJc2NlbmUub2JqZWN0cy51bmxpbmsoYmluZHNrZWxldG9uLm9iamVjdCkNCgkJDQpkZWYgaHRtUGFyc2VyKGZpbGVuYW1lKToNCgl5cz1Zc29uKCkNCgl5cy5sb2c9VHJ1ZQ0KCXlzLmZpbGVuYW1lPWZpbGVuYW1lDQoJeXMucGFyc2UoKQkJDQoJIyNvcy5zeXN0ZW0oJ2NscycpDQoJDQoJCQkNCgkjc3p1a2FtIGlrb255DQoJcHJpbnQgJ3N6dWthbSBpa29ueScNCgkjcHJpbnQgeXMucm9vdA0KCVRIVU1CTkFJTFM9eXMuZ2V0KHlzLnJvb3QsJyJ0aHVtYm5haWxzIicpDQoJcHJpbnQgVEhVTUJOQUlMUw0KCWlrb25hPU5vbmUNCglTSVpFPTANCglpZiBUSFVNQk5BSUxTOg0KCQlmb3IgdGh1bWJuYWlscyBpbiBUSFVNQk5BSUxTOg0KCQkJI3ByaW50IHRodW1ibmFpbHMuaGVhZGVyDQoJCQlVUkw9eXMuZ2V0KHRodW1ibmFpbHMsJyJ1cmwiJykNCgkJCWZvciBhIGluIFVSTDoNCgkJCQl2YWx1ZXM9eXMudmFsdWVzKGEuZGF0YSwnOicpDQoJCQkJdXJsPXlzLmdldFZhbHVlKHZhbHVlcywnInVybCInLCciIicpDQoJCQkJc2l6ZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJzaXplIicsJ2knKQ0KCQkJCWlmIHVybDoNCgkJCQkJYmFzZW5hbWU9b3MucGF0aC5iYXNlbmFtZSh1cmwpCQkJDQoJCQkJCWlmICcuanBlZycgaW4gYmFzZW5hbWU6cGF0aD1zeXMuZGlyK29zLnNlcCtvcy5wYXRoLmJhc2VuYW1lKHVybCkrJy5qcGcnDQoJCQkJCWVsc2U6cGF0aD1zeXMuZGlyK29zLnNlcCtvcy5wYXRoLmJhc2VuYW1lKHVybCkNCgkJCQkJZXhpc3RzPW9zLnBhdGguZXhpc3RzKHBhdGgpDQoJCQkJCSNwcmludCAnaWtvbmEnLGV4aXN0cyxvcy5wYXRoLmJhc2VuYW1lKHVybCkrJy5qcGcnCQkJCQkJCQ0KCQkJCQlpZiBleGlzdHM9PVRydWU6DQoJCQkJCQlpZiBzaXplPlNJWkU6DQoJCQkJCQkJU0laRT1zaXplDQoJCQkJCQkJaWtvbmE9cGF0aA0KCQkJCQkJCQ0KCWlmIGlrb25hOg0KCQkjcHJpbnQgaWtvbmENCgkJZm9yIGZpbGUgaW4gb3MubGlzdGRpcihzeXMuZGlyKToNCgkJCWlmICcuaHRtJyBpbiBmaWxlOg0KCQkJCWlmIG9zLnBhdGguZXhpc3RzKHN5cy5kaXIrb3Muc2VwK2ZpbGUrIi50aHVtYi4xMC5wbmciKT09RmFsc2U6DQoJCQkJCWlmIG9zLnBhdGguZXhpc3RzKGlrb25hKToNCgkJCQkJCW9zLnJlbmFtZShpa29uYSxzeXMuZGlyK29zLnNlcCtmaWxlKyIudGh1bWIuMTAucG5nIikNCgkJCQllbHNlOg0KCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhzeXMuZGlyK29zLnNlcCtmaWxlKyIudGh1bWIuMTEucG5nIik9PUZhbHNlOg0KCQkJCQkJaWYgb3MucGF0aC5leGlzdHMoaWtvbmEpOgkJCQkJCQ0KCQkJCQkJCW9zLnJlbmFtZShpa29uYSxzeXMuZGlyK29zLnNlcCtmaWxlKyIudGh1bWIuMTEucG5nIikNCgkJCQkJDQoJCQkNCgkJDQoJDQoJUkVTVUxUUz15cy5nZXQoeXMucm9vdCwnInJlc3VsdHMiJykJDQoJaWYgUkVTVUxUUzoNCgkJZm9yIHJlc3VsdHMgaW4gUkVTVUxUUzoNCgkJCXdyaXRlKGxvZyxbInJlc3VsdHMiXSwwKQ0KCQkJVUlEUz15cy5nZXQocmVzdWx0cywnInVpZCInKQkNCgkJCWlmIFVJRFM6DQoJCQkJZm9yIFVJRCBpbiBVSURTOg0KCQkJCQkjd3JpdGUobG9nLFtVSUQuaGVhZGVyXSw0KQ0KCQkJCQl1aWQ9Tm9uZQ0KCQkJCQl2YWx1ZXM9Tm9uZQ0KCQkJCQlpZiAnInVpZCInIGluIFVJRC5oZWFkZXI6dmFsdWVzPXlzLnZhbHVlcyhVSUQuaGVhZGVyLCc6JykNCgkJCQkJaWYgJyJ1aWQiJyBpbiBVSUQuZGF0YTp2YWx1ZXM9eXMudmFsdWVzKFVJRC5kYXRhLCc6JykNCgkJCQkJaWYgdmFsdWVzOnVpZD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1aWQiJywnIiInKQ0KCQkJCQl3cml0ZShsb2csWyd1aWQ6Jyx1aWRdLDQpDQoJCQkJCWlmIHVpZDoNCgkJCQkJCWZvcm1hdHM9eXMuZ2V0KFVJRCwnImZvcm1hdCInKQ0KCQkJCQkJaWYgZm9ybWF0czoJCQkJCQkJDQoJCQkJCQkJSU1BR0VTW3VpZF09e30NCgkJCQkJCQlJTUFHRVNbdWlkXVsnQSddPVtOb25lLE5vbmUsMTAwXQ0KCQkJCQkJCUlNQUdFU1t1aWRdWydSR0InXT1bTm9uZSxOb25lLDEwMF0NCgkJCQkJCQlJTUFHRVNbdWlkXVsnTiddPVtOb25lLE5vbmUsMTAwXQ0KCQkJCQkJCUlNQUdFU1t1aWRdWydSJ109W05vbmUsTm9uZSwxMDBdDQoJCQkJCQkJZm9yIGZvcm1hdE5vZGUgaW4gZm9ybWF0czoNCgkJCQkJCQkJd3JpdGUobG9nLFsnaW1hZ2UnXSw4KQkJCQkJCQkJDQoJCQkJCQkJCXZhbHVlcz1Ob25lDQoJCQkJCQkJCWZvcm1hdD1Ob25lDQoJCQkJCQkJCWlmICciZm9ybWF0IicgaW4gZm9ybWF0Tm9kZS5oZWFkZXI6dmFsdWVzPXlzLnZhbHVlcyhmb3JtYXROb2RlLmhlYWRlciwnOicpDQoJCQkJCQkJCWlmICciZm9ybWF0IicgaW4gZm9ybWF0Tm9kZS5kYXRhOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5kYXRhLCc6JykNCgkJCQkJCQkJaWYgdmFsdWVzOmZvcm1hdD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJmb3JtYXQiJywnIiInKQ0KCQkJCQkJCQl3cml0ZShsb2csWydmb3JtYXQ6Jyxmb3JtYXRdLDEyKQkJCQkJCQkJDQoJCQkJCQkJCXZhbHVlcz1Ob25lDQoJCQkJCQkJCXF1YWxpdHk9Tm9uZQ0KCQkJCQkJCQlpZiAnInF1YWxpdHkiJyBpbiBmb3JtYXROb2RlLmhlYWRlcjp2YWx1ZXM9eXMudmFsdWVzKGZvcm1hdE5vZGUuaGVhZGVyLCc6JykNCgkJCQkJCQkJaWYgJyJxdWFsaXR5IicgaW4gZm9ybWF0Tm9kZS5kYXRhOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5kYXRhLCc6JykNCgkJCQkJCQkJaWYgdmFsdWVzOnF1YWxpdHk9eXMuZ2V0VmFsdWUodmFsdWVzLCcicXVhbGl0eSInLCdpJykNCgkJCQkJCQkJd3JpdGUobG9nLFsncXVhbGl0eTonLHF1YWxpdHldLDEyKQkJCQkJCQkJDQoJCQkJCQkJCXZhbHVlcz1Ob25lDQoJCQkJCQkJCXVybD1Ob25lDQoJCQkJCQkJCWlmICcidXJsIicgaW4gZm9ybWF0Tm9kZS5oZWFkZXI6dmFsdWVzPXlzLnZhbHVlcyhmb3JtYXROb2RlLmhlYWRlciwnOicpDQoJCQkJCQkJCWlmICcidXJsIicgaW4gZm9ybWF0Tm9kZS5kYXRhOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5kYXRhLCc6JykNCgkJCQkJCQkJaWYgdmFsdWVzOnVybD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1cmwiJywnIiInKQkJCQkJCQkJDQoJCQkJCQkJCSN3cml0ZShsb2csWyd1cmw6Jyx1cmxdLDEyKQ0KCQkJCQkJCQlpZiBub3QgdXJsOg0KCQkJCQkJCQkJaWYgJyJ1cmwiJyBpbiBmb3JtYXROb2RlLnBhcmVudC5oZWFkZXI6dmFsdWVzPXlzLnZhbHVlcyhmb3JtYXROb2RlLnBhcmVudC5oZWFkZXIsJzonKQ0KCQkJCQkJCQkJaWYgJyJ1cmwiJyBpbiBmb3JtYXROb2RlLnBhcmVudC5kYXRhOnZhbHVlcz15cy52YWx1ZXMoZm9ybWF0Tm9kZS5wYXJlbnQuZGF0YSwnOicpDQoJCQkJCQkJCQlpZiB2YWx1ZXM6dXJsPXlzLmdldFZhbHVlKHZhbHVlcywnInVybCInLCciIicpCQ0KCQkJCQkJCQlpZiB1cmw6DQoJCQkJCQkJCQliYXNlbmFtZT1vcy5wYXRoLmJhc2VuYW1lKHVybCkJCQkNCgkJCQkJCQkJCWlmICcuanBlZycgaW4gYmFzZW5hbWU6cGF0aD1zeXMuZGlyK29zLnNlcCtvcy5wYXRoLmJhc2VuYW1lKHVybCkrJy5qcGcnDQoJCQkJCQkJCQllbHNlOnBhdGg9c3lzLmRpcitvcy5zZXArb3MucGF0aC5iYXNlbmFtZSh1cmwpDQoJCQkJCQkJCQlleGlzdHM9b3MucGF0aC5leGlzdHMocGF0aCkJCQkJCQkJCQ0KCQkJCQkJCQkJd3JpdGUobG9nLFsncGF0aDonLHBhdGgsZXhpc3RzXSwxMikNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJaWYgZm9ybWF0IG5vdCBpbiBJTUFHRVNbdWlkXS5rZXlzKCk6DQoJCQkJCQkJCQkJcHJpbnQgJ05PV1kgRk9STUFUOicsZm9ybWF0DQoJCQkJCQkJCQkJSU1BR0VTW3VpZF1bZm9ybWF0XT1bcGF0aCxleGlzdHMscXVhbGl0eV0NCgkJCQkJCQkJCWVsc2U6DQoJCQkJCQkJCQkJaWYgcXVhbGl0eSBhbmQgZm9ybWF0Og0KCQkJCQkJCQkJCQlpZiBxdWFsaXR5PD1JTUFHRVNbdWlkXVtmb3JtYXRdWzJdIGFuZCBleGlzdHM9PVRydWU6DQoJCQkJCQkJCQkJCQlJTUFHRVNbdWlkXVtmb3JtYXRdPVtwYXRoLGV4aXN0cyxxdWFsaXR5XQ0KCQkJCQkJCQkJDQoJCQkJCQkJCQkNCgkJCQkJCQkJDQoJCQkJCQkJDQoJCQ0KCQkJCQkJDQoJCQkJDQoJCQkNCglhbGxJbWFnZVBhdGhzPVtdCQkJDQoJCQkJCQkNCgkNCgl1c2VkSW1hZ2VQYXRocz1bXQ0KCWZvciBrZXkgaW4gSU1BR0VTOg0KCQkjd3JpdGUobG9nLFtrZXldLDApDQoJCWZvciBpdGVtIGluIElNQUdFU1trZXldOg0KCQkJI3dyaXRlKGxvZyxbaXRlbSwnOicsSU1BR0VTW2tleV1baXRlbV1dLDQpDQoJCQlpZiBJTUFHRVNba2V5XVtpdGVtXVswXToNCgkJCQlpZiBJTUFHRVNba2V5XVtpdGVtXVswXSBub3QgaW4gdXNlZEltYWdlUGF0aHM6DQoJCQkJCXVzZWRJbWFnZVBhdGhzLmFwcGVuZChJTUFHRVNba2V5XVtpdGVtXVswXSkNCgkNCglmb3IgaW1hZ2UgaW4gYWxsSW1hZ2VQYXRoczoNCgkJaWYgaW1hZ2Ugbm90IGluIHVzZWRJbWFnZVBhdGhzOg0KCQkJaWYgb3MucGF0aC5leGlzdHMoaW1hZ2UpPT1UcnVlOg0KCQkJCXByaW50ICd1c3V3YW06JyxpbWFnZQ0KCQkJCSNvcy5yZW1vdmUoaW1hZ2UpDQoJDQoJbWF0ZXJpYWxzPXlzLmdldCh5cy5yb290LCcibWF0ZXJpYWxzIicpDQoJaWYgbWF0ZXJpYWxzOg0KCQlmb3IgYSBpbiBtYXRlcmlhbHM6DQoJCQlmb3IgYiBpbiBhLmNoaWxkcmVuOg0KCQkJCW1hdE5hbWU9Tm9uZQkNCgkJCQlpZiAnIm5hbWUiJyBpbiBiLmRhdGE6DQoJCQkJCXZhbHVlcz15cy52YWx1ZXMoYi5kYXRhLCc6JykNCgkJCQkJbWF0TmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJuYW1lIicsJyIiJykucmVwbGFjZSgnOicsJycpDQoJCQkJCW1hdE5hbWU9bWF0TmFtZS5yZXBsYWNlKCc6JywnJykNCgkJCQkJaWYgJ1xcJyBpbiBtYXROYW1lOm1hdE5hbWU9bWF0TmFtZS5zcGxpdCgnXFwnKVswXQ0KCQkJCQlNQVRFUklBTFNbbWF0TmFtZV09e30NCgkJCQllbHNlOgkNCgkJCQkJZm9yIGMgaW4gYi5jaGlsZHJlbjoJCQ0KCQkJCQkJaWYgJyJuYW1lIicgaW4gYy5oZWFkZXI6DQoJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhjLmhlYWRlciwnOicpDQoJCQkJCQkJbWF0TmFtZT15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJuYW1lIicsJyIiJykNCgkJCQkJCQlNQVRFUklBTFNbbWF0TmFtZV09e30NCgkJCQkjcHJpbnQgbWF0TmFtZQ0KCQkJCXdyaXRlKGxvZyxbbWF0TmFtZV0sMCkNCgkJCQlpZgltYXROYW1lOg0KCQkJCQkjbWF0TmFtZT1tYXROYW1lLnJlcGxhY2UoJzonLCcnKQ0KCQkJCQkjaWYgJ1xcJyBpbiBtYXROYW1lOm1hdE5hbWU9bWF0TmFtZS5zcGxpdCgnXFwnKVswXQ0KCQkJCQljaGFubmVscz15cy5nZXQoYiwnImNoYW5uZWxzIicpDQoJCQkJCWlmIGNoYW5uZWxzOg0KCQkJCQkJZm9yIGMgaW4gY2hhbm5lbHNbMF0uY2hpbGRyZW46CQkJCQkNCgkJCQkJCQlNQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV09WycnLFtdLFtdXQ0KCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoYy5kYXRhLCc6JykNCgkJCQkJCQllbmFibGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciZW5hYmxlIicsJ3MnKQ0KCQkJCQkJCWlmIGVuYWJsZToNCgkJCQkJCQkJaWYgZW5hYmxlPT0ndHJ1ZSc6DQoJCQkJCQkJCQlmb3IgZCBpbiBjLmNoaWxkcmVuOg0KCQkJCQkJCQkJCWR2YWx1ZXM9eXMudmFsdWVzKGQuaGVhZGVyLCc6JykNCgkJCQkJCQkJCQkjcHJpbnQgZHZhbHVlcw0KCQkJCQkJCQkJCWlmICcidGV4dHVyZSInIGluIGQuaGVhZGVyOg0KCQkJCQkJCQkJCQlpZiAnInVpZCInIGluIGQuZGF0YToNCgkJCQkJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoZC5kYXRhLCc6JykNCgkJCQkJCQkJCQkJCXVpZD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1aWQiJywnIiInKQ0KCQkJCQkJCQkJCQkJd3JpdGUobG9nLFt1aWRdLDQpDQoJCQkJCQkJCQkJCQlpZiB1aWQgaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQkJCQkJCQlmb3IgZm9ybWF0IGluIElNQUdFU1t1aWRdOg0KCQkJCQkJCQkJCQkJCQl3cml0ZShsb2csW2Zvcm1hdCxJTUFHRVNbdWlkXVtmb3JtYXRdXSw4KQ0KCQkJCQkJCQkJCQkJCQlwYXNzDQoJCQkJCQkJCQkJCQllbHNlOg0KCQkJCQkJCQkJCQkJCXdyaXRlKGxvZyxbJ01JU1NJTkc6Jyx1aWRdLDgpDQoJCQkJCQkJCQkJCQkJcGFzcw0KCQkJCQkJCQkJCQkJCQ0KCQkJCQkJCQkJCQkJTUFURVJJQUxTW21hdE5hbWVdW2MuaGVhZGVyLnNwbGl0KCciJylbMV1dPVsndGV4dHVyZScsdWlkXQ0KCQkJCQkJCQkJCQkJdWlkPU1BVEVSSUFMU1ttYXROYW1lXVtjLmhlYWRlci5zcGxpdCgnIicpWzFdXVsxXQ0KCQkJCQkJCQkJCQkJI3ByaW50IElNQUdFU1t1aWRdDQoJCQkJCQkJCQkJaWYgJyJjb2xvciInIGluIGQuaGVhZGVyOg0KCQkJCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGQuZGF0YSwnZicpDQoJCQkJCQkJCQkJCU1BVEVSSUFMU1ttYXROYW1lXVtjLmhlYWRlci5zcGxpdCgnIicpWzFdXT1bJ2NvbG9yJyx2YWx1ZXNdDQoJCQkJCQkJZWxzZToNCgkJCQkJCQkJCWZvciBkIGluIGMuY2hpbGRyZW46DQoJCQkJCQkJCQkNCgkJCQkJCQkJCQl2YWx1ZXM9eXMudmFsdWVzKGQuaGVhZGVyLCc6JykNCgkJCQkJCQkJCQllbmFibGU9eXMuZ2V0VmFsdWUodmFsdWVzLCciZW5hYmxlIicsJ3MnKQ0KCQkJCQkJCQkJCWlmIGVuYWJsZToNCgkJCQkJCQkJCQ0KCQkJCQkJCQkJCQlpZiBlbmFibGU9PSd0cnVlJzoNCgkJCQkJCQkJCQkJCQ0KCQkJCQkJCQkJCQkJCWR2YWx1ZXM9eXMudmFsdWVzKGQuaGVhZGVyLCc6JykNCgkJCQkJCQkJCQkJCQkjcHJpbnQgZHZhbHVlcw0KCQkJCQkJCQkJCQkJCWlmICcidGV4dHVyZSInIGluIGQuaGVhZGVyOg0KCQkJCQkJCQkJCQkJCQlpZiAnInVpZCInIGluIGQuZGF0YToNCgkJCQkJCQkJCQkJCQkJCXZhbHVlcz15cy52YWx1ZXMoZC5kYXRhLCc6JykNCgkJCQkJCQkJCQkJCQkJCXVpZD15cy5nZXRWYWx1ZSh2YWx1ZXMsJyJ1aWQiJywnIiInKQ0KCQkJCQkJCQkJCQkJCQkJd3JpdGUobG9nLFt1aWRdLDQpDQoJCQkJCQkJCQkJCQkJCQlpZiB1aWQgaW4gSU1BR0VTLmtleXMoKToNCgkJCQkJCQkJCQkJCQkJCQlmb3IgZm9ybWF0IGluIElNQUdFU1t1aWRdOg0KCQkJCQkJCQkJCQkJCQkJCQl3cml0ZShsb2csW2Zvcm1hdCxJTUFHRVNbdWlkXVtmb3JtYXRdLGVuYWJsZV0sOCkNCgkJCQkJCQkJCQkJCQkJCQkJcGFzcw0KCQkJCQkJCQkJCQkJCQkJZWxzZToNCgkJCQkJCQkJCQkJCQkJCQl3cml0ZShsb2csWydNSVNTSU5HOicsdWlkXSw4KQ0KCQkJCQkJCQkJCQkJCQkJCXBhc3MNCgkJCQkJCQkJCQkJCQkJCQkNCgkJCQkJCQkJCQkJCQkJCU1BVEVSSUFMU1ttYXROYW1lXVtjLmhlYWRlci5zcGxpdCgnIicpWzFdXT1bJ3RleHR1cmUnLHVpZF0NCgkJCQkJCQkJCQkJCQkJCXVpZD1NQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV1bMV0NCgkJCQkJCQkJCQkJCQkJCSNwcmludCBJTUFHRVNbdWlkXQ0KCQkJCQkJCQkJCQkJCWlmICciY29sb3IiJyBpbiBkLmhlYWRlcjoNCgkJCQkJCQkJCQkJCQkJdmFsdWVzPXlzLnZhbHVlcyhkLmRhdGEsJ2YnKQ0KCQkJCQkJCQkJCQkJCQlNQVRFUklBTFNbbWF0TmFtZV1bYy5oZWFkZXIuc3BsaXQoJyInKVsxXV09Wydjb2xvcicsdmFsdWVzXQ0KCQkJCQkJCQkNCg0KDQpkZWYgYWN0aW9uUGFyc2VyKGZpbGVuYW1lLGcpOg0KCWFjdGlvbj1BY3Rpb24oKQ0KCWFjdGlvbi5CT05FU1BBQ0U9VHJ1ZQ0KCWFjdGlvbi5CT05FU09SVD1UcnVlDQoJd2hpbGUoVHJ1ZSk6DQoJCWlmIGcudGVsbCgpPj1nLmZpbGVTaXplKCk6YnJlYWsNCgkJYm9uZT1BY3Rpb25Cb25lKCkNCgkJYWN0aW9uLmJvbmVMaXN0LmFwcGVuZChib25lKQ0KCQlib25lLm5hbWU9Zy5maW5kKCdceDAwJykNCgkJdHlwZT1nLmZpbmQoJ1x4MDAnKQ0KCQkjcHJpbnQgYm9uZS5uYW1lLHR5cGUsZy50ZWxsKCkNCgkJaWYgdHlwZT09J3NpemUnOg0KCQkJY291bnQ9Zy5pKDEpWzBdDQoJCQkjcHJpbnQgY291bnQNCgkJCWZvciBtIGluIHNhZmUoY291bnQpOg0KCQkJCW1hdHJpeD1WZWN0b3JTY2FsZU1hdHJpeChnLmYoMykpDQoJCQkJYm9uZS5zaXplS2V5TGlzdC5hcHBlbmQobWF0cml4KQ0KCQkJY291bnQ9Zy5pKDEpWzBdDQoJCQkjcHJpbnQgY291bnQNCgkJCWZvciBtIGluIHNhZmUoY291bnQpOg0KCQkJCWZyYW1lPWludChnLmYoMSlbMF0qMzMpDQoJCQkJYm9uZS5zaXplRnJhbWVMaXN0LmFwcGVuZChmcmFtZSkNCgkJaWYgdHlwZT09J3RyYW5zbGF0ZSc6DQoJCQljb3VudD1nLmkoMSlbMF0NCgkJCSNwcmludCBjb3VudA0KCQkJZm9yIG0gaW4gc2FmZShjb3VudCk6DQoJCQkJbWF0cml4PVZlY3Rvck1hdHJpeChnLmYoMykpDQoJCQkJYm9uZS5wb3NLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQljb3VudD1nLmkoMSlbMF0NCgkJCSNwcmludCBjb3VudA0KCQkJZm9yIG0gaW4gc2FmZShjb3VudCk6DQoJCQkJZnJhbWU9aW50KGcuZigxKVswXSozMykNCgkJCQlib25lLnBvc0ZyYW1lTGlzdC5hcHBlbmQoZnJhbWUpDQoJCWlmIHR5cGU9PSdxdWF0ZXJuaW9uJzoNCgkJCWNvdW50PWcuaSgxKVswXQ0KCQkJI3ByaW50IGNvdW50DQoJCQlmb3IgbSBpbiBzYWZlKGNvdW50KToNCgkJCQlxdWF0PVF1YXRlcm5pb24oZy5mKDQpKQ0KCQkJCW1hdHJpeD1RdWF0TWF0cml4KHF1YXQpLnJlc2l6ZTR4NCgpDQoJCQkJYm9uZS5yb3RLZXlMaXN0LmFwcGVuZChtYXRyaXgpDQoJCQljb3VudD1nLmkoMSlbMF0NCgkJCSNwcmludCBjb3VudA0KCQkJZm9yIG0gaW4gc2FmZShjb3VudCk6DQoJCQkJZnJhbWU9aW50KGcuZigxKVswXSozMykNCgkJCQlib25lLnJvdEZyYW1lTGlzdC5hcHBlbmQoZnJhbWUpDQoJYWN0aW9uLmRyYXcoKQ0KCWFjdGlvbi5zZXRDb250ZXh0KCkJDQoJDQoJDQoJDQpkZWYgZ2V0Q2Fub25pY2FsKGZpbGVuYW1lKToNCglmaWxlPW9wZW4oZmlsZW5hbWUsJ3InKQ0KCWRhdGE9ZmlsZS5yZWFkKCkNCgkjcHJpbnQgZGF0YQ0KCWNhbm9uaWNhbD1Ob25lDQoJaWYgJyJjYW5vbmljYWwiJyBpbiBkYXRhOg0KCQljYW5vbmljYWw9ZGF0YS5zcGxpdCgnImNhbm9uaWNhbCInKVsxXS5zcGxpdCgnIicpWzFdLnNwbGl0KCcvJylbNF0NCgkJIygnPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vc2tldGNoZmFiLmNvbS8zZC1tb2RlbHMvJylbMV0uc3BsaXQoJyI+JylbMF0NCgkJaWYgIi0iIGluIGNhbm9uaWNhbDoNCgkJCWNhbm9uaWNhbD1jYW5vbmljYWwuc3BsaXQoIi0iKVstMV0NCgkjaWYgCQkNCglmaWxlLmNsb3NlKCkJDQoJcmV0dXJuIGNhbm9uaWNhbA0KCQkJCQkJCQkJCQ0KZGVmIFBhcnNlcihwYXRoKToNCglnbG9iYWwgc3lzLE1BVEVSSUFMUyxJTUFHRVMsTEFTVE5PREVOQU1FLGxvZyxza2lwZGVjb2RlLGZpbGVuYW1lDQoJbG9nPW9wZW4oJ2xvZy50eHQnLCd3JykNCglMQVNUTk9ERU5BTUU9Tm9uZQ0KCU1BVEVSSUFMUz17fQ0KCUlNQUdFUz17fQ0KCQ0KCQ0KCWZpbGVuYW1lPXBhdGgNCglzeXM9U3lzKGZpbGVuYW1lKQ0KCW9zLnN5c3RlbSgiY2xzIikNCglleHQ9ZmlsZW5hbWUuc3BsaXQoJy4nKVstMV0ubG93ZXIoKQ0KCWlmIGV4dD09J2d6JzoNCgkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzJw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2cpPT1GYWxzZToNCgkJCWNtZD1DbWQoKQ0KCQkJY21kLmlucHV0PWZpbGVuYW1lDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluLmd6Jw0KCQkJaWYgb3MucGF0aC5leGlzdHMobW9kZWwpPT1UcnVlOg0KCQkJCWNtZD1DbWQoKQ0KCQkJCWNtZC5pbnB1dD1tb2RlbA0KCQkJCWNtZC5aSVA9VHJ1ZQ0KCQkJCWNtZC5ydW4oKQ0KCQkJb3NnUGFyc2VyKGZpbGVuYW1lLnNwbGl0KCcuZ3onKVswXSkNCgkJDQoJaWYgZXh0PT0nb3NnanMnOg0KCQlvc2dQYXJzZXIoZmlsZW5hbWUpDQoJaWYgZXh0PT0ndHh0JzoNCgkJb3NnUGFyc2VyKGZpbGVuYW1lKQ0KCWlmIGV4dCBpbiBbJ2h0bScsJ2h0bWwnXToNCgkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzLmd6Jw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2cpPT1UcnVlOg0KCQkJY21kPUNtZCgpDQoJCQljbWQuaW5wdXQ9b3NnDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluLmd6Jw0KCQllbHNlOg0KCQkJb3NnPXN5cy5kaXIrb3Muc2VwKydmaWxlLm9zZ2pzJw0KCQltb2RlbD1zeXMuZGlyK29zLnNlcCsnbW9kZWxfZmlsZS5iaW4uZ3onDQoJCWlmIG9zLnBhdGguZXhpc3RzKG1vZGVsKT09VHJ1ZToNCgkJCWNtZD1DbWQoKQ0KCQkJY21kLmlucHV0PW1vZGVsDQoJCQljbWQuWklQPVRydWUNCgkJCWNtZC5ydW4oKQ0KCQllbHNlOg0KCQkJbW9kZWw9c3lzLmRpcitvcy5zZXArJ21vZGVsX2ZpbGUuYmluJw0KCQlpZiBvcy5wYXRoLmV4aXN0cyhtb2RlbCk6DQoJCQ0KCQkJcmVzdWx0PTANCgkJCSNyZXN1bHQ9QmxlbmRlci5EcmF3LlB1cE1lbnUoIlNrZXRjaGZhYiBWaWV3ZXIgPyV0fFllc3xObyIpCQ0KCQkJaWYgcmVzdWx0PT0xOg0KCQkJCWNhbm9uaWNhbD1nZXRDYW5vbmljYWwoZmlsZW5hbWUpDQoJCQkJY2hyb21lRXhlPSJDOlxQcm9ncmFtIEZpbGVzICh4ODYpXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSINCgkJCQkjb3Muc3lzdGVtKGNocm9tZUV4ZSkNCgkJCQkjc3VicHJvY2Vzcy5Qb3BlbihbY2hyb21lRXhlLGZpbGVuYW1lXSkud2FpdCgpDQoJCQkJI3R4dD1odG0xK2h0bTIraHRtMw0KCQkJCXR4dD1vcGVuKCJza2V0Y2hmYWIuaHRtbCIsInciKQ0KCQkJCXR4dC53cml0ZShodG0xLnJlcGxhY2UoIiMiLCIiKSkNCgkJCQlpZiBjYW5vbmljYWwgaXMgbm90IE5vbmU6DQoJCQkJDQoJCQkJCXR4dC53cml0ZShjYW5vbmljYWwpDQoJCQkJZWxzZToJDQoJCQkJCSN0eHQud3JpdGUoaHRtMikNCgkJCQkJdHh0LndyaXRlKG9zLnBhdGguZGlybmFtZShmaWxlbmFtZSkuc3BsaXQob3Muc2VwKVstMV0pDQoJCQkJdHh0LndyaXRlKGh0bTMpDQoJCQkJdHh0LmNsb3NlKCkNCgkJCQlzdWJwcm9jZXNzLlBvcGVuKFtjaHJvbWVFeGUsYmxlbmREaXIrb3Muc2VwKyJza2V0Y2hmYWIuaHRtbCJdKSMud2FpdCgpDQoJCQllbHNlOgkNCgkJCQ0KCQkJDQoJCQkJcmVzdWx0PTENCgkJCQlmaWxlU2l6ZT1vcy5wYXRoLmdldHNpemUobW9kZWwpDQoJCQkJI3Jlc3VsdD1CbGVuZGVyLkRyYXcuUHVwTWVudSgiaW1wb3J0ICIrc3RyKHJvdW5kKGZpbGVTaXplLzEwMDAwMDAuMCwxKSkrIiBNYiA/JXR8WWVzfE5vIikNCgkJCQkNCgkJCQlodG1QYXJzZXIoZmlsZW5hbWUpDQoJCQkJaWYgcmVzdWx0PT0xOgkNCgkJCQkJc2tpcGRlY29kZT0wDQoJCQkJCQ0KCQkJCQlpbmRleFJlc3VsdD0wDQoJCQkJCSNyZXN1bHQ9QmxlbmRlci5EcmF3LlB1cE1lbnUoImluZGljZSBwcm9ibGVtIisiID8ldHxZZXN8Tm8iKQ0KCQkJCQlpZiBpbmRleFJlc3VsdD09MToNCgkJCQkJCXNraXBkZWNvZGU9MQ0KCQkJCQkJDQoJCQkJCQ0KCQkJCQkNCgkJCQkJb3NnUGF0aD1zeXMuZGlyK29zLnNlcCsnZmlsZS5vc2dqcycNCgkJCQkJaWYgb3MucGF0aC5leGlzdHMob3NnUGF0aCk9PVRydWU6DQoJCQkJCQlvc2dQYXJzZXIob3NnUGF0aCkNCgkJCQkJCXBhc3MNCgkJCQkJZWxzZToNCgkJCQkJCW9zZ1BhdGg9c3lzLmRpcitvcy5zZXArJ2ZpbGUub3NnanMnDQoJCQkJCQlpZiBvcy5wYXRoLmV4aXN0cyhvc2dQYXRoKT09VHJ1ZToNCgkJCQkJCQlvc2dQYXJzZXIob3NnUGF0aCkNCgkJCQkJCQlwYXNzCQ0KCQkJCQ0KCWlmIGV4dD09J2FjdGlvbic6DQoJCWZpbGU9b3BlbihmaWxlbmFtZSwncmInKQ0KCQlnPUJpbmFyeVJlYWRlcihmaWxlKQ0KCQlhY3Rpb25QYXJzZXIoZmlsZW5hbWUsZykNCgkJZmlsZS5jbG9zZSgpDQoJbG9nLmNsb3NlKCkJDQoJCQ0KCQ0KIA0KbW9kZWxJRCA9IDANClBhcnNlcignLi97dGVtcFBhdGh9L2R1bW15Lmh0bWwnKQ=="));
			blenderScript = blenderScript.Replace("{tempPath}", tempDir);
			if (indexFix)
			{
				blenderScript = blenderScript.Replace("indexResult=0", "indexResult=1");
			}
			return blenderScript;
		}

		public static void WriteAnimatedPartial(string animName)
		{
			byte[] blenderScriptPartial = Convert.FromBase64String("");
			File.WriteAllBytes($"{Environment.CurrentDirectory}\\tools\\blender\\_sfTemp\\{SketchfabDL.session}\\_sketchfab-animImport.py", blenderScriptPartial);
			File.AppendAllText($"{Environment.CurrentDirectory}\\tools\\blender\\_sfTemp\\{SketchfabDL.session}\\_sketchfab-animImport.py", $"dummy.html_files/{animName}");
			File.AppendAllText($"{Environment.CurrentDirectory}\\tools\\blender\\_sfTemp\\{SketchfabDL.session}\\_sketchfab-animImport.py", "')");
		}

		public static void saveFBX(string conversionMode = "Static", bool quads = false, string tempDir = "_sfTemp")
		{
			string blenderScript = Encoding.UTF8.GetString(Convert.FromBase64String("aW1wb3J0IGJweQ0KcXVhZHMgPSBGYWxzZQ0Kc3RhdGljID0gVHJ1ZQ0KaWYgc3RhdGljOg0KCWlmIHF1YWRzOg0KCQlwcmludCgiUHJvZ3Jlc3MgOiBXcml0aW5nIEZCWCAoUXVhZHMpLi4uIiwgZmx1c2g9VHJ1ZSkNCgkJYnB5Lm9wcy5leHBvcnRfc2NlbmUuZmJ4KGZpbGVwYXRoPScuL3t0ZW1wUGF0aH0vbW9kZWxOZXcucXVhZHMuZmJ4JywgcGF0aF9tb2RlPSdSRUxBVElWRScsIGJha2VfYW5pbT1GYWxzZSwgb2JqZWN0X3R5cGVzPXsnTUVTSCd9KQ0KCWVsc2U6DQoJCXByaW50KCJQcm9ncmVzcyA6IFdyaXRpbmcgRkJYLi4uIiwgZmx1c2g9VHJ1ZSkNCgkJYnB5Lm9wcy5leHBvcnRfc2NlbmUuZmJ4KGZpbGVwYXRoPScuL3t0ZW1wUGF0aH0vbW9kZWxOZXcuZmJ4JywgcGF0aF9tb2RlPSdSRUxBVElWRScsIGJha2VfYW5pbT1GYWxzZSwgb2JqZWN0X3R5cGVzPXsnTUVTSCd9KQ0KZWxzZToNCglpZiBxdWFkczoNCgkJcHJpbnQoIlByb2dyZXNzIDogV3JpdGluZyBGQlggKFF1YWRzKS4uLiIsIGZsdXNoPVRydWUpDQoJCWJweS5vcHMuZXhwb3J0X3NjZW5lLmZieChmaWxlcGF0aD0nLi97dGVtcFBhdGh9L21vZGVsTmV3LnF1YWRzLmZieCcsIHBhdGhfbW9kZT0nUkVMQVRJVkUnLCBiYWtlX2FuaW09RmFsc2UpDQoJZWxzZToNCgkJcHJpbnQoIlByb2dyZXNzIDogV3JpdGluZyBGQlguLi4iLCBmbHVzaD1UcnVlKQ0KCQlicHkub3BzLmV4cG9ydF9zY2VuZS5mYngoZmlsZXBhdGg9Jy4ve3RlbXBQYXRofS9tb2RlbE5ldy5mYngnLCBwYXRoX21vZGU9J1JFTEFUSVZFJywgYmFrZV9hbmltPUZhbHNlKQ=="));
			blenderScript = blenderScript.Replace("{tempPath}", tempDir);
			if (conversionMode != "Static")
			{
				blenderScript = blenderScript.Replace("static = True", "static = False");
			}
			if (quads)
			{
				blenderScript = blenderScript.Replace("quads = False", "quads = True");
				File.WriteAllText($"{Environment.CurrentDirectory}\\tools\\blender-292\\_sfTemp\\{SketchfabDL.session}\\_saveFBXQuads.py", blenderScript);
				return;
			}
			File.WriteAllText($"{Environment.CurrentDirectory}\\tools\\blender-292\\_sfTemp\\{SketchfabDL.session}\\_saveFBX.py", blenderScript);
		}
	}
}
